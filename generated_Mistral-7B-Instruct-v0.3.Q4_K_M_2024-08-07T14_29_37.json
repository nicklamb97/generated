[
    {
        "instruction": "What is the equivalent C# data type for the 'DATE' data type in Actian 4GL? Provide the C# class and instance declaration.",
        "input": "",
        "output": "The equivalent C# data type for the DATE data type in Actian 4GL is DateTime. The C# code to declare a new instance of the DateTime class is as follows:\n\nDateTime appointmentDate = new DateTime();",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you address the challenge of handling arrays in 4GL while using Lists or arrays in C#? Provide an example with code.",
        "input": "The following 4GL script contains an array with multiple rows of data, each row containing 3 values: (1, '2025-01-23', 678.90) and (2, '2025-02-17', 987.60).\n```\nDEFINE ARRAY myData(2);\nmyData[1] = (1, \"2025-01-23\", 678.90);\nmyData[2] = (2, \"2025-02-17\", 987.60);\nINSERT INTO transactions (transaction_id, transaction_date, amount) VALUES myData[];\n```",
        "output": "To address the challenge of handling arrays in 4GL while using Lists or arrays in C#, you can convert the array into a List and use it to iterate over the data before inserting each row:\n```\nList<object[]> transactions = new List<object[]>();\ntransactions.Add(new object[] { 1, \"2025-01-23\", 678.90m });\ntransactions.Add(new object[] { 2, \"2025-02-17\", 987.60m });\n\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"INSERT INTO transactions (transaction_id, transaction_date, amount)\",\n        connection))\n    {\n        foreach (var row in transactions)\n        {\n            command.Parameters.AddWithValue(\"@transactionId\", row[0]);\n            command.Parameters.AddWithValue(\"@transactionDate\", row[1]);\n            command.Parameters.AddWithValue(\"@amount\", row[2]);\n            command.ExecuteNonQuery();\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Suppose you are given an example of a 4GL Select statement, but the table schema is not provided. How would you convert it to C#? Respond only in code: SELECT * FROM customers WHERE country = 'USA';",
        "input": "Here's the table schema for the \"customers\" table:\n- Column names: CustomerID (int), FirstName (string), LastName (string), Address (string), Country (string)",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string query = \"SELECT * FROM customers WHERE country = @country\";\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        command.Parameters.AddWithValue(\"@country\", \"USA\");\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int customerID = reader.GetInt32(0);\n                string firstName = reader.GetString(1);\n                string lastName = reader.GetString(2);\n                string address = reader.GetString(3);\n                string country = reader.GetString(4);\n                Console.WriteLine($\"{customerID}, {firstName}, {lastName}, {address}, {country}\");\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you convert the following 4GL Update statement into C#? Respond only in code: UPDATE orders SET order_total = (order_total * 0.1) WHERE customer_id = 703;",
        "input": "",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\n        \"UPDATE orders SET order_total = order_total * 0.1 WHERE customer_id = @customerId\",\n        connection))\n    {\n        command.Parameters.AddWithValue(\"@customerId\", 703);\n        command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Suppose you are given an example of a 4GL Update statement that includes a computed column. How would you convert it to C#? Respond only in code: UPDATE orders SET total_price = order_total + tax WHERE order_id = 2001;",
        "input": "The table schema for the \"orders\" table is as follows:\n- Column names: OrderID (int), CustomerID (int), OrderTotal (decimal), Tax (decimal, computed column), TotalPrice (decimal)",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string query = \"UPDATE orders SET total_price = order_total + tax WHERE order_id = @orderId\";\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        command.Parameters.AddWithValue(\"@orderId\", 2001);\n        command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Imagine you have an Actian 4GL application that is using the following UPDATE statement:\nUPDATE orders SET total = total * 1.05 WHERE order_id = 'ORD001' AND customer_id = 123; How would you convert this to a C# code snippet?",
        "input": "The \"orders\" table schema is as follows:\n- Column names: OrderID (string), CustomerID (int), Total (decimal), Discount (decimal)",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"UPDATE orders SET total = total * @discount WHERE order_id = @orderID AND customer_id = @customerID\", connection))\n    {\n        command.Parameters.AddWithValue(\"@discount\", 1.05m);\n        command.Parameters.AddWithValue(\"@orderID\", \"ORD001\");\n        command.Parameters.AddWithValue(\"@customerID\", 123);\n        command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given the following example DELETE statement in Actian 4GL: DELETE FROM products WHERE category = 'Electronics' AND price > 500; Write an equivalent C# code snippet to accomplish this task.",
        "input": "Here's the \"products\" table schema:\n- Column names: ProductID (int), Category (string), Description (string), Price (decimal)",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"DELETE FROM products WHERE category = @category AND price > @price\", connection))\n    {\n        command.Parameters.AddWithValue(\"@category\", \"Electronics\");\n        command.Parameters.AddWithValue(\"@price\", 500m);\n        command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How can you convert the following Actian 4GL UPDATE statement into C#? Respond only in code: UPDATE orders SET quantity = 20 WHERE order_id = 123;",
        "input": "",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"UPDATE orders SET quantity = @quantity WHERE order_id = @orderId\", connection))\n    {\n        command.Parameters.AddWithValue(\"@quantity\", 20);\n        command.Parameters.AddWithValue(\"@orderId\", 123);\n        command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is the main difference between using OpenROAD for Actian 4GL and C# for database operations?",
        "input": "",
        "output": "OpenROAD is a database management tool designed specifically for Actian 4GL, whereas C# is a general-purpose programming language. While OpenROAD provides a convenient way to interact with an Actian database using 4GL syntax and data manipulation functions, C# requires the use of the ADO.NET libraries (System.Data) for connecting and manipulating databases, including executing SQL statements like INSERTs.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is the recommended approach to convert multiple Actian 4GL INSERT statements into C#?",
        "input": "",
        "output": "To convert multiple Actian 4GL INSERT statements into C#, you can write a loop or a function that iterates through each record and executes the SQL INSERT command using ADO.NET (System.Data) libraries in C#. It's recommended to prepare your data structures properly for easy manipulation before passing them to the database.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is the difference between the data types for the priority field in Actian 4GL and C#? Respond with a brief explanation of the differences.",
        "input": "",
        "output": "In Actian 4GL, the priority data type is typically a character string that represents the priority level of a ticket or task. In C#, you would use the enumeration type to represent priority levels, such as an enum called Priority with values like Low, Medium, and High. This helps ensure data consistency by preventing invalid values from being assigned to the priority field.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How can you convert a loop construct in Actian 4GL to its equivalent in C#? Respond with an example for each language.",
        "input": "Here is an example of a loop in Actian 4GL that iterates through the tickets table and outputs each ticket's priority:\n```\nFOR EACH ticket IN tickets\n   OUTPUT ticket_priority;\nEND FOR;\n```",
        "output": "The equivalent C# code for the above Actian 4GL loop would be:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT ticket_priority FROM tickets\", connection))\n    {\n        SqlDataReader reader = command.ExecuteReader();\n\n        while (reader.Read())\n        {\n            Console.WriteLine(reader.GetString(0));\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is the correct syntax for declaring a variable of type String in Actian 4GL? Provide an example with code.",
        "input": "",
        "output": "In Actian 4GL, you can declare a variable of type String using the VAR keyword followed by the name of the variable and the equal sign (=). For example:\n```\nVAR myString : String;\nmyString = \"Hello, World!\";\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is the correct way to perform a conditional statement in C# using If-Else statements? Provide an example with code.",
        "input": "A variable named `isValid` has been initialized as `true`. Write code that sets `isValid` to `false` if the input number provided by `inputNumber` is less than 10. Otherwise, set it to `true`.",
        "output": "```csharp\nif (inputNumber < 10)\n{\n    isValid = false;\n}\nelse\n{\n    isValid = true;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What are some common differences between the INSERT statements in 4GL and C#? Respond with an example for each.",
        "input": "",
        "output": "In 4GL, you may see an INSERT statement that uses a data structure directly without creating an SQL command object like this:\n\n    INSERT INTO feedback (feedback_id, user_id, comments) VALUES &feedback;\n\nHowever, in C#, you would create an SQL command and then execute it using the `ExecuteNonQuery()` method:\n\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"INSERT INTO feedback (feedback_id, user_id, comments) VALUES (@feedbackId, @userId, @comments)\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@feedbackId\", 999);\n            command.Parameters.AddWithValue(\"@userId\", 3456);\n            command.Parameters.AddWithValue(\"@comments\", \"Great service!\");\n            command.ExecuteNonQuery();\n        }\n    }",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Can you provide an example of handling multiple records with different INSERT statements in a single query and how it could be done in C#?",
        "input": "INSERT INTO authors (author_id, name) VALUES (1001, 'John Doe');\nINSERT INTO books (book_id, author_id, title) VALUES (2001, 1001, 'The Art of Programming');\nINSERT INTO book_authors (book_id, author_id, is_primary_author) VALUES (2001, 1001, 1);",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    string sqlQuery = @\"INSERT INTO authors (author_id, name) VALUES (@authorId, @name);\n                          INSERT INTO books (book_id, author_id, title) VALUES (@bookId, @authorId, @title);\n                          INSERT INTO book_authors (book_id, author_id, is_primary_author) VALUES (@bookId, @authorId, 1)\";\n    using (SqlCommand command = new SqlCommand(sqlQuery, connection))\n    {\n        command.Parameters.AddWithValue(\"@authorId\", 1001);\n        command.Parameters.AddWithValue(\"@name\", \"John Doe\");\n        command.Parameters.AddWithValue(\"@bookId\", 2001);\n        command.Parameters.AddWithValue(\"@title\", \"The Art of Programming\");\n        command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is the purpose of using parameterized queries in C# when converting Actian 4GL INSERT statements?",
        "input": "",
        "output": "Using parameterized queries in C# while converting Actian 4GL INSERT statements provides several benefits: improved performance, security against SQL injection attacks, and more readable code. Instead of concatenating the query string with variable values, the parameters are assigned separately, ensuring that the variables are properly escaped and preventing potential vulnerabilities.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Assume we want to insert records into two tables (orders and order_items) using a single transaction. What is an example implementation for this scenario in C#? Respond only in code:",
        "input": "Suppose that the \"orders\" table has columns order_id, customer_id, and order_date; while the \"order_items\" table has columns item_id, order_id, product_id, quantity, price.",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (TransactionScope scope = new TransactionScope())\n    {\n        string insertOrdersQuery = \"INSERT INTO orders (order_id, customer_id, order_date) VALUES (@orderId, @customerId, @orderDate);\";\n        string insertOrderItemsQuery = \"INSERT INTO order_items (item_id, order_id, product_id, quantity, price) VALUES (@itemId, @orderId, @productId, @quantity, @price);\";\n\n        using (SqlCommand ordersCmd = new SqlCommand(insertOrdersQuery, connection))\n        {\n            ordersCmd.Parameters.AddWithValue(\"@orderId\", orderId);\n            ordersCmd.Parameters.AddWithValue(\"@customerId\", customerId);\n            ordersCmd.Parameters.AddWithValue(\"@orderDate\", orderDate);\n            ordersCmd.ExecuteNonQuery();\n        }\n\n        using (SqlCommand itemsCmd = new SqlCommand(insertOrderItemsQuery, connection))\n        {\n            itemsCmd.Parameters.AddWithValue(\"@itemId\", itemId);\n            itemsCmd.Parameters.AddWithValue(\"@orderId\", orderId);\n            itemsCmd.Parameters.AddWithValue(\"@productId\", productId);\n            itemsCmd.Parameters.AddWithValue(\"@quantity\", quantity);\n            itemsCmd.Parameters.AddWithValue(\"@price\", price);\n            itemsCmd.ExecuteNonQuery();\n        }\n\n        scope.Complete(); // Commit the transaction\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Can you demonstrate a C# example of handling errors when inserting multiple records using stored procedures?",
        "input": "CREATE PROCEDURE InsertMultipleEmployees (@firstName NVARCHAR(50), @lastName NVARCHAR(50)) AS\nBEGIN\n    INSERT INTO employees (first_name, last_name) VALUES (@firstName, @lastName);\n    ... // other INSERT statements\nEND;",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    try\n    {\n        string sqlQuery = \"EXEC InsertMultipleEmployees @firstName=@firstNameParam, @lastName=@lastNameParam\";\n        using (SqlCommand command = new SqlCommand(sqlQuery, connection))\n        {\n            command.Parameters.AddWithValue(\"@firstNameParam\", \"John\");\n            command.Parameters.AddWithValue(\"@lastNameParam\", \"Doe\");\n            int rowsAffected = command.ExecuteNonQuery();\n            if (rowsAffected <= 0)\n                throw new Exception(\"Failed to insert employee.\");\n        }\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert the following Actian 4GL INSERT statement for OpenROAD: INSERT INTO customers (customer_id, firstname, lastname, email) VALUES ('1001', 'John', 'Smith', 'john.smith@example.com'); to C# code that performs the same action.",
        "input": "Assume the connection string is \"server=myServerAddress;database=myDataBase\";",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string query = \"INSERT INTO customers (customer_id, firstname, lastname, email) VALUES (@customerId, @firstName, @lastName, @email)\";\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        command.Parameters.AddWithValue(\"@customerId\", \"1001\");\n        command.Parameters.AddWithValue(\"@firstName\", \"John\");\n        command.Parameters.AddWithValue(\"@lastName\", \"Smith\");\n        command.Parameters.AddWithValue(\"@email\", \"john.smith@example.com\");\n        command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given the following code in C#, how would you modify it to convert the INSERT statement for Actian 4GL from a single record insertion to batch processing of multiple records?",
        "input": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string query = \"INSERT INTO orders (order_id, customer_id, order_total) VALUES ('1', '1001', '50.00')\";\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        command.ExecuteNonQuery();\n    }\n}",
        "output": "To convert the INSERT statement from a single record insertion to batch processing of multiple records in C#, you can follow these steps:\n1. Prepare a SQL script with all the INSERT statements in a loop.\n2. Create a new string variable for each record and concatenate it with the proper data.\n3. Execute the query containing the batched INSERT statements using SqlCommand's ExecuteNonQuery method.\n\nHere is an example of the modified C# code:\n\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    StringBuilder sqlScript = new StringBuilder();\n    List<string> records = new List<string>();\n\n    for (int i = 1; i <= numberOfRecords; i++)\n    {\n        string recordQuery = $\"INSERT INTO orders (order_id, customer_id, order_total) VALUES ('{i}', '1001', '{50.00 + i * 10}')\";\n        records.Add(recordQuery);\n    }\n\n    sqlScript.AppendLine(\"BEGIN TRANSACTION\");\n    foreach (string record in records)\n    {\n        sqlScript.AppendLine(record);\n    }\n    sqlScript.AppendLine(\"COMMIT TRANSACTION\");\n\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(sqlScript.ToString(), connection))\n    {\n        command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you handle exceptions during the conversion process from Actian 4GL to C#? Provide an example with code.",
        "input": "In this example, you will encounter a 4GL script that attempts to insert data into a table that already has a unique constraint violation:\n```\nINSERT INTO employees (employee_id, name) VALUES (12345, 'Alice Smith');\n```\nAssume the table \"employees\" has a primary key constraint on column \"employee_id\".",
        "output": "When handling exceptions during the conversion process from Actian 4GL to C#, it is essential to wrap your code with a try-catch block and handle the specific exception that might occur:\n```\ntry\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"INSERT INTO employees (employee_id, name) VALUES (@employeeId, @name)\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@employeeId\", 12345);\n            command.Parameters.AddWithValue(\"@name\", \"Alice Smith\");\n            command.ExecuteNonQuery();\n        }\n    }\n}\ncatch (SqlException ex)\n{\n    Console.WriteLine($\"Error: {ex.Message}\");\n    // Handle the exception by logging the error, notifying the user, or retrying the operation.\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What happens during the process of converting Actian 4GL INSERT statements for OpenROAD to C#? Provide a brief explanation with examples.",
        "input": "",
        "output": "Converting Actian 4GL INSERT statements for OpenROAD to C# involves translating the SQL statement structure, data types and syntax into equivalent C# code. This includes creating a SqlConnection object, defining an appropriate query string, setting values for parameters in the query, opening the connection, executing the command, and closing the connection. Here's an example of an Actian 4GL INSERT statement:\n```4gl\nDEFINE SQL STMT AS \"INSERT INTO invoices (invoice_id, issue_date, amount) VALUES (?, ?, ?)\";\nEXECUTE DB-SQL STMT USING @id, @date, @amount;\n```\nIts equivalent C# code would look like this:\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string query = \"INSERT INTO invoices (invoice_id, issue_date, amount) VALUES (@invoiceId, @issueDate, @amount)\";\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        command.Parameters.AddWithValue(\"@invoiceId\", id); // Replace with a variable containing the invoice_id value\n        command.Parameters.AddWithValue(\"@issueDate\", date); // Replace with a variable containing the issue_date value\n        command.Parameters.AddWithValue(\"@amount\", amount); // Replace with a variable containing the amount value\n        connection.Open();\n        command.ExecuteNonQuery();\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Consider the following Actian 4GL INSERT statement: INSERT INTO products (product_id, name, description, unit_price) VALUES ('P001', 'Leather Jacket', 'Black Leather Jacket for Men', 199.99);. If a connection string is not provided, how would you respond?",
        "input": "",
        "output": "I'm unable to provide the desired output without a connection string as it is essential for establishing communication between the C# application and your database. A sample connection string for SQL Server could be: \"server=myServerAddress;database=myDataBase\". You should replace 'myServerAddress' with the actual server address, and 'myDataBase' with the name of your database. For other databases (such as Oracle or MySQL), you will need to create appropriate connection strings accordingly.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given the following Actian 4GL SELECT statement: SELECT AVG(price) FROM products WHERE category = 'Books' AND publisher = 'Penguin'. Write an equivalent C# code to perform this query and store the result in a variable.",
        "input": "The \"products\" table schema is:\n- Column names: ProductID (int), Category (string), Publisher (string), Price (decimal)",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT AVG(price) FROM products WHERE category = @category AND publisher = @publisher\", connection))\n    {\n        command.Parameters.AddWithValue(\"@category\", \"Books\");\n        command.Parameters.AddWithValue(\"@publisher\", \"Penguin\");\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            if (reader.Read())\n            {\n                double averagePrice = reader.GetDecimal(0);\n                // Use the averagePrice variable in your code.\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Create a C# code snippet that retrieves and returns the total count of rows in the 'customers' table. Assume that you have already established the database connection using Entity Framework Core.",
        "input": "The 'customers' table schema is as follows:\n- Column names: CustomerID (int, primary key), Name (string)",
        "output": "using (var context = new MyDbContext())\n{\n    return await context.Customers.CountAsync();\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Suppose you have an Actian 4GL program that performs a SELECT statement with a WHERE clause like this: SELECT * FROM customers WHERE country = 'France'. Write the equivalent C# code snippet for retrieving the same data using LINQ to Entities. Assume you have already established the database connection using Entity Framework Core.",
        "input": "The 'customers' table schema is as follows:\n- Column names: CustomerID (int, primary key), Name (string), Country (string)",
        "output": "using (var context = new MyDbContext())\n{\n    return await context.Customers.Where(c => c.Country == \"France\").ToListAsync();\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Consider the following Actian 4GL DELETE statement: DELETE FROM orders WHERE order_id = 'O001'. If you have a connection to the database, how would you perform this operation in C#?",
        "input": "Here's the example of a connection string for your SQL Server database: \"server=myServerAddress;database=myDataBase\". You will also need to create a command object with the DELETE statement and execute it.",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"DELETE FROM orders WHERE order_id = @orderID\", connection))\n    {\n        command.Parameters.AddWithValue(\"@orderID\", \"O001\");\n        int rowsAffected = command.ExecuteNonQuery();\n        Console.WriteLine($\"{rowsAffected} row(s) deleted.\");\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Assume you are given a C# code that retrieves data from the 'employees' table but it only fetches the employee's ID, name, and department. However, the manager wants to see the complete information including job title, annual salary, and date of employment. How would you modify the SELECT statement in the C# code?",
        "input": "Here's the existing C# code:\n```csharp\nstring connectionString = \"server=myServerAddress;database=myDataBase\";\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string query = \"SELECT employee_id, first_name, department FROM employees\";\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int employee_id = reader.GetInt32(0);\n                string first_name = reader.GetString(1);\n                string department = reader.GetString(2);\n\n                // Other operations here\n            }\n        }\n    }\n}\n```",
        "output": "To include additional columns, update the SELECT statement to fetch all required information:\n```csharp\nstring connectionString = \"server=myServerAddress;database=myDataBase\";\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string query = \"SELECT employee_id, first_name, department, job_title, annual_salary, date_of_employment FROM employees\";\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int employee_id = reader.GetInt32(0);\n                string first_name = reader.GetString(1);\n                string department = reader.GetString(2);\n                string job_title = reader.GetString(3);\n                decimal annual_salary = reader.GetDecimal(4);\n                DateTime date_of_employment = reader.GetDateTime(5);\n\n                // Other operations here\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given the following C# code snippet, what would be the output if there is no matching record for the given WHERE clause? Respond only in text.",
        "input": "```\nusing (var connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (var command = new SqlCommand(\"SELECT * FROM orders WHERE order_id = @orderId\", connection))\n    {\n        command.Parameters.AddWithValue(\"@orderId\", 123);\n        var result = command.ExecuteReader();\n\n        while (result.Read())\n        {\n            Console.WriteLine($\"Order ID: {result[\"order_id\"]}, Quantity: {result[\"quantity\"]}\");\n        }\n    }\n}\n```",
        "output": "No output will be shown as there is no matching record for the given WHERE clause (order_id = 123)",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What considerations should you make when converting complex 4GL statements to C#? Respond with at least two considerations.",
        "input": "",
        "output": "1. Translate the logic of the 4GL statement into a corresponding C# structure, such as loops, if-else blocks, or recursive functions if necessary.\n2. Be aware that some features in 4GL may not have direct equivalents in C# and you may need to use alternative methods to achieve the same results. For example, you may need to replace GUI elements with console commands or web APIs.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "In that scenario, you need to specify null values for missing columns. Consider the following 4GL Insert statement: INSERT INTO contacts (contact_id, name) VALUES (4002, 'Nancy White'). How would you write equivalent C# code for this case?",
        "input": "The table schema is as follows:\n- Column names: contact_id (int, primary key), name (string), email (string) with default value set to null.",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"INSERT INTO contacts (contact_id, name) VALUES (@contactId, @name)\", connection))\n    {\n        command.Parameters.AddWithValue(\"@contactId\", 4002);\n        command.Parameters.AddWithValue(\"@name\", \"Nancy White\");\n        command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Assuming you have already created an ADO.NET connection to the database and defined a SqlCommand object for the Insert statement, how would you handle parameters when executing the command? Provide code snippets for adding multiple parameters.",
        "input": "",
        "output": "```csharp\nusing (SqlCommand command = new SqlCommand(\n    \"INSERT INTO reviews (review_id, reviewer_name, review_date, rating) VALUES\n        (@reviewId, @reviewerName, @reviewDate, @rating)\",\n    connection))\n{\n    // Add parameters\n    command.Parameters.Add(\"@reviewId\", SqlDbType.Int);\n    command.Parameters[\"@reviewId\"].Value = 1;\n\n    command.Parameters.Add(\"@reviewerName\", SqlDbType.NVarChar);\n    command.Parameters[\"@reviewerName\"].Value = \"Tom Riddle\";\n\n    command.Parameters.Add(\"@reviewDate\", SqlDbType.DateTime);\n    command.Parameters[\"@reviewDate\"].Value = new DateTime(2024, 7, 1);\n\n    command.Parameters.Add(\"@rating\", SqlDbType.Int);\n    command.Parameters[\"@rating\"].Value = 5;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Assuming you have an Actian 4GL program that handles errors with the TRY-CATCH blocks, how would you translate this error handling mechanism to C# using try-catch? Use a custom exception for a specific case.",
        "input": "Here is a sample 4GL code snippet:\n```4gl\nTRY\n    ...\n    READ some_data FROM file_name;\n    PROCESS some data;\n    WRITE output_file;\nON ERROR NOT FOUND\n    DECLARE err_msg \"No such data in the file\";\n    WRITE err_msg TO console;\nEND TRY;\n```",
        "output": "using (var reader = new StreamReader(file_name))\n{\n    try\n    {\n        some_data = reader.ReadLine();\n        // Process the data\n        var outputFile = File.CreateText(\"output_file\");\n        outputFile.Write(output);\n    }\n    catch (FileNotFoundException)\n    {\n        string errMsg = \"No such data in the file\";\n        Console.WriteLine(errMsg);\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you convert the following Actian 4GL code to C# that initializes and opens a SQL connection using the database's default settings?",
        "input": "The following is a sample of an Actian 4GL code snippet:\n```4gl\nDEFINE VAR db_conn AS NEW DATABASE-CONN;\nEXECUTE CONNECT TO \"mydatabase\" USING db_conn;\n```",
        "output": "using (SqlConnection connection = new SqlConnection())\n{\n    connection.ConnectionString = \"Server=<your_server>;Database=mydatabase;Trusted_Connection=True\"; // replace with your server and database name\n    connection.Open();\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you handle dynamic SQL in 4GL and convert it to C#? Assume the SQL query has been stored as a string variable, e.g., 'SELECT * FROM table_name WHERE column1 = :param'.",
        "input": "Here is an example of using dynamic SQL in Actian 4GL:\n```4gl\nDECLARE searchParam \"value\";\nSET sqlQuery = \"SELECT * FROM customers WHERE city = :searchParam\";\nEXECUTE SQL sqlQuery USING searchParam;\n```",
        "output": "using (var connection = new SqlConnection(connectionString))\n{\n    string sqlQuery = $\"SELECT * FROM {tableName} WHERE city = @searchParam\";\n    using (SqlCommand command = new SqlCommand(sqlQuery, connection))\n    {\n        command.Parameters.AddWithValue(\"@searchParam\", searchParam);\n        connection.Open();\n        var reader = command.ExecuteReader();\n        // Process the results...\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Suppose you have a stored procedure in Actian that takes parameters and returns a resultset, like so: SELECT * FROM customers WHERE id = :input_id; What would be an equivalent C# implementation using Entity Framework?",
        "input": "Here is an example of using a stored procedure with parameters in 4GL:\n```4gl\nDECLARE input_id \"some_value\";\nEXECUTE PROCEDURE selectCustomersById(input_id);\n```",
        "output": "using (var context = new YourDbContext())\n{\n    var customers = context.Database\n        .SqlQuery<Customer>(\"EXECUTE selectCustomersById @p0\", input_id)\n        .ToList();\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Can you provide an example of how to handle exceptions when inserting data in C#?",
        "input": "",
        "output": "Here's an example using a try-catch block for exception handling in C#:\n\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        try\n        {\n            connection.Open();\n            using (SqlCommand command = new SqlCommand(\n                \"INSERT INTO feedback (feedback_id, user_id, comments) VALUES (@feedbackId, @userId, @comments)\",\n                connection))\n            {\n                command.Parameters.AddWithValue(\"@feedbackId\", 999);\n                command.Parameters.AddWithValue(\"@userId\", 3456);\n                command.Parameters.AddWithValue(\"@comments\", \"Great service!\");\n                int rowsAffected = command.ExecuteNonQuery();\n                if (rowsAffected == 0)\n                {\n                    throw new Exception(\"No rows were affected\");\n                }\n            }\n        }\n        catch(Exception ex)\n        {\n            Console.WriteLine($\"An error occurred: {ex.Message}\");\n        }\n    }",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is the difference between using a parameterized query and not using one for security reasons? Explain with an example of the impact in both scenarios on a real-world INSERT statement.",
        "input": "",
        "output": "Using a parameterized query helps prevent SQL injection attacks because it separates SQL code from user input. When you don't use parameterization, your code is more vulnerable to these attacks:\n\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        string sqlCommand = \"INSERT INTO feedback (feedback_id, user_id, comments) VALUES (\" + 999.ToString() + \", \" + 3456.ToString() + \", 'Great service!')\";\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(sqlCommand, connection))\n        {\n            command.ExecuteNonQuery();\n        }\n    }\n\nHowever, by parameterizing the query as follows:\n\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        string sqlCommand = \"INSERT INTO feedback (feedback_id, user_id, comments) VALUES (@feedbackId, @userId, @comments)\";\n        using (SqlCommand command = new SqlCommand(sqlCommand, connection))\n        {\n            command.Parameters.AddWithValue(\"@feedbackId\", 999);\n            command.Parameters.AddWithValue(\"@userId\", 3456);\n            command.Parameters.AddWithValue(\"@comments\", \"Great service!\");\n            command.ExecuteNonQuery();\n        }\n    }",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "In addition to the basic INSERT, UPDATE, and DELETE operations, you may need to perform multiple table operations in a single statement using subqueries. Describe how you would handle these subqueries when converting Actian 4GL statements into C# code. Provide an example with realistic data.",
        "input": "Consider the following subquery: INSERT INTO order_items (order_id, product_id, unit_price) SELECT o.order_id, p.product_id, p.unit_price FROM orders o JOIN products p ON o.product_id = p.product_id;",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"INSERT INTO order_items (order_id, product_id, unit_price) SELECT o.order_id, p.product_id, p.unit_price FROM orders o JOIN products p ON o.product_id = p.product_id\", connection))\n    {\n        command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_s",
        "task_description": "Learn about converting Actian 4GL INSERT statements for OpenROAD to C#.",
        "document": null
    }
]
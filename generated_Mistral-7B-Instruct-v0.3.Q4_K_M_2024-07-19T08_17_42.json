[
    {
        "instruction": "Explain how a developer can pass simple variable values to the procedure using the optional parameter list.",
        "input": "",
        "output": "The optional `parameterlist` allows you to pass simple variable values to a procedure in Actian 4GL SQL. The data type of the assigned value must be compatible with the data type of the parameter.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What permissions are required to execute a non-owned procedure?",
        "input": "",
        "output": "To execute a procedure that you do not own, you must have EXECUTE privilege for the procedure and must specify the schema parameter.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "How long does it take to execute a database procedure for the first time?",
        "input": "",
        "output": "The first execution of the database procedure can take slightly longer than subsequent executions due to the host DBMS needing to create a query execution plan.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "List the parameters for the execute procedure statement and explain what they do.",
        "input": "",
        "output": "The parameters for the execute procedure statement are variable, procname, parameterlist (optional), and cursorobjereference (also optional). The `variable` contains the return value of the procedure. `procname` specifies the name of the procedure as specified in its definition. `parameterlist` lets you pass simple variable values to the procedure using an optional list. The data type of the assigned parameter's value must match the parameter's data type. If used, the cursorobjereference allows database procedures to return data sets, but is not available when running against the Ingres DBMS.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Explain what happens if you try to execute a procedure that you do not own with the execute procedure statement.",
        "input": "",
        "output": "To execute a procedure that you don't own, you need to have EXECUTE privilege for that procedure and specify its schema parameter. Otherwise, an error occurs.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What are the locking behaviors of the execute procedure statement?",
        "input": "",
        "output": "The locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Can we use optional `into cursorobjereference` clause with Ingres DBMS?",
        "input": "",
        "output": "No, we cannot use the optional `into cursorobjereference` clause with Ingres DBMS.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What optional clause allows database procedures to return data sets?",
        "input": "",
        "output": "The optional `into cursorobjereference` clause allows database procedures to return data sets. However, it is currently not available running against the Ingres DBMS.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What are the conditions for a user to execute a procedure that they do not own?",
        "input": "",
        "output": "To execute a procedure that you do not own, you must have EXECUTE privilege for the procedure and must specify the schema parameter.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Can you explain how to declare a variable that receives the return value of the procedure in Actian 4GL?",
        "input": "",
        "output": "In Actian 4GL, the variable that receives the return value of the procedure must be an integer data type.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What is the role of the `into cursorobjereference` clause in Actian 4GL SQL's `execute procedure` statement?",
        "input": "",
        "output": "The optional `into cursorobjereference` clause allows database procedures to return data sets. However, it's currently not available running against the Ingres DBMS.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What are the parameters of the execute procedure statement?",
        "input": "",
        "output": "The `execute procedure` statement has four parameters: `variable`, `procname`, `parameterlist`, and `cursorobjereference`. The first three are mandatory while the last one is optional.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Explain what happens when a developer does not own a procedure but wants to execute it using the execute procedure statement.",
        "input": "",
        "output": "To execute a procedure that you do not own, you must have EXECUTE privilege for the procedure and specify the schema parameter in Actian 4GL SQL.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Describe how database procedures can return data sets using the optional `cursorobjereference` clause of the `execute procedure` statement in Actian 4GL SQL.",
        "input": "",
        "output": "Database procedures can return a single value to the procedure or frame that executed the `execute procedure` statement, but if you use the optional `cursorobjreference` clause, a database procedure can also return a data set. However, this feature is currently not available running against the Ingres DBMS.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "In the context of Actian's `Execute Procedure` statement, explain what a parameter list is and how it can be used.",
        "input": "",
        "output": "The parameter list optionally lets you pass simple variable values to the procedure using the syntax: `(param1, param2...)`. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter in the procedure definition. If not specified, Actian 4GL will attempt to automatically match the data types.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What locking mechanism does the `Execute Procedure` statement use?",
        "input": "",
        "output": "The locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Explain what happens when the first execution of a database procedure using the `execute procedure` statement in Actian 4GL SQL takes place?",
        "input": "",
        "output": "For the first execution, the host DBMS may need to create a query execution plan. As a result, the first execution can take slightly longer than subsequent executions.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What permission is required to execute a procedure that you do not own?",
        "input": "",
        "output": "To execute a procedure that you do not own, you must have EXECUTE privilege for the procedure and must specify the schema parameter.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Can you explain what the first execution of the database procedure can take longer than subsequent executions?",
        "input": "",
        "output": "Yes, the first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan, which takes some time. However, for subsequent executions, the execution plan is already available and the process becomes faster.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What is the purpose of using 'into cursorobjreference' in the execute procedure statement?",
        "input": "",
        "output": "Using the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "How does the execute procedure statement handle permissions when executing a procedure that you do not own?",
        "input": "",
        "output": "To execute a procedure that you do not own, you must have EXECUTE privilege for the procedure and must specify the schema parameter.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Describe the conditions for executing a procedure that you do not own.",
        "input": "",
        "output": "To execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Explain the syntax for the `Execute Procedure` statement in Actian's SQL language. Provide an example of its usage.",
        "input": "",
        "output": "The syntax for the `Execute Procedure` statement is as follows:\n```sql\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nHere's an example of its usage:\n\nAssume we have the following database procedure definition:\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend;\n```\nThen executing the procedure `myproc`:\n```sql\nexecute procedure myproc(emp_name = 'John', emp_no = 123, emp_terminated = byref(EmpIsTerminated));\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Explain how a procedure can return data sets using the `Execute Procedure` statement in Actian's SQL language.",
        "input": "",
        "output": "Using the optional `into cursorobjereference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS. The syntax for this would look something like:\n```sql\nexecute procedure procname (param1, param2) into cursor1;\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What are the requirements for executing a procedure that you do not own?",
        "input": "",
        "output": "To execute a procedure that you do not own, you must have EXECUTE privilege for the procedure and you should specify the schema parameter.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What should I do if I want to execute a procedure that I don't own?",
        "input": "",
        "output": "To execute a procedure that you do not own, you must have EXECUTE privilege for the procedure and must specify the schema parameter.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Explain when you need to specify the schema parameter while executing a procedure that you do not own.",
        "input": "",
        "output": "If you want to execute a procedure that you do not own, you must have EXECUTE privilege for the procedure and must specify the schema parameter. This ensures that the correct schema is used when calling the procedure.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What are the requirements for executing a procedure that is not owned by the user?",
        "input": "",
        "output": "To execute a procedure that you do not own, you must have EXECUTE privilege for the procedure and must specify the schema parameter.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "How does the `execute procedure` statement pass parameters to a procedure?",
        "input": "",
        "output": "The `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the optional parameter list in the `execute procedure` statement syntax in Actian 4GL SQL?",
        "input": "",
        "output": "The `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Can you give an example of using `execute procedure` with a named parameter list?",
        "input": "",
        "output": "Assuming the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\nThen you can execute the `myproc` procedure with a named parameter list like this:\n\n```sql\nexecute procedure myproc(emp_name = 'john', emp_no = 12345, emp_terminated = byref(EmpIsTerminated));\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What is the use of `parameterlist` in the `Execute Procedure` statement?",
        "input": "",
        "output": "The parameter list allows you to pass simple variable values to the procedure. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter. Here is an example:\n```sql\nexecute procedure myproc(param1, param2);\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What does the optional 'cursorobjereference' clause do when executing an Actian 4GL procedure?",
        "input": "",
        "output": "The optional `cursorobjereference` clause allows database procedures to return data sets. However, this is not available running against the Ingres DBMS.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What is the syntax of the Execute Procedure statement in Actian 4GL SQL?",
        "input": "",
        "output": "The syntax for the `execute procedure` statement is:\n\n```sql\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Explain how you can pass simple variable values to a procedure using the `execute procedure` statement in Actian 4GL SQL.",
        "input": "",
        "output": "The optional parameter list in the `execute procedure` statement lets you pass simple variable values to the procedure. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Explain how a database procedure can return data sets using the optional clause. Also, explain why this is not available for Ingres DBMS.",
        "input": "",
        "output": "The optional `into cursorobjreference` clause allows database procedures to return data sets in Actian 4GL SQL. However, this feature is currently not available for running against the Ingres DBMS.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Explain what is meant by \"The first execution of a database procedure can take slightly longer than subsequent executions.\"",
        "input": "",
        "output": "For the first execution, the host DBMS may need to create a query execution plan which can cause it to be slower compared to subsequent executions.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "How can you execute a registered procedure in Actian 4GL SQL and pass it some parameter values?",
        "input": "",
        "output": "You can execute a registered procedure in Actian 4GL SQL by using the `execute procedure` statement. The syntax is as follows:\n\n```sql\n[variable =] execute procedure procname (parameterlist) [into cursorobjreference{, cursorobjreference}];\n```\n\nFor example:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw', emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "1. What is `variable` in the execute procedure statement and what role does it play?\n2. What is `procname` in the execute procedure statement and how does it specify the name of the procedure?\n3. Explain the purpose of `parameterlist`.\n4. Describe the functionality of the optional `into cursorobjreference`.\n5. How can you execute a procedure that you do not own?",
        "input": "",
        "output": "1. The `variable` parameter contains the return value of the procedure. For example:\n\n```sql\nexecute procedure myproc(return_val = byref(emp_salary))...;\n```\n2. The `procname` specifies the name of the procedure as specified in its definition.\n\nFor example:\n\n```sql\nexecute procedure myproc ...;\n```\n3. The `parameterlist` is optional and lets you pass simple variable values to the procedure using named parameters or a positional parameter list.\n4. The `into cursorobjreference` clause allows database procedures to return data sets, but this functionality is not available running against the Ingres DBMS.\n\nFor example:\n\n```sql\nexecute procedure myproc(return_cursor = byref(my_cursor)) ...;\n```\n5. To execute a procedure that you do not own, you must have `EXECUTE` privilege for the procedure and specify the schema parameter.\n\nFor example:\n\n```sql\nexecute procedure owner.procedure_name(parameters)...;\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "Explain what is meant by the optional `into cursorobjreference` clause in the `execute procedure` statement and when it can be used.",
        "input": "",
        "output": "The optional `into cursorobjreference` clause allows database procedures to return data sets. However, this optional clause is currently not available running against the Ingres DBMS.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    },
    {
        "instruction": "What happens if you first execution of the database procedure using the `execute procedure` statement in Actian 4GL SQL?",
        "input": "",
        "output": "The first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->execute_procedure",
        "task_description": "Explain the features and parameters of the execute procedure statement in Actian 4GL SQL.",
        "document": [
            "# Execute Procedure Statement\n\nThis statement executes a database procedure.\n\n## Syntax\n\n```\n[variable =] execute procedure procname\n          ([parameterlist])\n          [into cursorobjreference{, cursorobjreference}];\n```\n\nThe `execute procedure` statement executes a database procedure. This procedure must be registered before the `execute procedure` statement calls it, although registration does not need to be done within the application that issues the `execute procedure` statement.\n\nThe `execute procedure` statement lets you pass simple variable values to the procedure using the optional parameter list. The data type of the value that you assign to a parameter must be compatible with the data type of the parameter.\n\nThe procedure can return a single value to the procedure or frame that executed the `execute procedure` statement. The variable that receives the return value must be an integer data type.\n\nUsing the optional `into cursorobjreference` clause allows database procedures to return data sets. This optional clause is currently not available running against the Ingres DBMS.\n\nIf you are using the `execute procedure` statement with non-Ingres servers, see the section \"Database Procedure Management\" in the Enterprise Access Developing Portable Applications Guide for information about declaring and executing DBMS procedures (see [http://docs.actian.com/](http://docs.actian.com/)).\n\n## Parameters\n\nThis statement has the following parameters:\n\n### variable\nContains the return value of the procedure.\n\n### procname\nSpecifies the name of the procedure as specified in the procedure's definition.\n\n### parameterlist\nSee NamedParameterList.\n\n### cursorobjereference (Optional)\nAllows database procedures to return data sets. This clause is currently not available running against the Ingres DBMS.\n\n## Execute Procedure Permissions\n\nTo execute a procedure that you do not own, you must have EXECUTE privilege for the procedure, and must specify the schema parameter.\n\n## Execute Procedure Locking\n\nThe locks taken by the procedure depend on the statements that are executed inside the procedure. All locks are taken immediately when the procedure is executed.\n\n## Execute Procedure Performance\n\nThe first execution of the database procedure can take slightly longer than subsequent executions. For the first execution, the host DBMS may need to create a query execution plan.\n\n## Execute Procedure Related Statements\n\n- Grant (privilege) Statement\n\n## Examples\n\nAssume the following database procedure definition:\n\n```sql\ncreate procedure myproc\n          (emp_name = varchar(256) not null, emp_no = integer not null,\n           emp_terminated = integer not null) =\nbegin\n          processing statements\nend\n```\n\nThen execute the procedure `myproc`:\n\n```sql\nexecute procedure myproc(emp_name = 'joshw',\n          emp_no = 12, emp_terminated = byref(EmpIsTerminated));\n```\n\n### Example--Exit Statement\n\nThe following event block, defined for the Quit menu operation, uses an exit statement to end the application:\n\n```sql\non click file.quit =\nbegin\n          exit;\nend\n```"
        ]
    }
]
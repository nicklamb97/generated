version: 0.2
env:
  variables:
    CUDA_HOME: "/usr/local/cuda"
phases:
  install:
    runtime-versions:
      python: 3.10
    commands:
      - echo "üîß Updating system packages and installing CMake..."
      - apt-get update && apt-get install -y cmake
      - echo "‚úÖ System packages updated and CMake installed"

  pre_build:
    commands:
      - echo "üîç Capturing triggering commit SHA..."
      - TRIGGER_COMMIT_SHA=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION)

      - echo "Creating upload_to_huggingface.py script..."
      - |
        cat << EOF > upload_to_huggingface.py
        import os
        import time
        from huggingface_hub import login, upload_folder
        from huggingface_hub.utils import HfHubHTTPError

        def upload_with_retry(max_retries=3, delay=60):
            for attempt in range(max_retries):
                try:
                    token = os.environ.get("HF_TOKEN")
                    if not token:
                        raise ValueError("HF_TOKEN environment variable is not set")
                    login(token=token)
                    upload_folder(
                        folder_path="models",
                        path_in_repo="",
                        repo_id="NickLamb/OpenROAD-8B-Instruct",
                        repo_type="model"
                    )
                    print(f"‚úÖ Upload successful on attempt {attempt + 1}")
                    return True
                except HfHubHTTPError as e:
                    if e.response.status_code == 504 and attempt < max_retries - 1:
                        print(f"‚ùó Gateway timeout on attempt {attempt + 1}. Retrying in {delay} seconds...")
                        time.sleep(delay)
                    else:
                        print(f"‚ùå Error during upload: {str(e)}")
                        return False
                except Exception as e:
                    print(f"‚ùå Unexpected error during upload: {str(e)}")
                    return False
            return False

        if not upload_with_retry():
            print("‚ùå Upload failed after multiple attempts")
            exit(1)
        EOF

  build:
    commands:
      - echo "üêç Installing Python dependencies..."
      - pip install --upgrade pip
      - echo "‚úÖ Pip upgraded successfully"

      - echo "üî• Installing PyTorch with CUDA support..."
      - pip uninstall -y torch
      - pip cache purge
      - pip install torch --index-url https://download.pytorch.org/whl/cu118
      - echo "‚úÖ PyTorch installed successfully"

      - echo "ü¶ô Installing llama-cpp-python with CUDA support..."
      - pip uninstall -y llama-cpp-python
      - pip cache remove llama_cpp_python
      - CMAKE_ARGS="-DLLAMA_CUBLAS=on" FORCE_CMAKE=1 pip install llama-cpp-python==0.2.75 --no-cache-dir
      - echo "‚úÖ llama-cpp-python installed successfully"

      - echo "ü§ó Installing huggingface_hub, transformers, bitsandbytes, and accelerate..."
      - pip install huggingface_hub transformers
      - pip install bitsandbytes --prefer-binary
      - pip install accelerate
      - echo "‚úÖ huggingface_hub, transformers, bitsandbytes, and accelerate installed successfully"

      - echo "üîß Installing InstructLab..."
      - pip install instructlab --no-cache-dir
      - echo "‚úÖ InstructLab installed successfully"

      - echo "üîç Checking GPU acceleration support..."
      - |
        python -c '
        import llama_cpp
        is_supported = llama_cpp.llama_supports_gpu_offload()
        print("üñ•Ô∏è Is GPU acceleration supported: " + str(is_supported))
        '

      - echo "üìÇ Cloning repositories at specific commit..."
      - git clone https://github.com/nicklamb97/generated.git
      - cd generated
      - git checkout $TRIGGER_COMMIT_SHA
      - cd ..
      - git clone https://github.com/nicklamb97/instructlab-config.git
      - echo "‚úÖ Repositories cloned successfully"

      - echo "üìÑ Copying config file..."
      - cp instructlab-config/config.yaml .
      - echo "‚úÖ Config file copied successfully"

      - echo "üì• Downloading pre-trained model..."
      - ilab model download --repository=NickLamb/OpenROAD-8B-Instruct --filename=OpenROAD-8B-Instruct.Q4_K_M.gguf
      - echo "‚úÖ Pre-trained model downloaded successfully"

      - echo "üèãÔ∏è Training model with 4-bit quantization..."
      - ilab model train --device=cuda --num-epochs 20 --4-bit-quant
      - echo "‚úÖ Model training completed"

      - echo "üè∑Ô∏è Renaming models..."
      - |
        python -c '
        import os
        from datetime import datetime
        import shutil
        current_time = datetime.now().strftime("%Y%m%d_%H%M%S")
        models_dir = "models"
        models_old_dir = "models_old"
        os.makedirs(models_old_dir, exist_ok=True)
        old_model_path = os.path.join(models_dir, "OpenROAD-8B-Instruct.Q4_K_M.gguf")
        if os.path.exists(old_model_path):
            old_model_name = f"openroad-model-{current_time}.gguf"
            shutil.move(old_model_path, os.path.join(models_old_dir, old_model_name))
            print(f"üì¶ Moved old OpenROAD-8B-Instruct.Q4_K_M.gguf to {models_old_dir}/{old_model_name}")
        else:
            print("No existing OpenROAD-8B-Instruct.Q4_K_M.gguf found")
        new_model_path = os.path.join(models_dir, "ggml-model-f16.gguf")
        if os.path.exists(new_model_path):
            os.rename(new_model_path, os.path.join(models_dir, "OpenROAD-8B-Instruct.Q4_K_M.gguf"))
            print("‚úÖ Renamed ggml-model-f16.gguf to OpenROAD-8B-Instruct.Q4_K_M.gguf")
        else:
            print("ggml-model-f16.gguf not found")
        print("\nüìÅ Contents of current models directory:")
        print("\n".join(os.listdir(models_dir)))
        print("\nüìÅ Contents of models_old directory:")
        print("\n".join(os.listdir(models_old_dir)))
        '
      - echo "‚úÖ Model renaming completed"

      - echo "üöÄ Uploading to Hugging Face..."
      - python upload_to_huggingface.py
      - |
        if [ $? -ne 0 ]; then
          echo "‚ùå Upload to Hugging Face failed. Skipping subsequent steps."
          exit 1
        fi
      - echo "üéâ Hugging Face upload completed successfully"

      - echo "üîç Moving recently added files to 'added' directory..."
      - |
        cd generated
        git diff-tree --no-commit-id --name-only -r $TRIGGER_COMMIT_SHA | while read -r file; do
          if [[ $file == discarded_* || $file == generated_* || $file == test_* || $file == train_* ]]; then
            if [ -f "$file" ]; then
              mv "$file" added/
              echo "Moved $file to added/"
            fi
          fi
        done
      - echo "‚úÖ Recently added files moved successfully"

      - echo "üîÑ Committing changes to generated repository..."
      - |
        cd generated
        git config user.name "Nick Lamb"
        git config user.email "nick.lamb@diegesis.co.uk"
        git add added/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Move recently added files to 'added' directory [skip ci]"
          git push https://${GITHUB_TOKEN}@github.com/nicklamb97/generated.git HEAD:main
        fi
      - cd ..
      - echo "‚úÖ Changes committed and pushed to generated repository (if any)"

      - echo "üéâ Build process completed successfully"
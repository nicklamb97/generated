[
    {
        "instruction": "What is the purpose of the `callproc` statement in OpenROAD?",
        "input": "",
        "output": "The `callproc` statement is used to call a local procedure defined in the current frame or procedure. For example:\n```\ntax = callproc addtax (tax = taxpercent, price = costfield);\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What are the steps to define a local procedure in OpenROAD?",
        "input": "",
        "output": "To define a local procedure in OpenROAD:\n1. Use the `procedure` statement in the frame, field, procedure, or user class script in which you are defining the procedure.\n2. Follow the syntax below to create a procedure definition:\n```\nprocedure procname [([parameterlist])] =\n[declare\n    localvariablelist\n[enddeclare]]\nbegin\n    statementlist\nend\n[;]\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Explain the `localvariablelist` in the procedure definition of OpenROAD with an example.",
        "input": "",
        "output": "The `localvariablelist` is a list of local variables that you declare within your procedure for its use only.\n\nFor example:\n```\nprocedure myProcedure (myInput = string) =\ndeclare\n    localVariable1 as integer;\n    localVariable2 as float8;\nend\nbegin\n    localVariable1 = 5;\n    localVariable2 = 3.4;\n    // Use the variables in your procedure logic\nend\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "How does the runtime system search for and execute a local procedure in OpenROAD?",
        "input": "",
        "output": "The runtime system searches the local scopes of the currently executing frame or procedure and executes the local procedure if it is found in the callproc string variable.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Explain how to declare forward references for local procedures in OpenROAD.",
        "input": "",
        "output": "You use one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Describe the use of the `initialize` statement in defining local procedures in OpenROAD.",
        "input": "",
        "output": "For more information about the declare block, see Initialize Statement. It is used to initialize and declare local variables before executing statements within a procedure.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Explain the process to define a local procedure in Actian 4GL SQL.",
        "input": "",
        "output": "To define a local procedure, use the following syntax:\n```\nprocedure procname [([parameterlist])] =\n[declare\n    localvariablelist\n[enddeclare]]\nbegin\n    statementlist\nend\n[;]\n```\nFor example:\n```\nprocedure addtax (tax=float8, price=float8) =\n{\n    return (price * tax);\n}\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Given a sample procedure, write a function call to invoke it with appropriate parameters.",
        "input": "Here is a local procedure called `addTax()`:\n```\nprocedure addTax (rate as float8) =\nbegin\n    return amount * rate / 100;\nend\n```\nThe variable `amount` is a floating-point number representing the original taxable value.",
        "output": "To invoke the `addTax()` procedure with an argument of 5%, use the following function call:\n```\ntax = callproc addTax (rate=5);\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What is the purpose of using local procedures in Actian 4GL SQL?",
        "input": "",
        "output": "Local procedures in Actian 4GL SQL are used to code a callable procedure for a single frame, field, procedure, or user class script. The advantage is that you can define and use your own functions within the script where they're needed without cluttering up global namespaces. This helps avoid naming conflicts with other procedures.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "How to call a local procedure in Actian 4GL SQL?",
        "input": "",
        "output": "Use the `callproc` statement to call a local procedure defined in the current frame or procedure. For example:\n```\ntax = callproc addtax (tax = taxpercent, price = costfield);\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Provide an example of a forward reference declaration and the corresponding actual procedure definition in OpenROAD.",
        "input": "",
        "output": "Here is an example:\n\nForward Reference Declaration:\n```\nmyProcedure = procedure returning none\n```\n\nActual Procedure Definition:\n```\nprocedure myProcedure () =\nbegin\n    // Your procedure logic here\nend\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Explain the purpose and format of declaring forward references for local procedures in Actian 4GL SQL. Provide an example.",
        "input": "",
        "output": "In Actian 4GL SQL, you declare a forward reference before defining a local procedure so that the runtime system can search local scopes and execute the local procedure when it's called using the `callproc` statement. Here are three formats for declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe last two formats (`procedure returning none` and `procedure`) are equivalent. They specify that the procedure does not return a value. Here is an example of declaring a forward reference for a local procedure:\n\n```\nlocalMyProcedure = procedure;\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Describe the syntax used to define a local procedure in Actian 4GL SQL, with an example.",
        "input": "",
        "output": "Use the following syntax to define a local procedure in Actian 4GL SQL:\n\n```\nprocedure procname [([parameterlist])] =\n[declare\n    localvariablelist\n[enddeclare]]\nbegin\n    statementlist\nend\n[;]\n```\nFor example, if you have the following parameter and local variables for your procedure named `myProcedure`, the syntax would look like this:\n\n```\nprocedure myProcedure (myInput = string) =\ndeclare\n    localVariable1 as integer;\n    localVariable2 as float8;\nend\nbegin\n    localVariable1 = 5;\n    localVariable2 = 3.4;\n    // Use the variables in your procedure logic\nend\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Can you explain the syntax for defining a local procedure in Actian 4GL SQL?",
        "input": "",
        "output": "To define a local procedure, use the following syntax:\n```\nprocedure procname [([parameterlist])] =\n[declare\n    localvariablelist\n[enddeclare]]\nbegin\n    statementlist\nend\n[;]\n```\n\nFor more information about the `parameterlist`, see Procedure Statement. For more information about the `declare` block, see Initialize Statement.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Can you provide an example of a procedure definition in OpenROAD with parameters and its usage?",
        "input": "",
        "output": "Yes, here's an example of a procedure definition and a call to it in OpenROAD:\n```\nprocedure addtax (tax=float8, price=float8) =\n{\n    return (price * tax);\n}\ntax = callproc addtax (tax = taxpercent,  price = costfield);\n```\nIn this example, the procedure `addtax` has two parameters: `tax` and `price`, both with data type `float8`. The procedure multiplies the value of `price` by the value of `tax`. In the call to the procedure, we pass in the values for these parameters as `taxpercent` and `costfield` respectively.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What is a forward reference and how can it be declared for local procedures in OpenROAD?",
        "input": "",
        "output": "A forward reference is a declaration of a procedure without its definition. You use it before the actual definition so that you can call the procedure later in your code. In OpenROAD, you can declare a forward reference for a local procedure using one of the following formats:\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Can you give an example of a local procedure in Actian 4GL SQL?",
        "input": "",
        "output": "Here is an example of a local procedure:\n```\nprocedure addtax (tax=float8, price=float8) =\n{\n    return (price * tax);\n}\n```\nThis sample procedure is called `addtax`. It has two parameters, `tax` and `price`, with the data type `float8`. The caller passes values for these parameters when they call the procedure. When the procedure is called, it performs calculations using the parameter values and returns the result to the caller.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Explain the purpose of a forward reference for local procedures in Actian 4GL SQL.",
        "input": "",
        "output": "A forward reference is used when defining a local procedure in Actian 4GL SQL before it can be defined. The declaration of a forward reference allows you to refer to the local procedure later, and it should be placed in the `declare` block for the script in which the local procedure is defined. When you declare the local procedure forward reference, use one of the following formats:\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Given a local procedure name, how do you call it in Actian 4GL SQL?",
        "input": "procname = \"myprocedure\"",
        "output": "You can call the local procedure `myprocedure` defined in the current frame or procedure using the `callproc` statement. Here is an example:\n```\ncallproc myprocedure;\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What should you do before defining a local procedure in Actian 4GL SQL?",
        "input": "",
        "output": "You should declare a forward reference for the local procedure before defining it. Put the forward reference in the `declare` block of the script where the local procedure is defined using one of the following formats:\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Can you explain how the runtime system in Actian 4GL SQL searches for and executes local procedures?",
        "input": "",
        "output": "In Actian 4GL SQL, the runtime system searches local scopes of the currently executing frame or procedure to find and execute a local procedure if it is called using the `callproc` statement. The order in which the parameters are specified in the `callproc` statement need not match the order in which they appear in the procedure definition. However, they must be identical in name to the parameters in the procedure definition.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "How can you define a local procedure in Actian 4GL SQL? Provide the syntax.",
        "input": "",
        "output": "To define a local procedure in Actian 4GL SQL, use the following syntax:\n```\nprocedure procname [([parameterlist])] =\n[declare\n    localvariablelist\n[enddeclare]]\nbegin\n    statementlist\nend\n[;]\n```\nFor more information about the `parameterlist`, see Procedure Statement. For more information about the declare block, see Initialize Statement. The runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is found in the callproc string variable.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Describe the syntax used for defining a local procedure in Actian 4GL SQL. Provide an example with parameter list and return value.",
        "input": "",
        "output": "To define a local procedure in Actian 4GL SQL, you can use the following syntax:\n\n```\nprocedure procname [([parameterlist])] =\n[declare\n    localvariablelist\n[enddeclare]]\nbegin\n    statementlist\nend\n[;]\n```\n\nThe `procedure` keyword specifies that you are defining a procedure. The name of the procedure is `procname`. You can provide a list of parameters enclosed in parentheses, as shown by `parameterlist`. The data types and number of parameters may vary depending on your requirements. A return value can also be specified after the closing bracket using the `return` statement within the `statementlist`. Here's an example:\n\n```\nprocedure addtax (tax=float8, price=float8) =\nbegin\n    declare local result as float8;\n    result = (price * tax);\n    return result;\nend;\n```\nIn this example, the procedure is named `addtax`. It has two parameters: `tax` and `price`, both of which are of type `float8`. The `declare` statement defines a local variable named `result`. Inside the `begin-end` block, we calculate the result and return it to the caller.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What is the purpose of using the callproc statement when working with local procedures in Actian 4GL SQL? Provide an example.",
        "input": "",
        "output": "The `callproc` statement in Actian 4GL SQL is used to call a local procedure defined within the current frame or procedure. It takes the name of the local procedure as its argument and returns the result, if any, produced by the called procedure. Here's an example:\n\n```\nresult = callproc addtax (tax = .05, price = 10);\n```\nIn this example, we are calling a local procedure named `addtax` with two arguments: `tax` and `price`. The value of `result` will be the product of `price` and `tax`, which is 5.2 (0.05 * 10).",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What is the purpose of forward references when defining local procedures in Actian 4GL SQL?",
        "input": "",
        "output": "In Actian 4GL SQL, you declare a forward reference for a local procedure before you define it. This allows you to use the local procedure in your script before it is actually defined. The declaration must be put in the `declare` block of the script in which the local procedure is defined.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What are some data types that can be used as parameters for a local procedure in Actian 4GL SQL?",
        "input": "",
        "output": "In Actian 4GL SQL, you can use various data types such as `integer`, `float`, and `character` as parameters for a local procedure. You specify the data type of each parameter in the procedure definition when using the `procedure` statement to create the procedure.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    }
]
[
    {
        "instruction": "Explain how to convert a complex stored procedure from Actian 4GL to C# and provide a simple example for a stored procedure that performs CRUD operations (Create, Read, Update, Delete) on a table called orders.",
        "input": "Here's a sample complex stored procedure in Actian 4GL:\n```\nDEFINE PROCEDURE update_order(orderid INTEGER, new_status CHARACTER VARYING(5))\nBEGIN\n   FIND FIRST orderid WHERE order.orderid = orderid;\n   IF FOUND THEN\n      order.status := new_status;\n      UPDATE order;\n   ELSE\n      MESSAGE 'Order not found';\n   END;\nEND DEFINE;\n```",
        "output": "First, identify the operations being performed by the stored procedure (Create, Read, Update, Delete) and write separate methods for each operation in C#. Here's a simple example for a stored procedure that performs CRUD operations on a table called `orders`.\n\n```csharp\npublic void CreateOrder(int orderId, string status)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"INSERT INTO orders (order_id, status) VALUES (@orderId, @status)\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@orderId\", orderId);\n            command.Parameters.AddWithValue(\"@status\", status);\n            command.ExecuteNonQuery();\n        }\n    }\n}\n\npublic Order ReadOrder(int orderId)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"SELECT * FROM orders WHERE order_id = @orderId\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@orderId\", orderId);\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                if (reader.Read())\n                {\n                    return new Order()\n                    {\n                        OrderId = reader.GetInt32(0),\n                        Status = reader.GetString(1)\n                    };\n                }\n                else\n                {\n                    throw new Exception(\"Order not found\");\n                }\n            }\n        }\n    }\n}\n\npublic void UpdateOrder(int orderId, string status)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"UPDATE orders SET status = @status WHERE order_id = @orderId\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@orderId\", orderId);\n            command.Parameters.AddWithValue(\"@status\", status);\n            command.ExecuteNonQuery();\n        }\n    }\n}\n\npublic void DeleteOrder(int orderId)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"DELETE FROM orders WHERE order_id = @orderId\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@orderId\", orderId);\n            command.ExecuteNonQuery();\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Identify the potential challenges and considerations when converting a large amount of Actian 4GL code to C# for a company's OpenROAD project. Respond with bullet points in the third person perspective.",
        "input": "",
        "output": "1. Understanding and mapping equivalent constructs between Actian 4GL and C#, as some features may not have direct equivalents or require additional workarounds.\n2. Adapting to new programming paradigms and syntax, which could potentially affect the code readability for team members with different levels of C# familiarity.\n3. Ensuring data compatibility between both languages during conversion, as data types may need adjustments or translations to match their C# counterparts.\n4. Testing thoroughly after each conversion stage to confirm that business logic remains intact and there are no unintended side effects.\n5. Developing a clear documentation strategy for tracking changes, recording any issues encountered during the conversion process, and providing context for team members who may work on the code later.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Write a C# function to generate an encrypted password hash based on SHA-256. Respond in code only:",
        "input": "string password = \"YourSecretPassword123$\";",
        "output": "public static byte[] Hash(string input)\n{\n    using (SHA256 sha256Hash = SHA256.Create())\n    {\n        return sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(input));\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL loop for calculating sales totals for each employee to C# LINQ query. Respond in code only:\n\nFOR EACH employee IN employees WHERE commission_type IS 'Percentage' DO\n  commission_sales = (commission_rate * sales) AS DECIMAL(10, 2);\n  total_commission += commission_sales;\nEND FOR",
        "input": "List<Employee> employees = GetEmployees();",
        "output": "double totalCommission = employees\n    .Where(e => e.CommissionType == CommissionType.Percentage)\n    .Sum(e => (decimal)(e.Sales * e.CommissionRate * 100));",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL If-Else statement for validating an employee's tenure to C#. Respond only in code: IF employee_tenure > 10 THEN output = 'Employee is eligible for seniority bonus.' ELSE output = 'Employee does not meet the minimum tenure requirement.';",
        "input": "",
        "output": "string output;\nif (employeeTenure > 10)\n{\n    output = \"Employee is eligible for seniority bonus.\";\n}\nelse\n{\n    output = \"Employee does not meet the minimum tenure requirement.\";\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL nested For loop for generating a list of all department heads to C#. Respond only in code: FOR i = 1 TO count_department_heads DO BEGIN\n    LET department_head = SELECT name FROM departments WHERE department = 'Heads' AND rownum = i;\n    PRINT department_head;\nEND;",
        "input": "Assume there are 3 department heads and their names are John Doe, Jane Smith, and Sam Brown. Their names are stored in the 'Department Heads' table under the column 'name'. The primary key is 'id'.",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT name FROM departments WHERE department = 'Heads'\", connection))\n    {\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            int i = 1;\n            while (reader.Read() && i <= 3)\n            {\n                Console.WriteLine(reader[0]); // assuming that 'name' is the first column\n                i++;\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Provide suggestions for improving the code quality when converting Actian 4GL to C# in a business environment. Respond with actionable tips for maintaining clean, modular, and scalable code.",
        "input": "Here is an example of some converted Actian 4GL code snippet to C#:\n```\nWHENEVER CONDITION (order_status = \"NEW\") DO BEGIN\n    // Send email notification\nEND;\n\nWHENEVER CONDITION (order_status = \"SHIPPED\") DO BEGIN\n    // Update order status in the database\nEND;\n```",
        "output": "1. Create separate methods for each condition block, making the code more modular and easier to test and maintain. For example:\n   ```\n   void SendEmailNotificationForNewOrders()\n   {\n       if (order_status == \"NEW\")\n       {\n           // Send email notification\n       }\n   }\n\n   void UpdateOrderStatusInDatabase(string newStatus)\n   {\n       if (newStatus == \"SHIPPED\")\n       {\n           // Update order status in the database\n       }\n   }\n   ```\n2. Consider using an event-based approach for handling multiple conditions or operations, reducing code duplication and making it easier to manage complex business logic. For example:\n   ```\n   public delegate void OrderStatusChangedEventHandler(object sender, EventArgs args);\n\n   public class OrderProcessor\n   {\n       public event OrderStatusChangedEventHandler OnOrderStatusChanged;\n\n       private string order_status;\n\n       public string OrderStatus\n       {\n           get { return order_status; }\n           set\n           {\n               order_status = value;\n               OnOrderStatusChanged?.Invoke(this, new EventArgs());\n\n               // Based on the changed order status, call the appropriate methods for email notification or updating order status in the database\n           }\n       }\n   }\n   ```\n3. Utilize exception handling and logging to make the code more robust and error-tolerant. This helps to prevent unintended consequences when errors occur during the conversion process.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Write a function to fetch the total sales for each product in 4GL and convert it to C#.",
        "input": "Assume there is a table 'sales' with columns 'product_id', 'date', and 'amount'. We need to get the sum of amount for each product.",
        "output": "public Dictionary<int, decimal> GetProductSalesTotal(string connectionString)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        var salesByProduct = new Dictionary<int, decimal>();\n\n        using (SqlCommand command = new SqlCommand(\"SELECT product_id, SUM(amount) as total_sales FROM sales GROUP BY product_id\", connection))\n        {\n            connection.Open();\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    int productId = (int)reader[\"product_id\"];\n                    decimal totalSales = (decimal)reader[\"total_sales\"];\n                    salesByProduct[productId] = totalSales;\n                }\n            }\n        }\n\n        return salesByProduct;\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Write a 4GL program that calculates the average inventory level of a product over a year. The table 'inventory' has columns 'product_id', 'year', and 'quantity'. Assume there are no missing data for any year or product.",
        "input": "Assume that there is enough data from 2010 to 2020 for all the products.",
        "output": "To calculate the average inventory level of a product over a year in C#, we can follow these steps:\n```csharp\npublic decimal CalculateAverageInventoryLevel(string connectionString, int productId)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        decimal totalQuantity = 0;\n        int count = 0;\n\n        using (SqlCommand command = new SqlCommand(\"SELECT SUM(quantity) as total, COUNT(*) as totalYears FROM inventory WHERE product_id = @productId GROUP BY year\", connection))\n        {\n            command.Parameters.AddWithValue(\"@productId\", productId);\n            connection.Open();\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                if (reader.Read())\n                {\n                    totalQuantity = (decimal)reader[\"total\"];\n                    count = (int)reader[\"totalYears\"];\n                }\n            }\n        }\n\n        return totalQuantity / count;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Analyze the code and explain its purpose in business context.",
        "input": "public decimal GetAverageDailySales(string connectionString)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        decimal totalDays = ((DateTime.Now - DateTime.Parse(\"01/01/2022\")).TotalDays + 1);\n        decimal dailySalesSum = 0;\n\n        using (SqlCommand command = new SqlCommand(\n            \"SELECT SUM(amount) as total FROM sales WHERE date >= '01/01/2022' AND date <= @todaysDate\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@todaysDate\", DateTime.Now);\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                if (reader.Read())\n                {\n                    dailySalesSum = (decimal)reader[\"total\"];\n                }\n            }\n        }\n\n        return dailySalesSum / totalDays;\n    }\n}",
        "output": "The function `GetAverageDailySales` calculates the average sales per day for a given time period (January 1st, 2022 to the current date) by fetching the total sales from the 'sales' table in the specified database and dividing it by the number of days within that time period.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this Actian 4GL IF statement for checking if an employee's age exceeds 60 years to C#.",
        "input": "IF age > 60 THEN set status = 'Retired';",
        "output": "public void SetEmployeeStatus(string connectionString, int employeeAge)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        if (employeeAge > 60)\n        {\n            string updatedEmployeeStatus = \"Retired\";\n\n            using (SqlCommand command = new SqlCommand(\"UPDATE employees SET status = @status WHERE id = @id\", connection))\n            {\n                command.Parameters.AddWithValue(\"@status\", updatedEmployeeStatus);\n                command.Parameters.AddWithValue(\"@id\", employeeId); // Assuming an `employeeId` variable has already been set\n                command.ExecuteNonQuery();\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Create a method for converting a date in the \"YYYYMMDD\" format to a DateTime object in C#.",
        "input": "string purchaseDate = \"20221219\";",
        "output": "DateTime dt = DateTime.ParseExact(purchaseDate, \"yyyyMMdd\", CultureInfo.InvariantCulture);",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this Actian SQL statement for selecting customer details to C# LINQ query: SELECT * FROM customers WHERE city = 'New York' AND country = 'USA';",
        "input": "",
        "output": "using System.Linq;\nvar customerQuery = from c in context.Customers\n                    where c.City == \"New York\" && c.Country == \"USA\"\n                    select c;",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "In this scenario, convert a 4GL Update statement to C#. Respond only in code: UPDATE products SET stock_quantity = stock_quantity + 10 WHERE product_name = 'LED Desk Lamp';",
        "input": "Assume that the `products` table has already been created and populated with some data, and `connectionString` variable contains a string for connecting to the database.\n```csharp\nstring connectionString = \"Data Source=(localdb)\\\\MSSQLLocalDB;Initial Catalog=ActianData; Integrated Security=True\";\n```",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string query = \"UPDATE products SET stock_quantity = stock_quantity + 10 WHERE product_name = 'LED Desk Lamp'\";\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        int rowsAffected = command.ExecuteNonQuery();\n        Console.WriteLine($\"{rowsAffected} row(s) updated.\");\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "In this context, convert a 4GL loop for processing customer orders to C#. Respond only in code: LOOP WHILE EXISTS (SELECT * FROM customer_orders WHERE order_id = @orderId) DO\n  GET NEXT ORDER_DETAIL ROW BY ORDER_ID\n  IF @currentProductName <> OLD.product_name THEN\n      COMMIT WORK;\n      PUT INTO customer_orders (order_date, order_id, total_amount) VALUES (CURRENT, @orderId, TOTAL);\n      OPEN CURSOR customer_order_details FOR @orderId;\n  END IF;\n  UPDATE products SET stock_quantity = stock_quantity - @quantity WHERE product_name = @currentProductName;\n  INSERT INTO order_details (order_id, product_id, product_name, unit_price, quantity) VALUES (@orderId, @productId, @currentProductName, @unitPrice, @quantity);\nEND LOOP.",
        "input": "Assume that `@orderId`, `@productId`, `@currentProductName`, `@unitPrice`, and `@quantity` variables have been set properly outside the loop. Also, assume that the tables for `customer_orders`, `products`, and `order_details` are created and populated with data in the database.\n```csharp\nstring connectionString = \"Data Source=(localdb)\\\\MSSQLLocalDB;Initial Catalog=ActianData; Integrated Security=True\";\nint orderId = 12345;\nint productId = 67890;\nstring currentProductName = \"LED Desk Lamp\";\ndecimal unitPrice = 49.99m;\nint quantity = 2;\n```",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string query = $\"OPEN CURSOR customer_order_details FOR {orderId}\";\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        command.ExecuteNonQuery();\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                // Process order details here...\n            }\n        }\n    }\n\n    string total = GetTotalAmount(orderId);\n    string commitQuery = $\"COMMIT WORK\";\n    string putIntoCustomerOrdersQuery = $\"PUT INTO customer_orders (order_date, order_id, total_amount) VALUES ({DateTime.Now:yyyy-MM-dd HH:mm:ss}, {orderId}, {total})\";\n    string updateProductsQuery = \"UPDATE products SET stock_quantity = stock_quantity - @quantity WHERE product_name = @currentProductName\";\n    string insertIntoOrderDetailsQuery = \"INSERT INTO order_details (order_id, product_id, product_name, unit_price, quantity) VALUES (@orderId, @productId, @currentProductName, @unitPrice, @quantity)\";\n\n    using (SqlTransaction transaction = connection.BeginTransaction())\n    {\n        connection.Open();\n\n        // Execute queries in the same transaction to keep data consistency\n        command = new SqlCommand(commitQuery, connection);\n        command.ExecuteNonQuery();\n        command = new SqlCommand(putIntoCustomerOrdersQuery, connection);\n        command.ExecuteNonQuery();\n        command = new SqlCommand(updateProductsQuery, connection);\n        command.Parameters.AddWithValue(\"@quantity\", quantity);\n        command.Parameters.AddWithValue(\"@currentProductName\", currentProductName);\n        command.ExecuteNonQuery();\n        command = new SqlCommand(insertIntoOrderDetailsQuery, connection);\n        command.ExecuteNonQuery();\n\n        transaction.Commit();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Given a complex 4GL stored procedure that calculates the total sales of each product, rewrite it in C# as a Console application for testing purposes. Provide example code for inputting data and printing output. Respond with at least 30 lines of code.",
        "input": "Assume we have two tables: `sales` and `products`. The `sales` table contains columns: `sale_id`, `product_id`, `quantity`, `price`, `discount`, `discount_amount`, and `transaction_date`. The `products` table has columns: `product_id`, `product_name`, `base_price`, `discounted_price` (if applicable).\n```csharp\n// Sample data for the tables.\nList<Sale> salesData = new List<Sale>\n{\n    new Sale { SaleId = 1, ProductId = 1, Quantity = 2, Price = 300, Discount = 5, TransactionDate = DateTime.Parse(\"2022-12-01\") },\n    // Add more data here...\n};\n\nList<Product> productData = new List<Product>\n{\n    new Product { ProductId = 1, ProductName = \"LED Desk Lamp\", BasePrice = 350, DiscountedPrice = null },\n    // Add more products here...\n};\n```",
        "output": "```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\npublic class Sale\n{\n    public int SaleId { get; set; }\n    public int ProductId { get; set; }\n    public int Quantity { get; set; }\n    public decimal Price { get; set; }\n    public double Discount { get; set; }\n    public decimal DiscountAmount => Price * (Discount / 100);\n    public DateTime TransactionDate { get; set; }\n}\n\npublic class Product\n{\n    public int ProductId { get; set; }\n    public string ProductName { get; set; }\n    public decimal BasePrice { get; set; }\n    public decimal? DiscountedPrice { get; set; }\n    public decimal CalculateTotalSales()\n    {\n        if (DiscountedPrice.HasValue)\n        {\n            return salesData\n                .Where(s => s.ProductId == ProductId)\n                .Sum(s => s.Quantity * DiscountedPrice.Value);\n        }\n        else\n        {\n            return salesData\n                .Where(s => s.ProductId == ProductId)\n                .Sum(s => s.Quantity * (s.Price - s.DiscountAmount));\n        }\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        List<Product> products = new List<Product>();\n        foreach (var product in productData)\n            products.Add(new Product() { ProductId = product.ProductId, ProductName = product.ProductName, BasePrice = product.BasePrice });\n\n        decimal totalSales = 0;\n        foreach (var product in products)\n            totalSales += product.CalculateTotalSales();\n\n        Console.WriteLine($\"Total sales: ${totalSales}\");\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert the given 4GL nested IF structure for handling multiple conditions into a more readable C# switch statement. Respond with at least 15 lines of code and assume the input is a string containing a product status.",
        "input": "Assume `productStatus` contains a string value such as 'OnSale', 'OutOfStock', or 'Discontinued'.\n```csharp\nstring productStatus = \"OnSale\";\n// ...\n```",
        "output": "```csharp\nswitch (productStatus)\n{\n    case \"OnSale\":\n        // Display on sale message or other specific actions for on-sale products.\n        Console.WriteLine(\"Product is currently on sale.\");\n        break;\n    case \"OutOfStock\":\n        // Handle out of stock situations, like notifying customers or setting up backorders.\n        Console.WriteLine(\"This product is temporarily unavailable due to low stock.\");\n        break;\n    case \"Discontinued\":\n        // Terminate the product and remove it from the catalog or display a message for customers.\n        Console.WriteLine(\"Sorry, this product has been discontinued.\");\n        break;\n    default:\n        throw new ArgumentException($\"Invalid product status '{productStatus}'.\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Explain how to handle exceptions when processing a customer order in Actian 4GL code and then convert the exception handling mechanism to C#.",
        "input": "Assume that the 'orders' table doesn't have an entry for the customer_id provided during insert operation.",
        "output": "In Actian 4GL:\n```4gl\nBEGIN WORK;\n   INSERT INTO orders (customer_id, order_date, total_amount) VALUES (1001, CURRENT, 1500.00);\n   IF SQLCODE = 23505 THEN DO\n       MESSAGE \"The customer with ID 1001 does not exist.\";\n   END;\n   COMMIT WORK;\n```\nIn C#:\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    try\n    {\n        string query = \"INSERT INTO orders (customer_id, order_date, total_amount) VALUES (@customerId, @orderDate, @totalAmount)\";\n\n        using (SqlCommand insertOrder = new SqlCommand(query, connection))\n        {\n            insertOrder.Parameters.AddWithValue(\"@customerId\", 1001);\n            insertOrder.Parameters.AddWithValue(\"@orderDate\", DateTime.Now);\n            insertOrder.Parameters.AddWithValue(\"@totalAmount\", 1500.00m);\n            connection.Open();\n            int rowsAffected = insertOrder.ExecuteNonQuery();\n        }\n    }\n    catch (SqlException ex) when (ex.Number == 23505)\n    {\n        Console.WriteLine(\"The customer with ID 1001 does not exist.\");\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Create a method that performs a search for orders based on the customer_id and returns them in C#.",
        "input": "Assume there's a table 'orders' with columns 'order_id', 'customer_id', 'order_date', and 'total_amount'. We need to filter orders where the customer_id is provided as a parameter.",
        "output": "public IEnumerable<Order> GetOrdersByCustomerId(string connectionString, int customerId)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        string query = $\"SELECT order_id, customer_id, order_date, total_amount FROM orders WHERE customer_id = @customerId\";\n\n        using (SqlCommand command = new SqlCommand(query, connection))\n        {\n            command.Parameters.AddWithValue(\"@customerId\", customerId);\n            connection.Open();\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                var orders = new List<Order>();\n                while (reader.Read())\n                {\n                    int orderId = reader.GetInt32(0);\n                    int currentCustomerId = reader.GetInt32(1);\n                    DateTime orderDate = reader.GetDateTime(2);\n                    decimal totalAmount = reader.GetDecimal(3);\n                    orders.Add(new Order { Id = orderId, CustomerId = currentCustomerId, Date = orderDate, TotalAmount = totalAmount });\n                }\n\n                return orders;\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Find the equivalent 4GL code for the C# function that takes a string and returns its reversed version in C#. Use Actian's built-in functions as much as possible. Respond with at least 5 lines of code.",
        "input": "string reverseString(string input) {\n    char[] characters = input.ToCharArray();\n    Array.Reverse(characters);\n    return new string(characters);\n}",
        "output": "// This 4GL code utilizes the built-in RTRIM and REVERSE functions to reverse a given string.\nDEFINE FUNCTION reverseString RETURNS STRING NO SQL\nBEGIN\n  DECLARE str_without_whitespace AS STRIP(RTRIM(INPUT));\n  DECLARE reversed_str AS REVERSE(str_without_whitespace);\n  RETURN reversed_str;\nEND DEFINE.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Modify the given C# method to use recursion for finding all permutations of an array containing strings (in this case, product names). Respond with at least 20 lines of code and use a helper method for handling recursive calls.",
        "input": "```csharp\nvoid getPermutations(string[] products) {\n    foreach (var product in products)\n    {\n        Console.WriteLine($\"{product}\");\n    }\n\n    // Assuming that this is the helper method for handling recursive calls.\n    void helperMethod(int start, string[] products)\n    {\n        if (start == products.Length - 1)\n        {\n            // This line would print the last permutation found by the recursion.\n            Console.WriteLine($\"{String.Join(\", \", products)}\");\n        }\n        else\n        {\n            for (int i = start; i < products.Length; i++)\n            {\n                // Swap elements at start and i to form a new permutation.\n                swap(ref products[start], ref products[i]);\n                helperMethod(start + 1, products);\n                swap(ref products[start], ref products[i]); // Restore the original order after processing the recursive call.\n            }\n        }\n    }\n}\n```",
        "output": "```csharp\n// Helper method that finds all permutations of an array by swapping elements using recursion.\nvoid getPermutations(string[] products, int index = 0)\n{\n    if (index == products.Length - 1)\n    {\n        Console.WriteLine($\"{String.Join(\", \", products)}\"); // Print the permutation once it's fully constructed.\n    }\n    else\n    {\n        for (int i = index; i < products.Length; i++)\n        {\n            swap(ref products[index], ref products[i]);\n            getPermutations(products, index + 1);\n            swap(ref products[index], ref products[i]); // Restore the original order after processing the recursive call.\n        }\n    }\n}\n\nvoid swap(ref string first, ref string second)\n{\n    (first, second) = (second, first);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Given a specific 4GL Insert statement that adds a new customer to the database, create its corresponding C# function, including input parameters, variable declarations, and the SQL query. Respond only in code.\n\nHere's an example of a 4GL Insert statement:\nINSERT INTO customers (first_name, last_name, email) VALUES ('John', 'Doe', 'john.doe@example.com');",
        "input": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    // Your code here\n}",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"INSERT INTO customers (first_name, last_name, email) VALUES (@firstName, @lastName, @email)\", connection))\n    {\n        command.Parameters.AddWithValue(\"@firstName\", \"John\");\n        command.Parameters.AddWithValue(\"@lastName\", \"Doe\");\n        command.Parameters.AddWithValue(\"@email\", \"john.doe@example.com\");\n        int rowsAffected = command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Given a list of customer names, email addresses, and their respective departments, implement a C# method to insert these records into the customers table in a database. Respond only in code.\n\nHere is an example of such data:\n- Customer 1: (First Name: John, Last Name: Doe, Email Address: john.doe@example.com, Department: Sales)\n- Customer 2: (First Name: Jane, Last Name: Smith, Email Address: jane.smith@example.com, Department: Marketing)",
        "input": "// Your code here\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    // Your code here\n}",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"INSERT INTO customers (first_name, last_name, email, department) VALUES (@firstName, @lastName, @email, @department)\", connection))\n    {\n        foreach (var customer in customersList)\n        {\n            command.Parameters.AddWithValue(\"@firstName\", customer.FirstName);\n            command.Parameters.AddWithValue(\"@lastName\", customer.LastName);\n            command.Parameters.AddWithValue(\"@email\", customer.Email);\n            command.Parameters.AddWithValue(\"@department\", customer.Department);\n            int rowsAffected = command.ExecuteNonQuery();\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "In the given scenario, design a function for searching customers by their email addresses and returning their details in C#. Respond only in code. Here is an example of such data: - Customer 1: (First Name: John, Last Name: Doe, Email Address: john.doe@example.com, Department: Sales) - Customer 2: (First Name: Jane, Last Name: Smith, Email Address: jane.smith@example.com, Department: Marketing)",
        "input": "Assuming you have a list of customers and the `connectionString` variable contains a string for connecting to the database.\n```csharp\nList<Customer> customers = new List<Customer>();\n// Initialize customers with sample data\nstring connectionString = \"Data Source=(localdb)\\\\MSSQLLocalDB;Initial Catalog=ActianData; Integrated Security=True\";\n```",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    string query = \"SELECT first_name, last_name, department FROM customers WHERE email = @email\";\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        command.Parameters.AddWithValue(\"@email\", email);\n        SqlDataReader reader = command.ExecuteReader();\n        if (reader.Read())\n        {\n            return new Customer\n            {\n                FirstName = reader[\"first_name\"].ToString(),\n                LastName = reader[\"last_name\"].ToString(),\n                Department = reader[\"department\"].ToString()\n            };\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "In this scenario, design a C# method to retrieve the total sales for each product. Respond only in code. Here is an example of such data: - Product 1: (Product Name: LED Desk Lamp, Sales: 30) - Product 2: (Product Name: Bookcase, Sales: 25)",
        "input": "Assuming you have a list of products and the `connectionString` variable contains a string for connecting to the database.\n```csharp\nList<Product> products = new List<Product>();\n// Initialize products with sample data\nstring connectionString = \"Data Source=(localdb)\\\\MSSQLLocalDB;Initial Catalog=ActianData; Integrated Security=True\";\n```",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    string query = \"SELECT product_name, SUM(sales) AS total_sales FROM sales JOIN products ON sales.product_id = products.id GROUP BY product_name\";\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                string productName = reader[\"product_name\"].ToString();\n                int totalSales = reader[\"total_sales\"] is DBNull ? 0 : reader.GetInt32(1);\n                products.Find(p => p.ProductName == productName)?.TotalSales += totalSales; // Add total sales to the existing product object if it already exists in the list\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "In Actian 4GL, how can you call a stored procedure that takes no arguments but returns multiple result sets? Provide a simple example using the PERFORM statement.",
        "input": "",
        "output": "Assuming we have a stored procedure `get_multiple_results` with no arguments and it returns two result sets: the first contains employee names, and the second contains their respective IDs. Here's how you can call this stored procedure using the PERFORM statement in Actian 4GL:\n```\nDECLARE CURSOR employees IS SELECT * FROM TABLE(get_multiple_results());\nOPEN employees;\nFETCH NEXT FROM employees INTO employeeName, employeeId;\nDO WHILE NOT SQLCODE = -102; // -102 is the SQL code for end-of-data (SQLWarning)\n  DISPLAY \"Employee Name: \", employeeName;\n  DISPLAY \"Employee ID: \", employeeId;\n  FETCH NEXT FROM employees INTO employeeName, employeeId;\nENDDO;\nCLOSE employees;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Explain the purpose and usage of a loop in Actian 4GL code, comparing it to its counterpart in C#. Provide examples for each language.",
        "input": "",
        "output": "In Actian 4GL, a loop is used when a task needs to be repeated multiple times for different data or conditions. For example:\n```4gl\nDO EACH employee IN employees_array\n    IF employee.age > 30 THEN output = employee.name END;\nEND DO;\n```\nIn C#, loops can also be used in similar scenarios using `for`, `foreach`, and `while` statements:\n\nHere's an example for a `for` loop:\n```csharp\nList<Employee> employees = new List<Employee>() { new Employee() { Name = \"John\", Age = 25 }, new Employee() { Name = \"Jane\", Age = 31 } };\nfor (int i = 0; i < employees.Count; i++)\n{\n    if (employees[i].Age > 30)\n        Console.WriteLine(employees[i].Name);\n}\n```\nAnd an example for a `foreach` loop:\n```csharp\nforeach (var employee in employees)\n{\n    if (employee.Age > 30)\n        Console.WriteLine(employee.Name);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL cursor block that retrieves all the employee details for those who have a tenure greater than or equal to 5 years, to C# LINQ query:",
        "input": "Assume that the `employees` table has been created and populated with some data. The primary key of employees is `employee_id`.\n```4gl\nDEFINE CURSOR employeeCursor IS SELECT * FROM employees WHERE tenure >= 5;\nOPEN employeeCursor;\nWHILE CURSOR FETCH NEXT employeeCursor INTO :current_employee DO\n    output = \"Employee Name: \" + current_employee.name + \", Department: \" + current_employee.department;\nEND WHILE;\n```",
        "output": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n...\nList<Employee> eligibleEmployees = employees.Where(e => e.tenure >= 5).ToList();\nforeach (var employee in eligibleEmployees)\n{\n    Console.WriteLine(\"Employee Name: \" + employee.name + \", Department: \" + employee.department);\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Implement a function for generating an order number in C#. The generated order number must be unique within the system and should follow a specific format: YYYYMMDD_orderNumber. For example, for March 15th 2023, if there are no existing orders, the first order's number could be 20230315_0001.",
        "input": "",
        "output": "```csharp\nusing System;\nprivate string GenerateOrderNumber(DateTime today)\n{\n    int currentOrder = 0;\n\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        string query = \"SELECT MAX(CAST(RIGHT(order_number, 5) AS INT)) as maxOrder FROM orders WHERE order_number LIKE @today\";\n        using (SqlCommand command = new SqlCommand(query, connection))\n        {\n            command.Parameters.AddWithValue(\"@today\", today.Year + \"\" + today.Month + \"\" + today.Day);\n            int maxOrder = (int)command.ExecuteScalar();\n            if (maxOrder == null || maxOrder == 0)\n                currentOrder = 1;\n            else\n                currentOrder = maxOrder + 1;\n        }\n    }\n\n    return today.Year + today.Month + today.Day + \"_\" + currentOrder.ToString(\"D5\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Design a function for validating if an order total meets the minimum order amount requirement specified in the database for a given customer. Respond only in code. Here's an example of such data: Minimum Order Amount for Customer 1001 is $250, Minimum Order Amount for Customer 1002 is $300.",
        "input": "Assuming you have the `connectionString` variable and `customerId` and `totalAmount` are provided as parameters in the function call.\n```csharp\nstring connectionString = \"Data Source=(localdb)\\\\MSSQLLocalDB;Initial Catalog=ActianData; Integrated Security=True\";\nbool validateOrder(int customerId, decimal totalAmount) { ... }\n```",
        "output": "```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    string query = \"SELECT minimum_order_amount FROM customers WHERE customer_id = @customerId\";\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        command.Parameters.AddWithValue(\"@customerId\", customerId);\n        if ((decimal)command.ExecuteScalar() <= totalAmount)\n            return true;\n        else\n            return false;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Explain the challenges when converting Actian 4GL code to C#, and suggest a strategy for dealing with them.",
        "input": "The company is planning to migrate their existing Actian 4GL applications to OpenROAD. They have a team of developers who are familiar with C# but not 4GL. The following code is a snippet that calculates the total sales revenue for each product and displays it in a table:\n```4gl\nDEFINE VARIABLE total_sales AS 0.00\nFOR EACH product IN product_list DO\n    SELECT SUM(sale_amount) INTO total_sales FROM sale WHERE product = product.name;\n    DISPLAY \"Product: \", product.name, \" | Total Sales: $\", TAB(15), FORMAT(total_sales,2);\nEND FOR;\n```",
        "output": "Converting Actian 4GL code to C# requires careful planning and understanding of both languages' differences in syntax, data structures, and functionalities. Challenges include:\n- Complex SQL statements within loops may not have direct equivalents in C#\n- Variables are managed differently\n- Event handling and user interface design differ\n\nA strategy for dealing with these challenges is to:\n1. Break down the 4GL code into smaller, manageable pieces\n2. Identify equivalent constructs in C# and translate each piece accordingly\n3. Use a combination of SQL queries and LINQ (Language Integrated Query) to handle database operations\n4. Adapt variable management and implement error handling as necessary\n5. Incorporate unit tests and follow best practices for application design and development to ensure the new C# applications are efficient, maintainable, and scalable.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Identify potential issues when converting a 4GL dynamic SQL statement like this one: `SELECT * FROM employees WHERE salary > :salary AND department = :department`. Explain how to rewrite it for C# using parameterized queries or LINQ.",
        "input": "The company's 4GL application performs search functionalities using dynamic SQL statements. One example is searching for employees with a specific salary range and in a particular department:\n```4gl\nSELECT * FROM employees WHERE salary > :salary AND department = :department;\n```",
        "output": "Potential issues when converting this 4GL dynamic SQL statement to C# include:\n- The use of `:salary` and `:department` as variables without proper sanitization, which may lead to SQL injection vulnerabilities.\n\nTo rewrite it for C# using parameterized queries or LINQ, you can use the following example with a parameterized query:\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string sql = \"SELECT * FROM employees WHERE salary > @salary AND department = @department\";\n    using (SqlCommand command = new SqlCommand(sql, connection))\n    {\n        command.Parameters.AddWithValue(\"@salary\", 50000);\n        command.Parameters.AddWithValue(\"@department\", \"IT\");\n        connection.Open();\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            // Process the results as needed\n        }\n    }\n}\n```\nAlternatively, you can use LINQ with Entity Framework:\n```csharp\nusing (var context = new ApplicationDbContext())\n{\n    var employees = context.Employees\n        .Where(e => e.Salary > 50000)\n        .Where(e => e.Department == \"IT\")\n        .ToList();\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Create a C# class for the 'customer' entity, mapping its properties to their corresponding fields in Actian 4GL.",
        "input": "Assume there is a customer table with columns: id (int), name (string), city (string), and country (string).",
        "output": "using System;\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string City { get; set; }\n    public string Country { get; set; }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Write a C# method to insert a new customer record in the 'customers' table using OpenROAD.NET.",
        "input": "Assume you already have a connection string for the database and the necessary OpenROAD objects are initialized. The new customer's details are as follows: Id = 101, Name = \"John Doe\", City = \"Chicago\", Country = \"USA\".",
        "output": "public void InsertCustomer(string connectionString)\n{\n    // Create an insert statement using OpenROAD SQL generation methods.\n    var sql = SqlGenerator.InsertInto(\"customers\")\n                           .SetColumnValue(\"id\", 101)\n                           .SetColumnValue(\"name\", \"John Doe\")\n                           .SetColumnValue(\"city\", \"Chicago\")\n                           .SetColumnValue(\"country\", \"USA\")\n                           .Build();\n\n    // Execute the SQL statement using OpenROAD.\n    var command = new SqlCommand(sql, connection);\n    command.ExecuteNonQuery();\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "What are the differences in handling errors and exceptions between Actian 4GL and C#? Respond in a clear, concise way with examples of error handling techniques in both languages.",
        "input": "",
        "output": "In Actian 4GL, errors are typically handled using OnError blocks or OnException triggers that catch specific errors. For example:\n```4gl\nOnError ReturnCode Not Zero\n    If ErrorCode = 100 Then\n        // Handle error 100 specifically\n    End If\nEnd OnError\n```\nIn C#, exceptions are used for error handling and can be caught using try-catch blocks. For example:\n```csharp\ntry\n{\n    // Code that might throw an exception\n}\ncatch (Exception e)\n{\n    // Handle the exception\n    Console.WriteLine(e.Message);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Explain how to declare and initialize a multidimensional array in Actian 4GL and C#, using similar examples for both languages.",
        "input": "",
        "output": "In Actian 4GL, you can declare and initialize a multidimensional array like this:\n```4gl\nDECLARE dimensions(2) OF decimal;\ndimensions[1][2] = 15.99;\n```\nIn C#, you can do it as follows:\n```csharp\ndecimal[,] dimensions = new decimal[2, 3];\ndimensions[1, 2] = 15.99m;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Write a C# method that converts a string containing an Actian 4GL code to a boolean value based on whether the code represents an IF conditional statement. If the input string doesn't represent a valid IF condition, return false.",
        "input": "string ifCondition = \"IF emp_id > 10 THEN total_sales += sales\";",
        "output": "bool isIfStatement = true;",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this Actian 4GL cursor declaration to a C# method that fetches employee data from an SQL Server database using a stored procedure: DECLARE emp_cursor CURSOR FOR SELECT * FROM employees WHERE dept_id = :deptId; OPEN emp_cursor; FETCH NEXT FROM emp_cursor INTO @emp_id, @firstName, @lastName, @salary;",
        "input": "string connectionString = \"Server=server_name;Database=database_name;User Id=user_id;Password=password\";\nint deptId = 30; // Example department ID",
        "output": "using (var connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    var command = new SqlCommand(\"GetEmployeesByDeptId\", connection);\n    command.CommandType = CommandType.StoredProcedure;\n    command.Parameters.AddWithValue(\"@deptId\", deptId);\n    using (var reader = command.ExecuteReader())\n    {\n        if (reader.HasRows)\n        {\n            while (reader.Read())\n            {\n                Console.WriteLine($\"ID: {reader[0]}, Name: {reader[\"firstName\"]} {reader[\"lastName\"]}, Salary: {reader[\"salary\"]}\");\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"No employees found for the given department.\");\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Explain the concept of a stored procedure and how it can be created in C# using Entity Framework. Provide an example based on the given customer order transaction.",
        "input": "The company's 4GL application uses a series of transactions for various functions such as customer orders, inventory management, etc. They are now migrating to OpenROAD with C#, and the development team has come across stored procedures for the first time. They would like to know more about stored procedures and how they can create them in their new environment using Entity Framework.",
        "output": "A stored procedure is a prepared SQL statement that can be saved within a database and reused multiple times with different parameters. Stored procedures help improve application performance by reducing network traffic, allowing the database server to cache the query plan, and providing transaction support.\n\nTo create a stored procedure in C# using Entity Framework:\n1. Define the stored procedure's parameters.\n2. Create the stored procedure within the database using SQL Server Management Studio or any other SQL tools.\n3. Use DbContext to call the stored procedure with specified input parameters and handle the output results.\n\nAs an example, let's create a stored procedure for processing a customer order as seen in the previous task:\n```sql\nCREATE PROCEDURE sp_ProcessOrder\n    @customerId INT,\n    @orderDate DATETIME2(0),\n    @totalAmount MONEY\nAS\nBEGIN\n    INSERT INTO orders (customer_id, order_date, total_amount)\n        VALUES (@customerId, @orderDate, @totalAmount);\n\n    UPDATE customers SET total_purchases = total_purchases + @totalAmount\n        WHERE customer_id = @customerId;\n\n    UPDATE inventory SET quantity = quantity - 1\n        WHERE product_id = (SELECT TOP 1 p.product_id FROM products p\n            INNER JOIN order_items oi ON p.product_id = oi.product_id\n            WHERE oi.order_id NOT EXISTS (\n                SELECT order_id\n                FROM orders o\n                WHERE o.customer_id = @customerId) AND p.quantity > 0);\n\n    COMMIT WORK;\nEND;\n```\nAfter creating the stored procedure, you can call it using Entity Framework as follows:\n```csharp\nusing (var context = new ApplicationDbContext())\n{\n    var result = context.Database.ExecuteSqlCommand(\n        \"EXEC sp_ProcessOrder @customerId = 1001, @orderDate = GETDATE(), @totalAmount = 1500\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Find potential issues with the given C# code that may cause exceptions or security vulnerabilities and suggest solutions:\n```csharp\npublic void CreateOrder(string customer, decimal total)\n{\n    using (var connection = new SqlConnection(\"Data Source=myServerAddress;Initial Catalog=myDB;User ID=sa;Password=mypassword\"))\n    {\n        string sql = $\"INSERT INTO orders (customer_id, order_date, total_amount) VALUES ('{customer}', GETDATE(), {total});\";\n        using (var command = new SqlCommand(sql, connection))\n        {\n            command.ExecuteNonQuery();\n        }\n    }\n}\n```",
        "input": "The development team is migrating the company's 4GL application to OpenROAD with C# and has come across the following code for creating orders. They would like to know if there are any potential issues that could cause exceptions or security vulnerabilities and suggestions for resolving these issues.",
        "output": "Potential issues with this C# code include:\n1. Hard-coded connection string containing sensitive information such as a server address, database name, user ID, and password. It is recommended to store the configuration in a secure manner using appsettings.json or another similar approach.\n2. Using string interpolation for the SQL query's input parameters without proper sanitization, which may lead to SQL injection vulnerabilities. Use parameterized queries instead.\n3. The customer_id column is being populated with a string value, but it should be an integer or decimal based on the table's design.\n\nSuggested solutions:\n1. Store the configuration in a secure manner using appsettings.json or another similar approach.\n2. Use parameterized queries to ensure proper sanitization of input parameters.\n3. Modify the code to ensure the customer_id column is properly populated with an integer or decimal value based on the table's design.\n```csharp\npublic void CreateOrder(int customerId, decimal total)\n{\n    string connectionString = Configuration.GetConnectionString(\"DefaultConnection\");\n    using (var connection = new SqlConnection(connectionString))\n    {\n        var command = new SqlCommand(\n            \"INSERT INTO orders (customer_id, order_date, total_amount) VALUES (@customerId, GETDATE(), @total);\",\n            connection);\n        command.Parameters.AddWithValue(\"@customerId\", customerId);\n        command.Parameters.AddWithValue(\"@total\", total);\n        command.ExecuteNonQuery();\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Identify potential issues or errors in the provided code and suggest solutions if possible.",
        "input": "public List<Customer> GetAllCustomersWithOrders(string connectionString)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n\n        using (SqlCommand command = new SqlCommand(\"SELECT c.customer_id, c.name, o.order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id\", connection))\n        {\n            List<Customer> customers = new List<Customer>();\n\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    Customer customer = new Customer()\n                    {\n                        ID = reader[\"customer_id\"].ToString(),\n                        Name = reader[\"name\"].ToString(),\n                        Orders = reader[\"order_date\"].ToString()\n                    };\n                    customers.Add(customer);\n                }\n            }\n        }\n        return customers;\n    }\n}",
        "output": "There seems to be a mistake in the mapping of `orders` column with the `Customer` object's property. In your code, you have assigned the order_date directly into the Orders property which is not appropriate. Instead, create an Order class and store multiple orders for each customer inside that. Here is the corrected code snippet:\n\n```csharp\npublic class Order\n{\n    public DateTime OrderDate { get; set; }\n}\n\npublic List<Customer> GetAllCustomersWithOrders(string connectionString)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n\n        using (SqlCommand command = new SqlCommand(\"SELECT c.customer_id, c.name, o.order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id\", connection))\n        {\n            List<Customer> customers = new List<Customer>();\n            List<Order> orders = new List<Order>();\n\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    Customer customer = new Customer()\n                    {\n                        ID = reader[\"customer_id\"].ToString(),\n                        Name = reader[\"name\"].ToString()\n                    };\n\n                    Order order = new Order()\n                    {\n                        OrderDate = (DateTime)reader[\"order_date\"]\n                    };\n\n                    customer.Orders.Add(order);\n                    customers.Add(customer);\n                }\n            }\n        }\n        return customers;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Given a complex business rule that decides whether an employee should get a salary increase, provide the logic to implement it in C# using conditional statements. Describe at least 5 conditions and their respective outcomes.",
        "input": "Assume we have the following rules:\n1. If an employee has been working for more than 5 years, they receive a 2% salary increase.\n2. Employees with a master's degree or higher get a 3% salary increase.\n3. Employees who have completed at least one online training course in the past year receive a 1% salary increase.\n4. If an employee has no disciplinary issues, they receive a 0.5% salary increase.\n5. Employees that are not in a leadership position get a 2% salary decrease instead.",
        "output": "```csharp\npublic decimal GetSalaryAdjustment(Employee employee)\n{\n    bool hasMasters = employee.EducationLevel == EducationLevel.Master || employee.EducationLevel == EducationLevel.Doctorate;\n    bool completedTraining = employee.OnlineTrainings.Any(t => t.Date >= DateTime.Now.AddYears(-1));\n    bool hasDisciplinaryIssues = employee.DisciplinaryRecord.HasDisciplinaryIssue();\n    bool isLeader = employee.Position == Position.Manager || employee.Position == Position.Director;\n\n    decimal adjustment = 0m;\n\n    if (employee.YearsOfExperience >= 5) adjustment += .02m;\n    if (hasMasters) adjustment += .03m;\n    if (completedTraining) adjustment += .01m;\n    if (!hasDisciplinaryIssues) adjustment += .005m;\n    if (!isLeader) adjustment -= .02m;\n\n    return adjustment;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Create a C# method that reads from the 'employees' table and returns all the employees whose salary exceeds a specified amount. The table has columns 'id', 'name', 'salary', and 'position'. Assume the employees table already contains data.",
        "input": "Assume the salary threshold is $50,000.",
        "output": "```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\npublic List<Employee> GetHighSalaryEmployees(string connectionString)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        const decimal salaryThreshold = 50000m;\n\n        List<Employee> highSalaryEmployees = new List<Employee>();\n\n        string query = \"SELECT * FROM employees WHERE salary > @salaryThreshold\";\n\n        using (SqlCommand command = new SqlCommand(query, connection))\n        {\n            command.Parameters.AddWithValue(\"@salaryThreshold\", salaryThreshold);\n            connection.Open();\n\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    highSalaryEmployees.Add(new Employee\n                    {\n                        Id = Convert.ToInt32(reader[\"id\"]),\n                        Name = reader[\"name\"].ToString(),\n                        Salary = Convert.ToDecimal(reader[\"salary\"]),\n                        Position = reader[\"position\"].ToString()\n                    });\n                }\n            }\n        }\n        return highSalaryEmployees;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert the given OpenROAD 4GL function to C# for creating a new order with a specific product.",
        "input": "Assume we have an existing table 'orders' with columns 'order_id', 'customer_id', 'product_id', and 'quantity'. Also, we have a function in OpenROAD 4GL as below:\n\nDEFINE FUNCTION ADD_ORDER(cust-id INT, prod-id CHAR(50), qty INT) AS LANGUAGE SQL\nBEGIN ATOMIC\nINSERT INTO orders VALUES (NULL, cust-id, prod-id, qty);\nEND ATOMIC;",
        "output": "public void AddOrder(int customerId, string productId, int quantity)\n{\n    using (SqlConnection connection = new SqlConnection(\"your_connection_string\"))\n    {\n        string query = \"INSERT INTO orders VALUES (NULL, @customerId, @productId, @quantity)\";\n        SqlCommand command = new SqlCommand(query, connection);\n        command.Parameters.AddWithValue(\"@customerId\", customerId);\n        command.Parameters.AddWithValue(\"@productId\", productId);\n        command.Parameters.AddWithValue(\"@quantity\", quantity);\n\n        connection.Open();\n        int rowsAffected = command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert a sample function in Actian 4GL to C# that generates an invoice for a sale, given the customer's details, product details, and other necessary parameters. The output should be a formatted string representing the invoice. Provide at least 20 lines of code.",
        "input": "Assuming we have variables: `customerName`, `customerAddress`, `productName`, `quantity`, `price`, `discount`, `salesTaxRate`, `subTotal` (calculated as quantity \\* price - discount), and `total` (calculated as subTotal + subTotal \\* salesTaxRate).\n```csharp\nstring customerName = \"John Doe\";\nstring customerAddress = \"123 Main St, Anytown, USA\";\nstring productName = \"Product A\";\nint quantity = 5;\ndecimal price = 100;\ndouble discount = 0.10;\ndecimal salesTaxRate = 0.07;\ndecimal subTotal = (quantity * price) - (quantity * price * discount);\ndecimal total = subTotal + (subTotal * salesTaxRate);\n```",
        "output": "```csharp\nstring invoice = $\"INVOICE:\\n\\n{customerName}\\n{customerAddress}\\n\\nInvoice Number: INV-{Guid.NewGuid().ToString().Substring(0, 8)}\\nProduct Name: {productName}\\nQuantity: {quantity}\\nUnit Price: ${price}\\nDiscount ({discount * 100}%): -${quantity * price * discount}\\n\\nSubtotal: ${subTotal}\\nSales Tax ({salesTaxRate * 100}%): ${(subTotal * salesTaxRate)}\\nTotal: ${total}\";\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert a sample Actian 4GL loop that inserts records into multiple tables for each order item, and associates the items with an order. In C#, create a method to perform this operation using Entity Framework Core, given a list of OrderItem objects (including `orderId`, `productId`, `quantity`, `price`) and assuming we have two models: `Order` and `OrderItem`. Respond with at least 20 lines of code.",
        "input": "```csharp\nList<OrderItem> orderItems = new List<OrderItem>\n{\n    new OrderItem { OrderId = 1, ProductId = 1, Quantity = 2, Price = 300 },\n    // Add more order items here...\n};\n\npublic class Order\n{\n    public int Id { get; set; }\n    public DateTime OrderDate { get; set; }\n}\n\npublic class OrderItem\n{\n    public int Id { get; set; }\n    public int OrderId { get; set; }\n    public int ProductId { get; set; }\n    public int Quantity { get; set; }\n    public decimal Price { get; set; }\n}\n```",
        "output": "using System.Linq;\nusing Microsoft.EntityFrameworkCore;\n// DbContext configuration is assumed to be set up in your project\nclass YourDbContext : DbContext\n{\n    // Define the DbSets for Order and OrderItem\n    public DbSet<Order> Orders { get; set; }\n    public DbSet<OrderItem> OrderItems { get; set; }\n}\n\npublic void InsertOrdersAndItems(List<OrderItem> orderItems)\n{\n    using var context = new YourDbContext();\n    var orders = new List<Order>();\n\n    foreach (var item in orderItems.GroupBy(o => o.OrderId))\n    {\n        if (!orders.Any(order => order.Id == item.Key))\n        {\n            orders.Add(new Order() { OrderDate = DateTime.Now });\n            context.Orders.Add(orders.Last());\n        }\n        foreach (var orderItem in item)\n        {\n            orderItem.OrderId = orders.Last().Id;\n            context.Entry(orders.Last()).State = EntityState.Modified;\n            context.OrderItems.Add(orderItem);\n        }\n    }\n\n    context.SaveChanges();\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Analyze the given 4GL code snippet and explain how you would convert it to C#, including any potential challenges and suggested solutions.",
        "input": "```4gl\nDO WHILE emp_id < max_employee_id DO;\n    SELECT employee_info INTO e FROM Employees WHERE emp_id = e.emp_id;\n    IF e.dept_id == 2 THEN\n        DISPLAY \"Employee \", e.name, \" is in Department \", deptNames(e.dept_id);\n    ELSE\n        DISPLAY \"Employee \", e.name, \" is not in Department 2\";\n    END IF;\nEND WHILE;\n```",
        "output": "To convert the given Actian 4GL code to C#, follow these steps:\n1. Replace DO WHILE with a while loop, since C# uses this construct for loops that run as long as a certain condition is true.\n2. Use the Employees table in your database, assuming it is already set up and accessible from the application.\n3. Implement an SQL query or use Entity Framework to fetch employee information based on emp_id.\n4. Check if the fetched employee's department id matches the desired value (2). If it does, display the employee name and department name using string interpolation.\n5. If the employee is not in Department 2, display a custom message using string interpolation instead of calling deptNames(e.dept_id), as that function would likely need to be rewritten or replaced with an alternative solution.\n6. Potential challenges may include:\n   - Adapting the WHILE loop structure and managing the database connection between Actian 4GL and C#.\n   - The absence of a direct equivalent for the DECODE function (in Actian 4GL) used in deptNames(e.dept_id). Alternatives include lookup tables or mapping functions.\n   - Handling any errors or edge cases that may arise during code conversion.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL code snippet into a C# function. The original code retrieves all the distinct department names from the employees table and assigns them to a local variable, dept_names.",
        "input": "DEFINE VARIABLE dept_names AS EMPTY LIST OF CHARACTER;\nFOR EACH dep IN DECODE(dept_id,1,\"Accounting\", 2,\"Sales\",3,\"Marketing\") DO\n    INSERT dept_names AT END OF dept_names WITH dept;\nEND FOR;",
        "output": "```csharp\npublic List<string> GetDepartmentNames()\n{\n    var departments = new List<string>();\n    using (var connection = new SqlConnection(\"your_connection_string\"))\n    {\n        connection.Open();\n        string query = \"SELECT DISTINCT dept_name FROM Employees\";\n        SqlCommand command = new SqlCommand(query, connection);\n        var reader = command.ExecuteReader();\n        while (reader.Read())\n        {\n            departments.Add(reader[\"dept_name\"].ToString());\n        }\n    }\n    return departments;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Identify the design pattern used in the provided code and explain its purpose. If no design pattern is found, suggest an alternative design pattern that would be suitable for the given scenario.",
        "input": "The company's development team has written the following Actian 4GL code to handle their sales orders processing system. Here is a snippet:\n```\nDEFINE TEMP TABLE sales_order AS SELECT * FROM order_header, order_line WHERE order_header.order_num = order_line.order_num;\nDEFINE FUNCTION getSalesOrderTotal(order_number)\n    LET total :- 0;\n    FOR EACH rec IN TABLE sales_order\n        LET total :- total + (rec.quantity * rec.price);\n    END FOR;\n    RETURN total;\nEND DEFINE;\n```",
        "output": "The provided Actian 4GL code uses a simple linear search with a temporary table to aggregate the sales order total for a given order number. However, it can be refactored using the Reduce design pattern (also known as Fold), which provides an optimized way of aggregating large data sets by iteratively combining values using a binary function, reducing multiple intermediate steps required in linear search.\n\nRefactored Actian 4GL code with the Reduce design pattern:\n```\nDEFINE TEMP TABLE sales_order AS SELECT * FROM order_header, order_line WHERE order_header.order_num = order_line.order_num;\nDEFINE FUNCTION getSalesOrderTotal(order_number)\n    LET total :- 0;\n    FOR EACH rec IN TABLE sales_order FOLLOWING ORDER BY rec.quantity ASC\n        LET total :- total + (rec.quantity * rec.price);\n    END FOR;\n    RETURN total;\nEND DEFINE;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Describe the process of converting a trigger in Actian to a stored procedure in C# using Entity Framework. Provide an example based on the given order status update trigger.",
        "input": "The company has multiple triggers in their Actian database that handle various business scenarios like order status updates, payment processing, and inventory management. They would like to convert one of these triggers (order status update) into a stored procedure when migrating their application to OpenROAD with C#, but they are unsure about the conversion process and its implications in terms of database performance.",
        "output": "To convert an Actian trigger into a stored procedure in C# using Entity Framework:\n\n1. Identify the trigger's purpose, such as updating order statuses in the given scenario.\n2. Create a function or method that performs the same actions as the trigger and maintain proper transactional behavior by wrapping it with a `TransactionScope` to handle database transactions effectively.\n3. To minimize the impact on performance, avoid performing long-running operations (such as complex calculations) directly within the stored procedure. Instead, consider creating separate methods or functions for such tasks, and then call them from within the stored procedure.\n4. Consider handling error conditions using `try/catch` blocks and logging any errors appropriately.\n\nAs an example, let's convert an Actian trigger that updates order status when a payment is received:\n```sql\nCREATE TRIGGER update_order_status\nAFTER INSERT ON payments\nFOR EACH ROW\nBEGIN\n    UPDATE orders SET status = 'Paid' WHERE order_id = NEW.order_id;\nEND;\n```\nThe equivalent C# stored procedure using Entity Framework:\n```csharp\npublic void UpdateOrderStatus(int orderId, decimal amount)\n{\n    using (var transactionScope = new TransactionScope())\n    {\n        using (var context = new ApplicationDbContext())\n        {\n            var payment = new Payment\n                {\n                    Amount = amount,\n                    OrderId = orderId\n                };\n\n            context.Payments.Add(payment);\n            context.SaveChanges();\n\n            var order = context.Orders.Find(orderId);\n            order.Status = \"Paid\";\n            context.SaveChanges();\n        }\n\n        transactionScope.Complete();\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Explain how to convert a loop that iterates through a collection in Actian 4GL to a foreach loop in C#.",
        "input": "Assume you have a 4GL code that loops through an array of strings named 'myStrings' and performs some operations on each string.\n```4gl\ndefine variable i as integer no-undo default 1.\ndefine array myStrings of character value space initial-size 5.\nassign \"Hello\" to myStrings[1].\nassign \"World\" to myStrings[2].\nassign \"!\" to myStrings[3].\nloop until i > length(myStrings).\n    assign myStrings[i] to str.\n    // Perform some operations on 'str'.\n    i = i + 1.\nend loop.\n```",
        "output": "To convert the above Actian 4GL code to a foreach loop in C#, you can use the following code:\n```csharp\nstring[] myStrings = { \"Hello\", \"World\", \"!\" };\nforeach (var str in myStrings)\n{\n    // Perform some operations on 'str'.\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Write a C# method to convert a string input representing a date into a DateTime object using OpenROAD.NET.",
        "input": "Assume you already have a connection string for the database and the necessary OpenROAD objects are initialized. The input will be a formatted string (yyyy-MM-dd) in the format \"2022-01-01\".",
        "output": "public DateTime StringToDateTime(string connectionString, string dateString)\n{\n    // Create and execute a SQL statement to convert the input string to a DateTime object.\n    var sql = SqlGenerator.Select(\"CAST(substring(@dateString, 1, 4) as int) * 10000 + CAST(substring(@dateString, 6, 2) as int) * 100 + CAST(substring(@dateString, 9, 2) as int) * 1 + CAST(substring(@dateString, 12, 2) as int) - (CAST(@dateString as date) % 100)\"\n                             .SetParameter(\"@dateString\", dateString)\n                             .Build();\n    var command = new SqlCommand(sql, connection);\n    DateTime dt;\n    using (SqlDataReader reader = command.ExecuteReader())\n    {\n        if (reader.Read())\n        {\n            int value = (int)reader[\"CAST(@dateString as date) - (CAST(@dateString as date) % 100]\"];\n            dt = new DateTime(value);\n        }\n        else\n        {\n            throw new Exception(\"Invalid date string.\");\n        }\n    }\n    return dt;\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this loop that fetches all employees from Actian 4GL to C#, assuming a cursor called `cursorEmpData` has been created.",
        "input": "DO WHILE NOT EOF(cursorEmpData);\n   GET NEXT FROM cursorEmpData;\nENDDO;",
        "output": "using (var reader = new SqlDataReader(cursorEmpData))\n{\n    while (reader.Read())\n    {\n        int employeeId = reader.GetInt32(0);\n        string firstName = reader.GetString(1);\n        string lastName = reader.GetString(2);\n        //... other data fields\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Create a function in Actian 4GL that calculates the total sales for all products of a specific category for a given month, using a stored procedure called `getAllProductsForCategory`.",
        "input": "Assume the `category` parameter is \"Electronics\" and the `year_month` parameter is \"2023-05\".",
        "output": "```4gl\nDEFINE FUNCTION totalSalesByCategory(INPUT category AS CHAR, INPUT year_month AS DATE) RETURNS DECIMAL NO-CACHE.\n    SQL CA - BEGIN;\n        CALL getAllProductsForCategory(@category, @year_month);\n        DECLARE total AS DECIMAL(18, 2);\n        SET total = 0;\n        WHILE EOF NOT REACHED DO;\n            READ;\n            SET total += sales; // Assuming a `sales` field exists in the cursor data\n        ENDDO;\n    SQL CA - RETURN total;\nEND DEFINE;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this Actian loop that calculates the sum of a column into C# LINQ statement:\n\nLOOP AT orders WHERE country = 'USA' ASCENDING ORDER BY total_price;\n  VAR total := 0;\n  FOR EACH order IN orders;\n    total += order.total_price;\n  END FOR;",
        "input": "",
        "output": "using System.Linq;\nvar totalSum = context.Orders\n            .Where(o => o.Country == \"USA\")\n            .OrderBy(o => o.TotalPrice)\n            .Select(o => o.TotalPrice)\n            .Sum();",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this Actian cursor that fetches customer details into C# code using Entity Framework:\n\nDECLARE customer_cursor CURSOR FOR SELECT * FROM customers WHERE total_spent > 1000 ORDER BY total_spent DESC;\nOPEN customer_cursor;\nFETCH NEXT FROM customer_cursor INTO cust;\nWHILE (SQLCODE = 0)\n    LOOP\n        // Process the fetched customer details.\n        PRINT cust.FirstName, \", \", cust.LastName;\n        FETCH NEXT FROM customer_cursor INTO cust;\n    END LOOP;\nCLOSE customer_cursor;",
        "input": "",
        "output": "using System.Data.Entity;\npublic void FetchHighSpendingCustomers()\n{\n    using (var context = new ApplicationDbContext())\n    {\n        var customerCursor = context.Database.ExecuteSqlCommand(\"DECLARE customer_cursor CURSOR FOR SELECT * FROM customers WHERE total_spent > 1000 ORDER BY total_spent DESC;\");\n        context.Database.ExecuteSqlCommand(\"OPEN customer_cursor;\");\n\n        while (context.Database.ExecuteSqlCommand(\"FETCH NEXT FROM customer_cursor INTO @cust\") != -1)\n        {\n            var customer = context.Customers.FromSqlRaw($\"SELECT * FROM customer_cursor\").FirstOrDefault();\n            // Process the fetched customer details.\n            Console.WriteLine($\"{customer.FirstName}, , {customer.LastName}\");\n        }\n\n        context.Database.ExecuteSqlCommand(\"CLOSE customer_cursor;\");\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Given the following Actian SQL query that fetches all customers who have placed orders but haven't made any payments, convert it into C# LINQ statement: SELECT DISTINCT customer_id FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id LEFT JOIN payments ON customers.customer_id = payments.customer_id WHERE orders.order_date < payments.payment_date;",
        "input": "",
        "output": "```csharp\nusing System;\npublic List<int> FindCustomersWithoutPayments(DateTime currentDate)\n{\n    DateTime today = currentDate;\n    var customersWithoutPayments = context.Customers\n                .Where(c => !context.Orders\n                    .Any(o => o.CustomerId == c.Id && context.Payments.Any(p => p.CustomerId == c.Id && p.PaymentDate >= o.OrderDate)))\n                .Select(c => c.Id)\n                .Distinct()\n                .ToList();\n    return customersWithoutPayments;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert a 4GL loop for displaying all records in the inventory table to C#. Respond only in code: LOOP THROUGH inventory REPEAT display product_name, quantity END REPEAT;",
        "input": "",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT * FROM inventory\", connection))\n    {\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            Console.WriteLine(\"Inventory Table:\");\n            while (reader.Read())\n            {\n                int id = reader.GetInt32(0);\n                string productName = reader.GetString(1);\n                int quantity = reader.GetInt32(2);\n                Console.WriteLine($\"ID: {id}, Product Name: {productName}, Quantity: {quantity}\");\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Modify the given method to add a filter for the `department` column as well. The user should be able to pass both the department and job grade as parameters.",
        "input": "(Assuming `query` is the variable containing the Actian 4GL query)\nstring actianQuery = \"SELECT * FROM EMPLOYEES WHERE JOB_GRADE >= :grade AND DEPARTMENT = :department\";",
        "output": "public DataTable GetEmployeesByDepartmentAndJobGrade(SqlConnection connection, string department, string grade)\n{\n    using (SqlCommand command = new SqlCommand($\"SELECT * FROM employees WHERE job_grade >= {grade} AND department = '{department}'\", connection))\n    {\n        return new DataTable(); // Replace this with the actual result of executing the SQL query.\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Identify the issues in this Actian 4GL code and explain how to fix them for better C# implementation: LET myVar = \"This is some data\"; IF NOT CHARACTER SET OF myVar = 'A' THEN RETURN \"Error: Variable contains non-ASCII characters.\"; END IF;",
        "input": "",
        "output": "The issue in the given code lies in checking the character set of a string variable using `CHARACTER SET`. This function does not exist in C#. Instead, you can use the `System.Text.RegularExpressions.Regex` class to check for non-ASCII characters. Here's an example implementation:\n```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\n// ...\n\nstring myVar = \"This is some data\";\nif (Regex.IsMatch(myVar, @\"[^\\x00-\\x7F]\"))\n{\n    Console.WriteLine(\"Error: Variable contains non-ASCII characters.\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL loop for generating a report with customer details to C# using the appropriate class and methods for processing data from a SQL database. Respond only in code: SET REPORT_HEADING = \"Customer Detail Report\"; OPEN report; FOR EACH customer IN SELECT * FROM customers WHERE country = 'USA' DO; WRITE customer.customer_name; WRITE customer.email; IF customer.is_premium THEN WRITE \"Premium Customer\"; END IF; WRITE \"-----------------------------\"; END FOR; CLOSE report;",
        "input": "",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\n        \"SELECT * FROM customers WHERE country = 'USA'\",\n        connection))\n    {\n        using (var reader = command.ExecuteReader())\n        {\n            Report.SetHeader(\"Customer Detail Report\");\n            while (reader.Read())\n            {\n                string customerName = reader[\"customer_name\"].ToString();\n                string email = reader[\"email\"].ToString();\n                bool isPremium = reader[\"is_premium\"].Equals(true);\n\n                Console.WriteLine(customerName);\n                Console.WriteLine(email);\n                if (isPremium)\n                {\n                    Console.WriteLine(\"Premium Customer\");\n                }\n                Console.WriteLine(\"-----------------------------\");\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Given an existing C# method that retrieves data from an SQL database, refactor the method to accept parameters for table name and column names instead of hardcoding them as string literals. Use appropriate input validation checks in your answer.",
        "input": "```csharp\npublic IEnumerable<string> GetEmployeeData()\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        string query = \"SELECT employee_name, department FROM employees\";\n        SqlCommand command = new SqlCommand(query, connection);\n        SqlDataReader reader = command.ExecuteReader();\n\n        while (reader.Read())\n        {\n            yield return reader.GetString(0) + \", \" + reader.GetString(1);\n        }\n    }\n}\n```",
        "output": "```csharp\npublic IEnumerable<string> GetData(string tableName, params string[] columnNames)\n{\n    if (tableName == null || tableName.Length < 1)\n        throw new ArgumentException(\"Invalid table name.\");\n\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n\n        var queryBuilder = new StringBuilder()\n                              .Append(\"SELECT \")\n                              .AppendJoin(\", \", columnNames)\n                              .AppendLine($\" FROM {tableName}\");\n\n        SqlCommand command = new SqlCommand(queryBuilder.ToString(), connection);\n        SqlDataReader reader = command.ExecuteReader();\n\n        while (reader.Read())\n        {\n            yield return string.Join(\", \", columnNames.Select(column => reader[column].ToString()));\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Identify a potential pitfall while converting Actian 4GL code to C# in a business context, and suggest how to address it.",
        "input": "Here's an example of some converted Actian 4GL code snippet to C#:\n```\nWHENEVER CONDITION (order_status = \"CANCELED\") DO BEGIN\n    // Refund order amount\n    refundAmount(total_price);\nEND;\n\nprivate void refundAmount(decimal amount)\n{\n    // Refund the specified amount from the payment gateway\n}\n```",
        "output": "The potential pitfall in this code is that it doesn't validate whether there are sufficient funds available for the refund. To address this, you can modify the `refundAmount()` method to first check for fund availability before attempting a refund. This could involve querying a database or making an API call to verify funds prior to processing the refund.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Explain the process of converting an Actian 4GL cursor-based loop to a C# LINQ query. Provide examples for each step in the conversion.",
        "input": "Here's an example of some converted Actian 4GL code snippet to C#:\n```\nDECLARE CURSOR sales_cursor FOR SELECT customer_name, total_sales FROM customers;\n\nOPEN sales_cursor;\n\nFETCH NEXT FROM sales_cursor INTO @customerName, @totalSales;\n\nWHILE @@FETCH_STATUS = 0 DO BEGIN\n    // Process the customer data\nEND;\n\nCLOSE sales_cursor;\n```",
        "output": "1. Create a LINQ query to fetch data from the source:\n   ```\n   var customersQuery = from c in db.Customers\n                        select new { c.CustomerName, c.TotalSales };\n   ```\n2. Assign the results of the LINQ query to a local variable:\n   ```\n   var customers = customersQuery.ToList();\n   ```\n3. Iterate through the processed data using a foreach loop instead of a cursor-based loop:\n   ```\n   foreach (var customer in customers)\n   {\n       // Process the customer data\n   }\n   ```\n4. Make sure to dispose of any disposable resources when you're done processing, such as database connections:\n   ```\n   using (var dbContext = new MyDbContext())\n   {\n       var customersQuery = ...;\n       var customers = customersQuery.ToList();\n\n       foreach (var customer in customers)\n       {\n           // Process the customer data\n       }\n   }\n   ```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Refactor this Actian 4GL code to C# for better performance, using a more efficient data structure and algorithm. Analyze the given code snippet and identify potential bottlenecks. Suggest possible solutions for improvements.",
        "input": "```4gl\nDECLARE myArray AS array OF VARCHAR(256);\nSET LENGTH OF myArray TO 100;\nDO FOR i = 1 TO 1000 DO:\n    SELECT employee_names INTO myArray[i] FROM Employees WHERE emp_id <= i;\nEND DO;\n// Do something with the array...\n```",
        "output": "To improve performance in this given Actian 4GL code, convert it to C# by using a more efficient data structure like a List and implementing a better algorithm for fetching employee names. Here are some suggested improvements:\n1. Use List<string> instead of an array of VARCHAR(256) as it offers dynamic resizing, reducing memory usage and providing better performance.\n2. Instead of using a DO loop with FOR, use a parallel for loop to fetch multiple employee names concurrently, which would significantly improve the overall runtime for large arrays. You can utilize C#'s Parallel.ForEach method for this purpose:\n```csharp\nList<string> employees = new List<string>();\nParallelOptions options = new ParallelOptions { MaxDegreeOfParallelism = System.Environment.ProcessorCount };\nParallel.ForEach(Enumerable.Range(1, 1000), options, i =>\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"SELECT TOP 1 employee_names FROM Employees WHERE emp_id <= @empId\", connection))\n        {\n            command.Parameters.AddWithValue(\"@empId\", i);\n            string employeeName = command.ExecuteScalar().ToString(); // Assuming the database returns a single result per query\n            employees.Add(employeeName);\n        }\n    }\n});\n```\n3. Further optimize the code by reducing the number of SQL queries, for example, using a single SQL query to fetch all employee names at once and then sorting the list in C# according to emp_id.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert the given Actian 4GL code block that initializes variables and calculates a sum of numbers in an array into C# code. Respond with at least 25 lines of code, including variable declarations and initialization, and ensure type safety for the given example data.",
        "input": "```4gl\nDECLARE ARRAY myNumbers[10] OF FIXED BINARY(8) INITIALIZE\n               \"100\"\n             , \"25\"\n             , \"700\"\n             , \"-23\"\n             , \"123\"\n             , \"40\"\n             , \"999\"\n             , \"-56\"\n             , \"15\"\n             , \"500\";\n\nDECLARE total SIGNED BINARY(8);\n\nSET total = 0;\n\nFOR i FROM 1 TO SIZE OF myNumbers DO:\n  SET total = total + myNumbers[i];\nEND FOR;\n\nDISPLAY \"Total sum is: \";\nDISPLAY total;\n```",
        "output": "```csharp\n// Define variable types, including initial values and array of numbers.\nstring[] myNumbers = new string[] { \"100\", \"25\", \"700\", \"-23\", \"123\", \"40\", \"999\", \"-56\", \"15\", \"500\" };\nlong total = 0;\n\n// Iterate through the array and calculate the sum.\nforeach (var number in myNumbers)\n{\n    long num;\n    if (long.TryParse(number, out num))\n    {\n        total += num;\n    }\n}\n\n// Print the final result.\nConsole.WriteLine(\"Total sum is: \");\nConsole.WriteLine(total);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Modify the given C# code to handle exception situations when parsing numbers from strings and ensure that the program continues running even if some of the product prices contain non-numeric values. Respond with at least 30 lines of code, and implement error handling using try-catch blocks. Also, assume the input contains a string array of mixed prices and other data (product names, descriptions etc.).",
        "input": "```csharp\nvoid processProduct(string[] productData) {\n    double price = double.Parse(productData[1]);\n\n    // Continue with more code here...\n}\n\n// Product data example.\nstring[] exampleProductData = new string[] { \"Apple\", \"$2.50\" };\n```",
        "output": "```csharp\nvoid processProduct(string[] productData) {\n    try\n    {\n        double price;\n        if (double.TryParse(productData[1], out price))\n        {\n            // Continue with more code here...\n        }\n        else\n        {\n            Console.WriteLine($\"Non-numeric value found: {productData[1]}.\");\n        }\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n    }\n}\n\n// Product data example with a non-numeric value.\nstring[] exampleProductData = new string[] { \"Apple\", \"Invalid price format\" };\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Analyze this Actian code for potential issues during conversion to C# and propose a solution if applicable:\n```4gl\nDEFINE VARIABLE counter AS 0;\nDO WHILE (counter < 10) DO;\n    SELECT INTO temp_table FROM customers WHERE age > counter AND gender = \"Female\";\n    IF (SQLCODE = 0 AND COUNT(*) > 0) THEN;\n        FOR EACH customer IN temp_table DO;\n            DISPLAY \"Name: \", customer.FirstName, \" \", customer.LastName;\n        END FOR;\n    ELSE;\n        DISPLAY \"No matching female customers found for age \", counter;\n    END IF;\n    INCREMENT counter BY 1;\nEND WHILE;\n```",
        "input": "",
        "output": "There are a couple of issues with this Actian code that may cause problems during conversion to C#. The first issue is the use of global variables (counter). In C#, it's more common to pass parameters within methods, so consider using method overloading for different age ranges or implementing a loop counter inside the method instead.\n\nThe second issue is the IF statement that checks both SQLCODE and COUNT(*) for the SELECT statement. This combination may not directly translate to C# code. Instead, you can use try-catch blocks to handle SQL errors and check the number of rows returned separately before displaying results. Here's an example of how you might rewrite this code:\n```csharp\npublic void DisplayFemaleCustomersByAge(int age)\n{\n    List<Customer> femaleCustomers = new List<Customer>();\n\n    string query = $\"SELECT * FROM customers WHERE age > {age} AND gender = 'Female'\";\n    using (var connection = new SqlConnection(\"Your_Database_Connection_String\"))\n    {\n        connection.Open();\n        var command = new SqlCommand(query, connection);\n        try\n        {\n            using (var reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    femaleCustomers.Add(new Customer\n                    {\n                        FirstName = reader[\"FirstName\"].ToString(),\n                        LastName = reader[\"LastName\"].ToString()\n                    });\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error occurred while executing the query: {ex.Message}\");\n            return;\n        }\n\n        if (femaleCustomers.Any())\n        {\n            foreach (var customer in femaleCustomers)\n            {\n                Console.WriteLine($\"Name: {customer.FirstName} {customer.LastName}\");\n            }\n        }\n        else\n        {\n            Console.WriteLine($\"No matching female customers found for age {age}\");\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this Actian code that calculates the average and maximum total_spent by customer into C# code using Entity Framework:\n```4gl\nDEFINE VARIABLE avg_total_spent AS 0.00;\nDEFINE VARIABLE max_total_spent AS 0.00;\nFOR EACH customer IN customers DO\n    SELECT SUM(total_spent) INTO total_spent FROM sales WHERE customer = customer.id;\n    IF (SQLCODE = 0 AND total_spent IS NOT NULL) THEN;\n        avg_total_spent = avg_total_spent + total_spent;\n        max_total_spent = MAX(max_total_spent, total_spent);\n    END IF;\nEND FOR;\navg_total_spent = avg_total_spent / COUNT(customers);\nDISPLAY \"Average Total Spent: $\", TAB(15), FORMAT(avg_total_spent, 2);\nDISPLAY \"Maximum Total Spent: $\", TAB(15), FORMAT(max_total_spent, 2);\n```",
        "input": "",
        "output": "```csharp\npublic void CalculateAverageAndMaxTotalSpent()\n{\n    using (var context = new ApplicationDbContext())\n    {\n        double avgTotalSpent = 0.0;\n        double maxTotalSpent = 0.0;\n\n        var customers = context.Customers.ToList();\n\n        foreach (var customer in customers)\n        {\n            var salesForCustomer = context.Sales.Where(s => s.CustomerId == customer.Id).Sum(s => s.TotalSpent);\n            if (salesForCustomer > 0)\n            {\n                avgTotalSpent += salesForCustomer;\n                maxTotalSpent = Math.Max(maxTotalSpent, salesForCustomer);\n            }\n        }\n\n        avgTotalSpent /= customers.Count();\n        Console.WriteLine(\"Average Total Spent: $\" + avgTotalSpent.ToString(\"N2\"));\n        Console.WriteLine(\"Maximum Total Spent: $\" + maxTotalSpent.ToString(\"N2\"));\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Analyze this Actian 4GL code snippet, and explain its purpose in the given business context:\n```4gl\nDEFINE VAR total_sales AS ZERO OF decimal NO-UNDO.\nLOOP UNTIL sales_data IS NOT EOS.\n    READ SEQUENTIAL sales_data USING sale_number.\n    IF sale_number = 0 THEN EXIT LOOP.\n    ADD total_sales += sale_amount FROM sales WHERE sales_number = sale_number.\nEND LOOP.\n```",
        "input": "This code reads a file named `sales_data`, which contains a series of sales records, each represented by the number of the record. The file is read sequentially until the end (EOS) of the data is reached. For each record, it checks if the sales number is 0 to avoid processing an invalid record. If not zero, it adds the total_sales value (initially set to 0) by finding and summing the sale_amount of records that match the sales number in the `sales` table.",
        "output": "The purpose of this code snippet is to read a file containing a list of sales records with their respective numbers, and then calculate the total sales by adding up individual sales amounts corresponding to each record number found in the `sales` table.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this Actian 4GL code snippet into C#:\n```4gl\nDEFINE VAR product_list AS NEW LIST OF PRODUCT USING CREATE UNIQUE.\nLOOP UNTIL products IS NOT EOS.\n    READ SEQUENTIAL products USING current_product.\n    ADD product_list APPEND current_product.\nEND LOOP.\n```",
        "input": "Assuming you have a `Product` class with properties for the product name and other relevant details, and a list named `products` that contains the sample data provided in Task 2.\n```csharp\nList<Product> products = new List<Product>();\n// Initialize products with sample data from Task 2\n```",
        "output": "Using the given `products` list and the `Product` class, you can convert the Actian 4GL code to C# as follows:\n```csharp\nList<Product> product_list = new List<Product>();\nforeach (var product in products)\n{\n    product_list.Add(product); // Add each product to the product_list\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Translate the following Actian 4GL code snippet into C#. Respond only in code: SELECT LAST 5 SALES ORDER BY sale_date DESCENDING;",
        "input": "",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\n        \"SELECT TOP 5 sales.* FROM sales ORDER BY sale_date DESC\",\n        connection))\n    {\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int saleId = (int)reader[\"sale_id\"];\n                DateTime saleDate = (DateTime)reader[\"sale_date\"];\n                decimal saleAmount = (decimal)reader[\"sale_amount\"];\n                // Process sales data\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Explain how to convert a loop in Actian 4GL code that iterates through each row and performs a specific operation into equivalent C# code. Provide an example.",
        "input": "DO i = 1 TO 5 STEP BY 2;\n   print i * i;\nEND_DO;",
        "output": "The Actian 4GL loop is equivalent to the following C# code:\n```csharp\nfor (int i = 1; i <= 5; i += 2)\n{\n    Console.WriteLine(i * i);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Provide an example of writing a unit test for the `refundAmount()` method that checks whether it correctly subtracts funds from a specified account.",
        "input": "",
        "output": "You can use a testing framework like NUnit, MSTest, or xUnit to write unit tests in C#. Here's an example of using the MSTest framework:\n```\n[TestMethod]\npublic void TestRefundAmount()\n{\n    // Arrange\n    var account = new Account { Balance = 100m };\n    var refundService = new RefundService();\n\n    // Act\n    decimal refundedAmount = refundService.RefundAmount(account, 50m);\n\n    // Assert\n    Assert.AreEqual(account.Balance, 50m, \"The account balance should be updated correctly.\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Describe a common best practice when dealing with sensitive data while converting Actian 4GL code to C# and suggest how it can be implemented in the conversion process.",
        "input": "Here's an example of some converted Actian 4GL code snippet that handles sensitive customer data:\n```\nDATA cust_data;\n    cust_data.customer_name = \"John Doe\";\n    cust_data.credit_card_number = \"1234567890123456\";\nEND-DATA;\n\n// Process customer data\n```",
        "output": "A common best practice when dealing with sensitive data like credit card numbers is to use encryption for storage and transmission. To implement this in the conversion process, you can utilize libraries that provide cryptographic functions such as AES (Advanced Encryption Standard) in the C# codebase. Here's an example of using the AesManaged class to encrypt a credit card number:\n```\nusing System.Security.Cryptography;\n...\n// Generate a random encryption key and IV for one-time use\nusing (var key = new Rfc2898DeriveBytes(password, salt))\nusing (var aes = Aes.Create())\n{\n    aes.Key = key.GetBytes(aes.KeySize / 8);\n    var iv = aes.IV;\n\n    // Encrypt the credit card number\n    using (var encryptor = aes.CreateEncryptor(aes.Key, iv))\n    using (var msEncrypt = new MemoryStream())\n    {\n        using (var cs = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))\n        using (var swEncrypt = new StreamWriter(cs))\n        {\n            swEncrypt.Write(\"1234567890123456\");\n        }\n        var encryptedData = msEncrypt.ToArray();\n    }\n}\n// Store or transmit the encrypted data safely\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Discuss common issues encountered during the conversion from Actian 4GL to C# for OpenROAD and suggest potential solutions.",
        "input": "The team is currently facing various challenges when converting their Actian 4GL application to C# for the company's new OpenROAD project. They would like to know about some common issues they might encounter and possible ways to resolve them.",
        "output": "1. Compatibility Issues: Differences in data types, functions, and syntax between Actian 4GL and C# may cause code errors or unexpected behavior. To address this issue, review the Actian 4GL code and identify any potential compatibility issues before starting the conversion process.\n2. Performance Issues: Migration to a new language can affect performance due to differences in implementation details and execution speeds. To optimize performance, consider profiling the converted code for bottlenecks and apply best practices for C# performance optimization.\n3. Code Readability: The team may face challenges understanding complex Actian 4GL code when migrating it to C#. Adopting C# naming conventions, adding comments, and following proper coding guidelines can improve the readability of the converted code.\n4. Testing Challenges: Verifying the functionality and behavior of the converted code in a new environment can be time-consuming. Develop an effective testing strategy that includes unit tests, integration tests, and automated test suites to ensure code quality.\n5. Database Migration: Converting the underlying database schema from Actian to OpenROAD can introduce compatibility issues with stored procedures, triggers, and other database objects. Work closely with DBA (Database Administrators) to handle any database-related conversions or optimizations effectively.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Find the C# equivalent for the given Actian 4GL loop that retrieves all products with a unit price greater than 250 and stores them in a list.",
        "input": "DEFINE TEMPORARY TABLE temp_products AS SELECT product_id, product_name, category FROM products WHERE unit_price > 250;\nFOR EACH prod IN temp_products DO\n    // Process the product data here\nEND;\n\nAssume 'products' table contains columns like 'product_id', 'product_name', 'category', and 'unit_price'. Also assume you have a method named 'ProcessProductData(int productId, string productName, string category)' where you process the product data.",
        "output": "using (SqlConnection connection = new SqlConnection(\"your_connection_string\"))\n{\n    string query = \"SELECT product_id, product_name, category FROM products WHERE unit_price > 250\";\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        connection.Open();\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            List<Product> products = new List<Product>();\n            while (reader.Read())\n            {\n                int productId = reader.GetInt32(0);\n                string productName = reader.GetString(1);\n                string category = reader.GetString(2);\n                ProcessProductData(productId, productName, category);\n                products.Add(new Product { Id = productId, Name = productName, Category = category });\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Design a function for fetching the maximum sales amount in a specific region from the database and store it in a variable. Respond only in code. Assume that the `connectionString` variable is provided, as well as a string representing the region name: 'Eastern'.",
        "input": "```csharp\nstring connectionString = \"Data Source=(localdb)\\\\MSSQLLocalDB;Initial Catalog=ActianData; Integrated Security=True\";\ndouble maxSalesInRegion(string regionName) { ... }\n```",
        "output": "```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string query = \"SELECT MAX(sales_amount) FROM sales WHERE region = @region\";\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        command.Parameters.AddWithValue(\"@region\", regionName);\n        double maxSalesAmount = (double)command.ExecuteScalar();\n        return maxSalesAmount;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Implement a function that returns all employees working in the same department as the provided employeeID, along with their email addresses and job titles. Store the result in a list of Employee objects. Assuming an `Employee` class has been defined previously: public class Employee { public int Id { get; set; }\n    public string Name { get; set; }\n    public string Email { get; set; }\n    public string Title { get; set; }\n}",
        "input": "Assuming `connectionString` and `employeeID` are provided as parameters.\n```csharp\nstring connectionString = \"Data Source=(localdb)\\\\MSSQLLocalDB;Initial Catalog=ActianData; Integrated Security=True\";\nList<Employee> getSameDepartmentEmployees(int employeeID) { ... }\n```",
        "output": "```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string query = \"SELECT e.Id, e.Name, e.Email, e.Title FROM employees e JOIN department_employee de ON e.id = de.employee_id WHERE de.department_id IN (SELECT d.id FROM department d JOIN department_employee de2 ON d.id = de2.department_id WHERE de2.employee_id = @employeeID)\";\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        List<Employee> employees = new List<Employee>();\n        command.Parameters.AddWithValue(\"@employeeID\", employeeID);\n        connection.Open();\n        SqlDataReader reader = command.ExecuteReader();\n        while (reader.Read())\n        {\n            Employee employee = new Employee\n            {\n                Id = reader.GetInt32(0),\n                Name = reader.GetString(1),\n                Email = reader.GetString(2),\n                Title = reader.GetString(3)\n            };\n            employees.Add(employee);\n        }\n        return employees;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Write a C# method that retrieves all products with a specific category, and returns the result as a list.",
        "input": "Assuming you have an `products` list containing sample data:\n```csharp\nList<Product> products = new List<Product>\n{\n    new Product { Id = 1, Name = \"LED Desk Lamp\", Category = \"Electronics\" },\n    new Product { Id = 2, Name = \"Bookcase\", Category = \"Furniture\" },\n    new Product { Id = 3, Name = \"Headphones\", Category = \"Electronics\" }\n};\n```",
        "output": "```csharp\npublic List<Product> GetCategoryProducts(string category)\n{\n    return products.FindAll(p => p.Category == category);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Given a list of customer orders, write a C# method to find the order with the highest total cost. If there are multiple orders with the same highest total cost, return any one of them.",
        "input": "Assuming you have an `orders` list containing sample data:\n```csharp\nList<Order> orders = new List<Order>();\n// Initialize orders with sample data\n```",
        "output": "```csharp\npublic Order GetHighestCostingOrder(List<Order> orders)\n{\n    if (orders.Count == 0)\n        return null;\n\n    Order maxOrder = orders[0];\n    decimal maxTotalCost = maxOrder.TotalCost;\n\n    foreach (var order in orders)\n    {\n        if (order.TotalCost > maxTotalCost)\n        {\n            maxTotalCost = order.TotalCost;\n            maxOrder = order;\n        }\n    }\n    return maxOrder;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Create a C# method for updating the quantity of a specific order in OpenROAD based on the order ID and new quantity. Use the 'orders' table from the previous example.",
        "input": "Assume we have an existing 'orders' table with columns 'order_id', 'customer_id', 'product_id', 'quantity', and a new customer wants to update their order quantity for a specific product. The input parameter should include both the order ID and the updated quantity.",
        "output": "public void UpdateOrderQuantity(int orderId, int newQuantity)\n{\n    using (SqlConnection connection = new SqlConnection(\"your_connection_string\"))\n    {\n        string query = \"UPDATE orders SET quantity = @newQuantity WHERE order_id = @orderId\";\n        SqlCommand command = new SqlCommand(query, connection);\n        command.Parameters.AddWithValue(\"@orderId\", orderId);\n        command.Parameters.AddWithValue(\"@newQuantity\", newQuantity);\n\n        connection.Open();\n        int rowsAffected = command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Write a C# method for deleting a specific order from the 'orders' table based on the provided order ID.",
        "input": "Assume we have an existing 'orders' table with columns 'order_id', 'customer_id', 'product_id', 'quantity', and a customer wants to delete their specific order. The input parameter should include the order ID.",
        "output": "public void DeleteOrder(int orderId)\n{\n    using (SqlConnection connection = new SqlConnection(\"your_connection_string\"))\n    {\n        string query = \"DELETE FROM orders WHERE order_id = @orderId\";\n        SqlCommand command = new SqlCommand(query, connection);\n        command.Parameters.AddWithValue(\"@orderId\", orderId);\n\n        connection.Open();\n        int rowsAffected = command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Find and list common challenges developers may face when converting Actian 4GL code to C#, and provide potential solutions for each challenge.",
        "input": "Here's a simplified example of some converted Actian 4GL code that calculates the Fibonacci sequence:\n```\nDATA sequence;\n    sequence.size = 10;\n    sequence[1] = 0;\n    sequence[2] = 1;\n    FOR i = 3 TO size\n        sequence[i] = sequence[i - 2] + sequence[i - 1];\n    END-FOR;\nEND-DATA;\n```",
        "output": "Some common challenges developers may face when converting Actian 4GL code to C# include:\n\n1. Handling dynamic data structures, such as arrays of varying sizes:\nIn C#, you should use the `List<T>` class instead of a fixed-size array and provide methods for manipulating the list's size as needed.\n2. Managing concurrency and parallel processing in Actian 4GL may require different solutions in C#:\nTo handle concurrent execution, developers can implement locking mechanisms using the `lock` keyword or use thread-safe collection classes like `ConcurrentQueue<T>`, `ConcurrentStack<T>`, etc. For parallel processing, you can utilize Task Parallel Library (TPL) and PLINQ (Parallel LINQ).\n3. Translating built-in functions and constructs, as there may be no direct equivalent in C#:\nTo solve this problem, developers should research available alternatives or workarounds to achieve similar functionality in C#. For example, to iterate over a collection, you can use a foreach loop instead of the FOR loop used in Actian 4GL.\n4. Managing database connections and handling transactions when interacting with databases:\nIn C#, developers should make use of ADO.NET (Data Access Objects .NET) for managing connections, commands, and transactions to ensure proper error handling and transaction rollback when needed.\n5. Addressing differences in exception handling and error reporting between Actian 4GL and C#:\nDevelopers can create custom exception classes to provide detailed information on errors specific to their applications and include helpful messages for debugging purposes.\n6. Ensuring code maintainability, readability, and adherence to industry best practices when converting the codebase:\nMaintaining proper formatting, documentation, and naming conventions can help make the converted C# code easier for other developers to understand and work with efficiently.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Identify and convert any built-in functions specific to Actian 4GL in this code snippet into their respective C# equivalents.",
        "input": "Here's a simple example of an Actian 4GL code that uses the `mod` function which calculates the modulus:\n```4gl\nDEFINE VAR result AS INTEGER NO-UNDO;\nresult = MOD(20, 5);\nDISPLAY result;\n```",
        "output": "In C#, the equivalent calculation can be done using the Modulo operator (`%`):\n```csharp\nint result;\nresult = 20 % 5;\nConsole.WriteLine(result);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this Actian 4GL block that creates a cursor for joining two tables and displays the resulting records into an equivalent LINQ query in C#",
        "input": "Here's an example of an Actian 4GL code snippet that joins `orders` and `customers` tables to display order details along with customer names:\n```4gl\nDEFINE CURSOR orderDetails IS SELECT customers.customer_name, orders.*\nFROM customers, orders\nWHERE customers.customer_id = orders.customer_id;\nOPEN orderDetails;\nWHILE CURSOR FETCH NEXT orderDetails INTO :order_detail DO\n    output = \"Order ID: \" + order_detail.order_id\n        + \", Customer Name: \" + order_detail.customer_name\n        + \", Order Date: \" + order_detail.order_date;\nEND WHILE;\n```",
        "output": "In C#, you can create a LINQ query that joins the two tables and projects the required properties using anonymous types:\n```csharp\nusing System;\nusing System.Linq;\n...\nvar orderDetails = from o in orders\n                    join c in customers on o.customer_id equals c.customer_id\n                    select new { OrderID = o.order_id, CustomerName = c.customer_name, OrderDate = o.order_date };\nforeach (var detail in orderDetails)\n{\n    Console.WriteLine(\"Order ID: \" + detail.OrderID\n        + \", Customer Name: \" + detail.CustomerName\n        + \", Order Date: \" + detail.OrderDate);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this Actian code that updates the quantity_on_hand for each product when a new sale occurs into C# code using Entity Framework: ```4gl SET FOR sales = ALL; IF (UPDATE product_qty(quantity_on_hand - total_units) RETURNING product_name) THEN DISPLAY \"Updated Product:\", TAB(15), product_name; END IF; ```",
        "input": "",
        "output": "```csharp\npublic void UpdateQuantityOnHandForSale(int totalUnits, int productId)\n{\n    using (var context = new ApplicationDbContext())\n    {\n        var sale = new Sale\n        {\n            TotalUnits = totalUnits,\n            ProductId = productId\n        };\n        context.Sales.Add(sale);\n        context.SaveChanges();\n\n        var updatedProduct = context.Products.FirstOrDefault(p => p.Id == productId);\n        if (updatedProduct != null)\n        {\n            updatedProduct.QuantityOnHand -= totalUnits;\n            context.Entry(updatedProduct).State = EntityState.Modified;\n            context.SaveChanges();\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Write C# code to calculate the revenue for a specific date range for all products using Entity Framework: ```4gl DEFINE VARIABLE revenue AS 0.00; FOR EACH product IN products DO SELECT SUM(sales_amount) INTO total_revenue FROM sales WHERE sale_date BETWEEN product_start_date AND product_end_date AND product = product.id; IF (SQLCODE = 0 AND total_revenue IS NOT NULL) THEN revenue = revenue + total_revenue; END IF; END FOR; DISPLAY \"Revenue:\", TAB(15), FORMAT(revenue, 2); ```",
        "input": "",
        "output": "```csharp\npublic double CalculateRevenueForDateRange(DateTime startDate, DateTime endDate)\n{\n    using (var context = new ApplicationDbContext())\n    {\n        var revenue = 0.0;\n\n        var products = context.Products.ToList();\n        foreach (var product in products)\n        {\n            var salesForProductAndRange = context.Sales\n                .Where(s => s.SaleDate >= startDate && s.SaleDate <= endDate\n                           && s.ProductId == product.Id)\n                .Sum(s => s.SalesAmount);\n            if (salesForProductAndRange > 0)\n                revenue += salesForProductAndRange;\n        }\n\n        return revenue;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Determine the difference in resource usage and performance between executing a simple calculation in Actian 4GL versus C#, given the following example: \"A simple Fibonacci sequence calculation that calculates up to n terms\".",
        "input": "```\n4gl DATA sequence;\n    sequence.size = 10;\n    sequence[1] = 0;\n    sequence[2] = 1;\n    FOR i = 3 TO size\n        sequence[i] = sequence[i - 2] + sequence[i - 1];\n    END-FOR;\nEND-DATA;\n```\n```csharp\nusing System;\npublic class Fibonacci\n{\n    public static void CalculateFibonacci(int n)\n    {\n        int[] sequence = new int[n];\n        sequence[0] = 0;\n        sequence[1] = 1;\n\n        for (int i = 2; i < n; i++)\n            sequence[i] = sequence[i - 1] + sequence[i - 2];\n    }\n}\n```",
        "output": "In terms of resource usage and performance, C# is generally more efficient in executing simple calculations like the given Fibonacci sequence example. While both Actian 4GL and C# can perform the task correctly, C# may have fewer overheads due to its compiled nature and the underlying infrastructure it utilizes compared to an interpreted language like Actian 4GL. Additionally, C# is more likely to be optimized for such tasks by compilers and developers, resulting in better performance.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Provide examples of best practices for documentation during the conversion of Actian 4GL to C# in a business context.",
        "input": "The company's IT department is planning on converting an existing Actian 4GL application to C#, and they would like to ensure that the conversion process includes comprehensive documentation. They are seeking best practices for documenting the converted code effectively.",
        "output": "1. Use Consistent Headers and Templates: Develop a consistent header and template format for all your source files, including a description of the file, its purpose, author, version history, and relevant links to related documentation or resources.\n2. Write Clear and Concise Comments: Add comments that provide context for each section of code and explain complex logic or business rules. Keep them brief, to-the-point, and easy to understand.\n3. Use Descriptive Variable Names: Adopt a naming convention for variables, functions, and classes that accurately reflects their purpose, making the code easier to read and maintain.\n4. Document Business Rules and Processes: Write clear, concise documentation for key business rules and processes used in the application. This will help other developers understand the underlying logic of the system more efficiently.\n5. Provide Explanation for Code Conversions: Explain why certain decisions were made during the conversion process and how they impact the performance or behavior of the code. This is especially important when dealing with compatibility issues between Actian 4GL and C#.\n6. Keep Documentation Up-to-Date: Regularly review and update documentation as changes are made to the converted code, ensuring that it remains accurate and up-to-date.\n7. Organize Documentation Logically: Group documentation by modules or sections, making it easy for developers to locate specific information related to their task or issue.\n8. Include Test Cases and Sample Data: Provide test cases and sample data for each module or function to demonstrate how they should behave under various conditions. This will help developers verify the functionality of the code and ensure that it meets business requirements.\n9. Create a Style Guide: Establish a style guide that outlines the preferred formatting, syntax, and documentation standards for your team's C# projects, ensuring consistency across all your projects.\n10. Provide Access to Documentation: Make sure the documentation is easily accessible to all team members and other stakeholders involved in the project, such as business analysts, QA engineers, and project managers. This can be achieved by storing the documentation in a centralized repository or providing links within the code itself.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this Actian code that calculates the commission for a salesperson based on their sales into C# code:\n```4gl\nDEFINE VARIABLE base_commission AS 0.10;\nDEFINE VARIABLE total_sales AS 0;\nREAD EACH sale;\n    IF (sale.amount > 1000) THEN\n        TOTAL SALES = total_sales + sale.amount;\n    END IF;\nEND READ;\nCOMMISSION = base_commission * total_sales;\n```",
        "input": "List<Sale> sales = GetAllSales(); // Example method returning a list of Sales objects",
        "output": "double commissionRate = 0.10; // Base commission rate\ndouble totalSales = 0;\nforeach (var sale in sales)\n{\n    if (sale.Amount > 1000)\n    {\n        totalSales += sale.Amount;\n    }\n}\ncommission = commissionRate * totalSales;",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Convert this Actian code that generates a report of the sales for each month into C# code:\n```4gl\nDEFINE VARIABLE current_month AS \"January\";\nOPEN REPORT \"MonthlySalesReport\";\nSET FOR SALES = ALL;\nIF (sale.date >= FIRST DAY OF MONTH(current_month) AND sale.date < LAST DAY OF MONTH(current_month)) THEN\n    WRITE \"Date: \", sale.date, \"   Amount: \", sale.amount, \"   Product: \", sale.product;\nEND IF;\nCLOSE REPORT \"MonthlySalesReport\";\n```",
        "input": "List<Sale> sales = GetAllSales(); // Example method returning a list of Sales objects\nDateTime currentDate = DateTime.Now;\nint year = currentDate.Year;\nint month = (int)currentDate.Month;",
        "output": "using System;\nusing System.IO;\nvar monthlyReportFile = $\"{year}_{month:00}_sales_report.txt\";\nusing (StreamWriter writer = new StreamWriter(monthlyReportFile))\n{\n    writer.WriteLine(\"Monthly Sales Report\");\n    writer.WriteLine();\n    var currentMonth = Enum.GetName(typeof(System.Globalization.CalendarWeekRule), (int)currentDate.AddDays(-(int)Math.Ceiling((double)(currentDate.Day - 1) / 7)));\n    for (var i = 0; i < sales.Count; i++)\n    {\n        var sale = sales[i];\n        if (sale.Date.Year == year && ((int)sale.Date.Month) == month)\n        {\n            writer.WriteLine($\"{sale.Date:MM/dd/yyyy} | {sale.Amount,12:C} | {sale.Product}\");\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Provide a function that retrieves the total revenue from a specific region for all products in OpenROAD based on a given region code using the 'sales_data' table. The result should be returned as a decimal value.",
        "input": "Assume we have a 'sales_data' table with columns 'region_code', 'product_id', 'quantity', and 'price'. You need to retrieve the total revenue for region with code \"North America\" (region_code = 'NA').",
        "output": "decimal GetTotalRevenueByRegion(string regionCode)\n{\n    using (SqlConnection connection = new SqlConnection(\"your_connection_string\"))\n    {\n        decimal totalRevenue = 0;\n        string query = \"SELECT SUM(price * quantity) AS TotalRevenue FROM sales_data WHERE region_code = @regionCode\";\n        SqlCommand command = new SqlCommand(query, connection);\n        command.Parameters.AddWithValue(\"@regionCode\", regionCode);\n\n        connection.Open();\n        SqlDataReader reader = command.ExecuteReader();\n\n        if (reader.Read())\n            totalRevenue = decimal.Parse(reader[\"TotalRevenue\"].ToString());\n\n        return totalRevenue;\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Write a function for inserting new employees in the 'employees' table in OpenROAD using C#. The input parameters should include employee ID, first name, last name, department, and salary. The employee ID is autogenerated by your database.",
        "input": "Assume you need to add a new employee with the following details: Employee ID (Auto-Generated), First Name 'John', Last Name 'Doe', Department 'Sales', Salary $50000.",
        "output": "public void InsertNewEmployee(string firstName, string lastName, string department, decimal salary)\n{\n    using (SqlConnection connection = new SqlConnection(\"your_connection_string\"))\n    {\n        string query = \"INSERT INTO employees (first_name, last_name, department, salary) VALUES (@FirstName, @LastName, @Department, @Salary); SELECT SCOPE_IDENTITY()\";\n        SqlCommand command = new SqlCommand(query, connection);\n        command.Parameters.AddWithValue(\"@FirstName\", firstName);\n        command.Parameters.AddWithValue(\"@LastName\", lastName);\n        command.Parameters.AddWithValue(\"@Department\", department);\n        command.Parameters.AddWithValue(\"@Salary\", salary);\n\n        connection.Open();\n        int newEmployeeId = (int)command.ExecuteScalar();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Explain how to convert a simple IF-ELSE structure in Actian 4GL to C#. Consider this example: In Actian, you have the following code snippet: ```4gl IF current_product.price > 500 THEN MESSAGE \"The product price is too high\" ELSE MESSAGE \"The product price is acceptable\" END IF```",
        "input": "Assuming the `current_product` object has a property called `Price`.",
        "output": "In C#, you can convert this Actian 4GL code snippet to:\n\n```csharp\nif (current_product.Price > 500)\n{\n    Console.WriteLine(\"The product price is too high\");\n}\nelse\n{\n    Console.WriteLine(\"The product price is acceptable\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Write a C# function that retrieves the top 3 highest selling products based on their unit_sold value, excluding products with 'defective' as the status from your Actian database using OpenROAD. The function should return a `List<Product>` object.",
        "input": "Assume you have a `Product` class with properties such as product name, unit_sold, price and status, and your OpenROAD database contains records for various products.",
        "output": "public List<Product> GetTopThreeHighestSellingNonDefectiveProducts()\n{\n    using (SqlConnection connection = new SqlConnection(\"your_connection_string\"))\n    {\n        string query = \"SELECT TOP 3 product_name, unit_sold FROM products WHERE status != 'defective' ORDER BY unit_sold DESC\";\n        SqlCommand command = new SqlCommand(query, connection);\n        List<Product> topThreeProducts = new List<Product>();\n\n        connection.Open();\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                string productName = reader.GetString(0);\n                int unitSold = reader.GetInt32(1);\n                Product product = new Product() { Name = productName, UnitSold = unitSold }; // Create a new Product object for each record and add it to the list\n                topThreeProducts.Add(product);\n            }\n        }\n    }\n\n    return topThreeProducts;\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Provide a real-life scenario where converting Actian 4GL code for OpenROAD in C# can lead to significant benefits for the company.",
        "input": "The company, ABC Retail, is planning to upgrade its legacy Actian application to the latest version of OpenROAD for improved performance and modern user interface (UI). The development team wants to know how converting their current 4GL codebase to C# will benefit the company.",
        "output": "Consider the following scenario: By converting the ABC Retail's legacy Actian application to C#, the development team can leverage modern .NET framework features like LINQ (Language-Integrated Query), asynchronous programming, and parallel processing for improved performance and scalability. This will enable the company to handle growing data volumes and higher concurrent user loads efficiently. Furthermore, adopting a popular language like C# with an extensive ecosystem of libraries and tools will facilitate future development efforts, allowing the team to innovate and add new features more rapidly.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Create a function to update an employee's information in Actian 4GL using C#. Assume that the connection has already been established, and the cursor `cursorEmpData` has been prepared with the necessary parameters for the update query.",
        "input": "Assume we have an employee named John Doe with employee_id=123 whose phone number needs to be updated from 555-1234 to 555-9876. We need to execute this update in C# code.",
        "output": "public void UpdateEmployeePhone(string connectionString)\n{\n    using (SqlCommand command = new SqlCommand(\"UPDATE employees SET phone='555-9876' WHERE employee_id=123\", new SqlConnection(connectionString)))\n    {\n        command.ExecuteNonQuery();\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Identify and explain potential security issues or vulnerabilities that might arise when converting Actian 4GL code to C# in a business context.",
        "input": "Consider this example: An Actian 4GL code for logging user activities contains hardcoded credentials (username and password) in the source code, which is now being converted to C#.\n```4gl\nDEFINE VARIABLE logfile AS FILE OF BINARY OUTPUT USING 'C:\\logs\\log.txt' NO-CREATE.\n\nDEFINE VARIABLE username AS CHARACTER VALUE \"admin\" INITIAL SIZE 12.\nDEFINE VARIABLE password AS CHARACTER VALUE \"password1234\" INITIAL SIZE 12.\n\nDO:\n    LOG ON logfile THE TEXT \"User Activity: \";\n    SELECT * FROM UserActivities; // Fetch user activities data from the database...\nEND DO.\n```",
        "output": "Upon converting this Actian 4GL code to C#, one of the potential security issues that might arise is hardcoded credentials being committed into source control, exposing sensitive information. To address this issue, implement proper access control mechanisms in your C# application:\n1. Store credentials securely by using an encrypted database or a secure configuration file instead of hardcoding them directly.\n2. Use role-based access control (RBAC) to limit user permissions based on roles. Grant only necessary privileges and minimize the number of users who have access to sensitive information.\n3. Implement multi-factor authentication (MFA) to strengthen security, for example by using third-party identity providers like Okta or Microsoft Azure Active Directory.\n4. Regularly review and update credentials to ensure that they remain secure and are not easily guessable.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "Given a complex function written in 4GL that calculates the monthly sales revenue for all stores based on daily transactions and product sales, provide a C# function to do the same calculation but with additional filtering based on the store location and date range. Respond with at least 30 lines of code.",
        "input": "Assume you have two tables: `daily_transactions` (`store_id`, `transaction_date`, `total_sales`) and `stores` (`store_id`, `location`, `address`). The goal is to calculate the monthly revenue for stores located in a specific region ('West') between January 1st, 2022, and February 28th, 2022.\n```csharp\n// Sample data for the tables.\nList<DailyTransaction> dailyTransactionsData = new List<DailyTransaction>\n{\n    // Add sample daily transaction records here...\n};\n\nList<Store> storeData = new List<Store>\n{\n    // Add store records here...\n};\n```",
        "output": "```csharp\npublic class DailyTransaction\n{\n    public int StoreId { get; set; }\n    public DateTime TransactionDate { get; set; }\n    public decimal TotalSales { get; set; }\n}\n\npublic class Store\n{\n    public int StoreId { get; set; }\n    public string Location { get; set; }\n    public string Address { get; set; }\n}\n\npublic static decimal CalculateMonthlyRevenue(DateTime startDate, DateTime endDate, string region)\n{\n    var filteredTransactions = dailyTransactionsData\n        .Where(t => t.TransactionDate >= startDate && t.TransactionDate <= endDate)\n        .Where(t => storeData.Any(s => s.StoreId == t.StoreId && s.Location == region));\n\n    return filteredTransactions.Sum(t => t.TotalSales);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    },
    {
        "instruction": "In the provided example code for converting Actian 4GL to C#, some variable names contain underscores instead of camelCase naming convention. Update the variable names in the `CalculateTotalSales()` method within the `Product` class to use camelCase instead of underscores. Respond with at least 5 lines of code.",
        "input": "Assume you have the following code:\n```csharp\npublic decimal Calculate_total_sales()\n{\n    if (DiscountedPrice.HasValue)\n    {\n        return salesData\n            .Where(s => s.ProductId == ProductId)\n            .Sum(s => s.Quantity * DiscountedPrice.Value);\n    }\n    else\n    {\n        return salesData\n            .Where(s => s.ProductId == ProductId)\n            .Sum(s => s.Quantity * (s.Price - s.DiscountAmount));\n    }\n}\n```",
        "output": "```csharp\npublic decimal CalculateTotalSales()\n{\n    if (discountedPrice.HasValue)\n    {\n        return salesData\n            .Where(s => s.ProductId == productId)\n            .Sum(s => s.Quantity * discountedPrice.Value);\n    }\n    else\n    {\n        return salesData\n            .Where(s => s.ProductId == productId)\n            .Sum(s => s.Quantity * (s.Price - s.DiscountAmount));\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_h",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in a business context.",
        "document": null
    }
]
[
    {
        "instruction": "Write a method in C# that updates an order in the orders table based on the order_id.",
        "input": "A sample order with id 1234 is to be updated with new values for total_amount and status. The total amount should be changed to 79.99, while the status should be set to \"Shipped\".",
        "output": "```csharp\npublic void UpdateOrder(int orderId, decimal newTotalAmount, string newStatus)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"UPDATE orders SET total_amount = @totalAmount, status = @status WHERE order_id = @orderId\", connection))\n        {\n            command.Parameters.AddWithValue(\"@orderId\", orderId);\n            command.Parameters.AddWithValue(\"@totalAmount\", newTotalAmount);\n            command.Parameters.AddWithValue(\"@status\", newStatus);\n            command.ExecuteNonQuery();\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Write a method to delete all orders for a specific customer_id from the orders table in C#.",
        "input": "The customer id for which the orders should be deleted is 1001.",
        "output": "```csharp\npublic void DeleteCustomerOrders(int customerId)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"DELETE FROM orders WHERE customer_id = @customerId\", connection))\n        {\n            command.Parameters.AddWithValue(\"@customerId\", customerId);\n            command.ExecuteNonQuery();\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Write a method in C# that retrieves the total sales for a specific date range, including order subtotals and tax amounts.",
        "input": "Assuming that you have a table called 'orders' with columns: `order_id`, `order_date`, `subtotal`, `tax_amount`, retrieve the total sales for the month of March 2023.",
        "output": "```csharp\npublic decimal GetTotalSalesForMarch2023()\n{\n    DateTime startDate = new DateTime(2023, 3, 1);\n    DateTime endDate = new DateTime(2023, 3, 31);\n\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"SELECT SUM(subtotal + tax_amount) FROM orders WHERE order_date >= @startDate AND order_date <= @endDate\", connection))\n        {\n            command.Parameters.AddWithValue(\"@startDate\", startDate);\n            command.Parameters.AddWithValue(\"@endDate\", endDate);\n            decimal totalSales = (decimal)command.ExecuteScalar();\n            return totalSales;\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Create a C# class to represent the Book entity, including properties and methods for creating, editing, and deleting books from the database.",
        "input": "The Book class should have `book_id`, `title`, `author`, `published_date`, and `stock` properties. Additionally, it should implement two methods: one for checking if a book with a specific title already exists, and another for updating book stock.",
        "output": "```csharp\npublic class Book\n{\n    public int BookId { get; set; }\n    public string Title { get; set; }\n    public string Author { get; get; }\n    public DateTime PublishedDate { get; set; }\n    public int Stock { get; set; }\n\n    private const string SQL_SELECT_BOOK = \"SELECT * FROM books WHERE title = @title\";\n    private const string SQL_UPDATE_BOOK_STOCK = \"UPDATE books SET stock = @stock WHERE book_id = @bookId\";\n\n    public Book(int bookId, string title, string author, DateTime publishedDate, int stock)\n    {\n        this.BookId = bookId;\n        this.Title = title;\n        this.Author = author;\n        this.PublishedDate = publishedDate;\n        this.Stock = stock;\n    }\n\n    public static Book GetBook(string title)\n    {\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            using (SqlCommand command = new SqlCommand(SQL_SELECT_BOOK, connection))\n            {\n                command.Parameters.AddWithValue(\"@title\", title);\n                using (SqlDataReader reader = command.ExecuteReader())\n                {\n                    if (reader.Read())\n                    {\n                        return new Book(\n                            reader.GetInt32(0),\n                            reader.GetString(1),\n                            reader.GetString(2),\n                            reader.GetDateTime(3),\n                            reader.GetInt32(4)\n                        );\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    public void UpdateStock(int newStock)\n    {\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            using (SqlCommand command = new SqlCommand(SQL_UPDATE_BOOK_STOCK, connection))\n            {\n                command.Parameters.AddWithValue(\"@stock\", newStock);\n                command.Parameters.AddWithValue(\"@bookId\", this.BookId);\n                command.ExecuteNonQuery();\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Suppose you have a list of books with properties such as ISBN, title, author, genre, price, availability, etc. Write a method in C# to retrieve books with a specific genre from the given list of books.",
        "input": "<books>\n[\n    { \"ISBN\": \"123-4567890123\", \"title\": \"The Great Gatsby\", \"author\": \"F. Scott Fitzgerald\", \"genre\": \"classic\", \"price\": 7.99, \"availability\": true },\n    { \"ISBN\": \"987-6543210987\", \"title\": \"To Kill a Mockingbird\", \"author\": \"Harper Lee\", \"genre\": \"classic\", \"price\": 12.99, \"availability\": true },\n    { \"ISBN\": \"321-5468790432\", \"title\": \"The Catcher in the Rye\", \"author\": \"J.D. Salinger\", \"genre\": \"classic\", \"price\": 8.99, \"availability\": false },\n    { \"ISBN\": \"456-7890234567\", \"title\": \"The Old Man and the Sea\", \"author\": \"Ernest Hemingway\", \"genre\": \"classic\", \"price\": 15.99, \"availability\": true },\n    { \"ISBN\": \"567-8901345678\", \"title\": \"The Sun Also Rises\", \"author\": \"Ernest Hemingway\", \"genre\": \"modernism\", \"price\": 12.99, \"availability\": true },\n    { \"ISBN\": \"789-0123456789\", \"title\": \"A Farewell to Arms\", \"author\": \"Ernest Hemingway\", \"genre\": \"modernism\", \"price\": 9.99, \"availability\": false },\n    { \"ISBN\": \"890-1234567890\", \"title\": \"The Beautiful and Damned\", \"author\": \"F. Scott Fitzgerald\", \"genre\": \"modernism\", \"price\": 14.99, \"availability\": true }\n]",
        "output": "public IEnumerable<Book> GetBooksByGenre(string genre, List<Book> books)\n{\n    return books.Where(book => book.genre.Equals(genre, StringComparison.OrdinalIgnoreCase));\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Describe how a 4GL loop would process orders for an online bookstore and then provide the equivalent C# code for it.",
        "input": "Orders table:\nid | customer_name     | order_date       | book_id    | quantity\n---|--------------------|---------------|-----------|--------\n1  | John Doe          | 2023-05-15      | 10         | 2\n2  | Jane Smith        | 2023-05-16      | 8          | 4\n3  | Robert Johnson   | 2023-05-17      | 9          | 1",
        "output": "In the given 4GL loop, it processes each order row from the Orders table and retrieves the respective book's details. Here is the equivalent C# code for processing orders:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n\n    using (SqlCommand command = new SqlCommand(\n        \"SELECT o.id, o.customer_name, o.order_date, b.title, b.author, b.price FROM Orders AS o JOIN Books AS b ON o.book_id = b.book_id\",\n        connection))\n    {\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int orderId = (int)reader[\"id\"];\n                string customerName = reader[\"customer_name\"].ToString();\n                DateTime orderDate = (DateTime)reader[\"order_date\"];\n                string bookTitle = reader[\"title\"].ToString();\n                string author = reader[\"author\"].ToString();\n                decimal price = (decimal)reader[\"price\"];\n                int quantity = (int)reader.GetInt32(4); // Assumes the 5th column is 'quantity'\n                float totalPrice = price * quantity;\n\n                // Process the order, including sending a confirmation email and updating the inventory\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Implement a C# method to handle the purchase of a book from the online bookstore. The method should check if the book is in stock and deduct the purchased quantity from stock if available. Respond only in code:",
        "input": "Assume you have a `PurchaseBook()` method that takes an integer `bookId`, an integer `quantity`, and a customer object as input, and a static property named `connectionString`. Also, assume that the Book class and SQL queries are already defined. The Book class contains `GetStock(bookId: int)` method to check stock of book with given Id.",
        "output": "```csharp\npublic void PurchaseBook(int bookId, int quantity, Customer customer)\n{\n    if (quantity > GetBookById(bookId).Stock)\n    {\n        throw new Exception($\"Not enough stock for book id: {bookId}\");\n    }\n\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        Book book = GetBookById(bookId);\n        int updatedStock = book.GetStock() - quantity;\n        using (SqlCommand command = new SqlCommand($\"UPDATE books SET stock = @stock WHERE book_id = @bookId\", connection))\n        {\n            command.Parameters.AddWithValue(\"@stock\", updatedStock);\n            command.Parameters.AddWithValue(\"@bookId\", bookId);\n            command.ExecuteNonQuery();\n        }\n        customer.PurchaseHistory.Add(new PurchaseHistoryEntry\n        {\n            BookId = bookId,\n            Quantity = quantity,\n            TimeStamp = DateTime.Now\n        });\n    }\n}\n\nprivate static Book GetBookById(int bookId)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"SELECT * FROM books WHERE book_id = @bookId\", connection))\n        {\n            command.Parameters.AddWithValue(\"@bookId\", bookId);\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                if (reader.Read())\n                {\n                    return new Book(\n                        reader.GetInt32(0),\n                        reader.GetString(1),\n                        reader.GetString(2),\n                        reader.GetDateTime(3),\n                        reader.GetInt32(4)\n                    );\n                }\n            }\n        }\n    }\n\n    return null;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Write a C# method to generate an invoice for the purchase. The method should take the list of book purchases, customer details, and store information as input and return an invoice in string format.",
        "input": "Assume you have already defined `PurchaseHistory` class which has properties `BookId`, `Quantity`, and `TimeStamp`. Also assume that you have a static property named `storeName` and the customer's full name is given as input.",
        "output": "```csharp\npublic string GenerateInvoice(IList<PurchaseHistory> purchases, string customerFullName, string storeName)\n{\n    var invoice = $\"Invoice\\n----\\nCustomer: {customerFullName}\\nStore: {storeName}\\n\\n\";\n\n    decimal totalAmount = 0;\n\n    foreach (var purchase in purchases)\n    {\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            using (SqlCommand command = new SqlCommand($\"SELECT title, price FROM books WHERE book_id = @bookId\", connection))\n            {\n                command.Parameters.AddWithValue(\"@bookId\", purchase.BookId);\n                var reader = command.ExecuteReader();\n                if (reader.Read())\n                {\n                    totalAmount += purchase.Quantity * reader.GetDecimal(1);\n                    invoice += $\"Title: {reader.GetString(0)}\\nPrice: ${reader.GetDecimal(1)} per unit\\nQuantity: {purchase.Quantity}\\nTotal: ${(purchase.Quantity * reader.GetDecimal(1)):N2}\\n\\n\";\n                }\n            }\n        }\n    }\n\n    invoice += $\"\\nTotal Amount: ${totalAmount:N2}\";\n    return invoice;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "What are some important considerations when converting Actian 4GL code for OpenROAD to C#?",
        "input": "When creating the online bookstore management system, we want to convert our existing 4GL code to C#. Our application needs to handle user authentication, manage inventory, process orders and payments, and generate reports. What are some important aspects that we should keep in mind while converting our code?",
        "output": "1. Understand the differences between Actian 4GL and C#: Familiarize yourself with the syntax, data types, and control structures of both languages to effectively convert the code.\n2. Consider performance implications: Ensure your converted code maintains or even improves application performance by optimizing algorithms and data structures.\n3. Take advantage of available libraries and frameworks: Leverage .NET libraries such as ADO.NET for database interactions, and MVC (Model-View-Controller) for web development to streamline the development process.\n4. Test thoroughly after each conversion: Make sure the converted code functions correctly and maintains existing functionalities, then test with a variety of input data to uncover any potential issues.\n5. Document your work: Keep records of the conversions made and any issues encountered during the conversion process for future reference or troubleshooting needs.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Explain the concept of object-oriented programming (OOP) in C# as it applies to an online bookstore management system.",
        "input": "",
        "output": "Object-oriented programming (OOP) is a programming paradigm that uses objects, which are instances of classes, to represent real-world entities such as books, authors, and customers in an online bookstore. In C#, OOP involves encapsulating data and methods within these objects to achieve reusability and maintainability of code. Here are the key concepts:\n1. Classes define the blueprint for creating objects and represent real-world entities such as Book, Author, and Customer.\n2. Objects are instances of a class and contain both data (properties) and behavior (methods). For example, a book object may have properties like title, author, and publication date, and methods like addToCart() and buyBook().\n3. Inheritance allows one class to inherit properties and methods from another class. This can help reduce code duplication by reusing common functionality between classes.\n4. Polymorphism enables objects of different classes to be treated as if they were instances of a single class, allowing for more flexible and extensible code.\n5. Encapsulation hides the internal details of an object, protecting it from external manipulations and ensuring data integrity.\nIn our online bookstore management system, we use OOP principles to model real-world objects such as books, authors, customers, orders, and carts. Each class represents a distinct entity, with its own properties and methods, contributing to the overall functionality of the system.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Create a method that adds a new book to the inventory in C# with the provided ISBN, title, author, publisher, publication_date, and stock_quantity.",
        "input": "A new book with an ISBN of \"123-4567890\", title \"Programming Fundamentals for Dummies\", author \"John Doe\", publisher \"BigBrain Publishers Inc.\", publication date of 2022-01-01, and an initial stock quantity of 50.",
        "output": "```csharp\npublic void AddBook(string isbn, string title, string author, string publisher, DateTime publicationDate, int stockQuantity)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"INSERT INTO books (isbn, title, author, publisher, publication_date, stock_quantity) VALUES (@isbn, @title, @author, @publisher, @publicationDate, @stockQuantity)\", connection))\n        {\n            command.Parameters.AddWithValue(\"@isbn\", isbn);\n            command.Parameters.AddWithValue(\"@title\", title);\n            command.Parameters.AddWithValue(\"@author\", author);\n            command.Parameters.AddWithValue(\"@publisher\", publisher);\n            command.Parameters.AddWithValue(\"@publicationDate\", publicationDate);\n            command.Parameters.AddWithValue(\"@stockQuantity\", stockQuantity);\n            command.ExecuteNonQuery();\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Design a method to update the quantity of a specific book in the inventory when a customer places an order in C#, assuming that each book has a unique ISBN.",
        "input": "A customer placed an order for \"The Art of Problem Solving\" with ISBN 978-1594032497, and we only have 3 copies left in the inventory. After this order is fulfilled, we will update the stock quantity to 2.",
        "output": "```csharp\npublic void UpdateBookStock(string isbn, int currentQuantity)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"UPDATE books SET stock_quantity = @stockQuantity WHERE isbn = @isbn\", connection))\n        {\n            command.Parameters.AddWithValue(\"@isbn\", isbn);\n            command.Parameters.AddWithValue(\"@stockQuantity\", currentQuantity - 1); // Reducing the quantity by one because an order was placed\n            command.ExecuteNonQuery();\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Explain how to convert the 4GL variable declaration for a customer object into C#. Include properties, class, and constructor.",
        "input": "DECLARE VARIABLE cust_object ActianCustomer;\nSET cust_object = CreateActianCustomer('John Doe', '123456789');",
        "output": "In C#, you can represent the customer object with a class named `Customer`. Here's an example of how to declare properties and a constructor:\n\n```csharp\npublic class Customer\n{\n    public string Name { get; set; }\n    public string Id { get; set; }\n\n    // Constructor\n    public Customer(string name, string id)\n    {\n        this.Name = name;\n        this.Id = id;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Describe how to convert the 4GL function call for updating an order's status in the Orders table into C#. Respond only with code.",
        "input": "UPDATE Orders SET status_id = '6' WHERE id = 1;",
        "output": "In C#, you can use ADO.NET to execute SQL commands like the given UPDATE statement. Here is an example of how to update an order's status:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string commandText = \"UPDATE Orders SET status_id = '6' WHERE id = @orderId\";\n    using (SqlCommand command = new SqlCommand(commandText, connection))\n    {\n        command.Parameters.Add(\"@orderId\", SqlDbType.Int);\n        command.Parameters[\"@orderId\"].Value = 1;\n\n        connection.Open();\n        int rowsAffected = command.ExecuteNonQuery();\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Create a C# function that retrieves the details of an order from the orders table based on its unique order_id. The function should return an Order object containing the id, title, author, publication date, and total amount of the book associated with the order, as well as the status of the order itself.",
        "input": "An example order with id 5678 has been placed for a book with the title \"The Art of War\", written by Sun Tzu, published in 1934 and with a total amount of 12.99. The status of the order is set to \"Pending\".",
        "output": "```csharp\npublic Order GetOrderById(int orderId)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"SELECT id, title, author, publication_date, total_amount, status FROM orders INNER JOIN books ON orders.book_id = books.id WHERE order_id = @orderId\", connection))\n        {\n            command.Parameters.AddWithValue(\"@orderId\", orderId);\n            SqlDataReader reader = command.ExecuteReader();\n            if (reader.Read())\n            {\n                int id = reader.GetInt32(0);\n                string title = reader.GetString(1);\n                string author = reader.GetString(2);\n                DateTime publicationDate = reader.GetDateTime(3);\n                decimal totalAmount = reader.GetDecimal(4);\n                string status = reader.GetString(5);\n                return new Order(id, title, author, publicationDate, totalAmount, status);\n            }\n        }\n    }\n    throw new InvalidOrderIdException();\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Create a C# function that calculates the total revenue for a specific day. The function should take in two parameters - a DateTime object representing the date and an IEnumerable<Order> of all orders placed on or before that date.",
        "input": "All orders from our online store since its launch have been collected. Calculate the total revenue for December 1, 2022.",
        "output": "```csharp\npublic decimal CalculateDailyRevenue(DateTime targetDate, IEnumerable<Order> orders)\n{\n    return orders.Where(o => o.OrderDate <= targetDate).Sum(o => o.TotalAmount);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Explain how to convert an Actian 4GL search function for a book in the online bookstore management system into C#. Include the correct class, method signature, and database query.",
        "input": "DEFINE SEARCH_BOOKS AS\n    SELECT * FROM books WHERE title LIKE :searchTerm;\n    IF EXISTS(SEARCH_BOOKS) THEN\n        DISPLAY \"Results for: \" + searchTerm + \"\\n\\n\";\n        FOR EACH book IN SEARCH_BOOKS DO\n            DISPLAY book.title, book.author, book.publisher;\n        END FOR;\n    ELSE\n        DISPLAY \"No results found for: \" + searchTerm;\n    ENDIF;\nEND DEFINE;",
        "output": "In C#, you can create a method called `SearchBooks` in the `BookStoreManagement` class. The method takes a string parameter for the search term and returns a list of `Book` objects:\n\n```csharp\npublic List<Book> SearchBooks(string searchTerm)\n{\n    List<Book> results = new List<Book>();\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand($\"SELECT * FROM books WHERE title LIKE @searchTerm\", connection))\n        {\n            command.Parameters.AddWithValue(\"@searchTerm\", $\"%{searchTerm}%\");\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    int bookId = (int)reader[\"book_id\"];\n                    string title = reader[\"title\"].ToString();\n                    string author = reader[\"author\"].ToString();\n                    string publisher = reader[\"publisher\"].ToString();\n                    results.Add(new Book(bookId, title, author, publisher));\n                }\n            }\n        }\n    }\n    if (results.Count == 0)\n    {\n        Console.WriteLine($\"No results found for: {searchTerm}\");\n    }\n    else\n    {\n        Console.WriteLine($\"Results for: {searchTerm}\\n\\n\");\n        foreach (var book in results)\n        {\n            Console.WriteLine(book.Title + \", \" + book.Author + \", \" + book.Publisher);\n        }\n    }\n    return results;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "What is the equivalent C# code for updating an Actian 4GL record using the UPDATE statement? Provide a complete method signature and example data.",
        "input": "UPDATE books SET title = 'A New Title' WHERE book_id = 123;",
        "output": "In C#, you can create a method called `UpdateBook` in the `BookStoreManagement` class. The method takes an integer `bookId` and a string `newTitle` as parameters. Here's an example implementation:\n\n```csharp\npublic void UpdateBook(int bookId, string newTitle)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand($\"UPDATE books SET title = @newTitle WHERE book_id = @bookId\", connection))\n        {\n            command.Parameters.AddWithValue(\"@newTitle\", newTitle);\n            command.Parameters.AddWithValue(\"@bookId\", bookId);\n            command.ExecuteNonQuery();\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Can you give an example of a function to find the average rating of books by a specific author in C#? Respond with code and provide an appropriate input.",
        "input": "An author named 'Jane Austen' has written several books that have been rated by users. The database table for book ratings is called `book_ratings`.",
        "output": "public double AverageRatingByAuthor(string authorName)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"SELECT AVG(rating) FROM book_ratings WHERE author = @author\", connection))\n        {\n            command.Parameters.AddWithValue(\"@author\", authorName);\n            return (double)command.ExecuteScalar();\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Create a method in C# to display the list of all customers who have made a purchase within the last month. Respond with code and provide an appropriate input.",
        "input": "The database table for orders is called `orders`, and it has columns `customer_id`, `order_date`, and `total_amount`. A customer purchases at least one item in each order.",
        "output": "public void ShowCustomersWithPurchasesLastMonth()\n{\n    DateTime lastMonth = DateTime.Now.AddMonths(-1);\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"SELECT DISTINCT customer_id FROM orders WHERE order_date >= @startDate\", connection))\n        {\n            command.Parameters.AddWithValue(\"@startDate\", lastMonth);\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    int customerId = (int)reader[\"customer_id\"];\n                    Console.WriteLine($\"Customer with ID: {customerId} has made a purchase last month.\");\n                }\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Convert the Actian 4GL function to C# that takes a list of book IDs and checks if any of these books are in the wishlist of a given customer. Respond only in code: FUNCTION isInWishlist(customerId INTEGER, bookIds LIST OF INTEGER) RETURNING BOOLEAN AS BEGIN DECLARE wishlists TABLE OF wishlist_records;\n    FETCH ALL FROM wishlists INTO :wishlists WHERE customer_id = customerId;\n\n    FOR EACH book_id IN bookIds LOOP\n        FOR EACH wishlist_record IN wishlists LOOP\n            IF book_id = wishlist_record.book_id THEN RETURN TRUE; END IF;\n        END LOOP;\n    END LOOP;\n    RETURN FALSE;\nEND;",
        "input": "int customerId = 12345678;\nList<int> bookIds = new List<int> { 1, 2, 3, 4, 5 };",
        "output": "bool result = false;\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\n        \"SELECT * FROM wishlists WHERE customer_id = @customerId\",\n        connection))\n    {\n        command.Parameters.AddWithValue(\"@customerId\", customerId);\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            var wishlistRecords = new List<WishlistRecord>();\n            while (reader.Read())\n            {\n                wishlistRecords.Add(new WishlistRecord\n                {\n                    BookId = reader[\"book_id\"].GetInt32(),\n                    CustomerId = reader[\"customer_id\"].GetInt32()\n                });\n            }\n            foreach (var bookId in bookIds)\n            {\n                foreach (var wishlistRecord in wishlistRecords)\n                {\n                    if (bookId == wishlistRecord.BookId)\n                    {\n                        result = true;\n                        break;\n                    }\n                }\n                if (result)\n                {\n                    break;\n                }\n            }\n        }\n    }\n}\nreturn result;",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "List the most common data structures used in both Actian 4GL and C#, along with an example of how to create each one in each language for a book object.",
        "input": "",
        "output": "Some commonly used data structures between Actian 4GL and C# include arrays, records/structures, and collections (like lists and dictionaries). Here are examples of creating a `Book` object using an array and a structure in both languages:\n\nActian 4GL:\n```4gl\nDEFINE TYPE BookArray AS ARRAY OF Books.\nDEFINE bookArray AS BookArray DEFAULT NEW BookArray().\n```\nC#:\n```csharp\npublic class Book\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Author { get; set; }\n    public string Publisher { get; set; }\n}\n\nBook[] bookArray = new Book[5]; // Array of 5 Book objects\n```\n\nActian 4GL:\n```4gl\nDEFINE TYPE Books AS RECORD (\n    Id INTEGER,\n    Title STRING,\n    Author STRING,\n    Publisher STRING\n).\nDEFINE book AS Books DEFAULT NEW Books().\n```\nC#:\n```csharp\npublic struct Book\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Author { get; set; }\n    public string Publisher { get; set; }\n}\n\nBook book = new Book(); // Single instance of a Book structure\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Give an example of how to create a loop in both Actian 4GL and C# to iterate through an array or list of books. Include a way to access each book object inside the loop.",
        "input": "",
        "output": "To iterate through an array or list of `Book` objects, you can use a FOR loop in Actian 4GL and the foreach loop in C#:\n\nActian 4GL:\n```4gl\nDEFINE TYPE BookArray AS ARRAY OF Books.\nDEFINE bookArray AS BookArray DEFAULT NEW BookArray().\nFOR EACH book IN bookArray DO\n    DISPLAY book.Id, book.Title, book.Author, book.Publisher;\nEND FOR;\n```\nC#:\n```csharp\nBook[] books = new Book[5]; // Array of 5 Book objects\nforeach (var book in books)\n{\n    Console.WriteLine(book.Id + \", \" + book.Title + \", \" + book.Author + \", \" + book.Publisher);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Explain the differences and similarities between the way Actian 4GL and C# handle errors when reading data from a database, focusing on exception handling.",
        "input": "",
        "output": "Actian 4GL and C# have different methods for handling errors while reading data from a database. In Actian 4GL, exceptions can be handled using the ON EXCEPTION clause within SQL statements or custom error triggers. However, in C#, exceptions are managed by throwing an exception when an error occurs and catching it using try/catch blocks.\n\nFor example:\n\nActian 4GL:\n```4gl\nDEFINE VAR errorCode AS INTEGER DEFAULT 0;\nOPEN database.db_name;\nSELECT COUNT(*) FROM table_name WHERE id = :id; ON EXCEPTION SET errorCode = SQLCODE;\nCLOSE database;\nIF errorCode NE 0 THEN\n    MESSAGE \"Error occurred while reading data: \" + errorCode;\nEND IF;\n```\nC#:\n```csharp\nusing System.Data.SqlClient;\n...\nSqlConnection connection = new SqlConnection(connectionString);\ntry\n{\n    SqlCommand command = new SqlCommand(\"SELECT COUNT(*) FROM table_name WHERE id = @id\", connection);\n    command.Parameters.AddWithValue(\"@id\", id);\n    int count = Convert.ToInt32(command.ExecuteScalar());\n}\ncatch (SqlException ex)\n{\n    Console.WriteLine($\"Error occurred while reading data: {ex.Message}\");\n}\n...\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Write a C# method that takes a SQL query and returns the number of rows affected when executing the query on the database. Use parameterized queries for security purposes.",
        "input": "",
        "output": "To return the number of rows affected by a SQL query, create a method called `ExecuteNonQueryAndGetAffectedRows`:\n```csharp\npublic int ExecuteNonQueryAndGetAffectedRows(string connectionString, string sql, params object[] parameters)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(sql, connection))\n        {\n            foreach (var parameter in parameters)\n            {\n                command.Parameters.AddWithValue($\"@{command.Parameters.Count + 1}\", parameter);\n            }\n\n            int affectedRows = command.ExecuteNonQuery();\n            return affectedRows;\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Explain the differences between Actian 4GL and C# when it comes to data manipulation in the context of an online bookstore.",
        "input": "Assuming you have two tables called 'authors' and 'books', both containing relevant columns like `author_id`, `name`, `birthdate` for authors and `book_id`, `title`, `ISBN` for books. You want to perform some operations on the data, such as counting the number of books each author has written and filtering books based on their publishers.",
        "output": "While both Actian 4GL and C# can manipulate data effectively, they have differences in syntax and approach when it comes to querying and filtering data within an online bookstore. In Actian 4GL, you would use SQL-like queries in a more procedural context by writing code within a program or using embedded SQL statements. An example of counting the number of books each author has written in Actian 4GL is:\n```4gl\nFOR EACH author IN SELECT author_id FROM authors JOIN books ON authors.author_id = books.author_id GROUP BY author_id COUNT(books.book_id) AS bookCount.\n    DISPLAY \"Author ID:\", author.author_id;\n    DISPLAY \"Number of Books: \", bookCount;\nEND FOR.\n```\nIn contrast, C# uses Object-Oriented Programming (OOP) principles and the ADO.NET framework for data manipulation. You would create classes to represent your tables, use methods to interact with these classes, and LINQ (Language Integrated Query) for filtering and querying data within C#. An example of counting the number of books each author has written in C# is:\n```csharp\nusing System.Data;\nusing System.Data.SqlClient;\n\npublic void GetBookCountByAuthor()\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"SELECT author_id, COUNT(book_id) AS bookCount FROM authors INNER JOIN books ON authors.author_id = books.author_id GROUP BY author_id\", connection))\n        {\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    int authorId = reader.GetInt32(0);\n                    int bookCount = reader.GetInt32(1);\n                    Console.WriteLine($\"Author ID: {authorId}, Number of Books: {bookCount}\");\n                }\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Identify some common pitfalls and best practices when converting Actian 4GL code to C# for the online bookstore management system.",
        "input": "Consider a scenario where you are given an Actian 4GL program that calculates the total cost of books in a cart, including tax and discounts, but it does not handle cases where certain items in the cart are out of stock or expired. The code needs to be converted to C# while ensuring that those cases are handled properly.",
        "output": "Some common pitfalls and best practices when converting Actian 4GL code to C# for an online bookstore management system include:\n\n1. Handling nullable types and edge cases (such as out-of-stock items, expired items) that may not be explicitly handled in Actian 4GL. In C#, you should check if variables are null before performing operations on them.\n2. Maintaining proper indentation and adhering to coding standards specific to C# to make the code more readable and easier to maintain.\n3. Using exception handling (try-catch blocks) in C# to better handle errors and provide meaningful messages for users, whereas in Actian 4GL error handling may rely on conditional statements or explicit error trapping.\n4. Understanding data types and their equivalents between Actian 4GL and C# to ensure proper conversion of data manipulation operations. For example, the `Decimal` type in C# can be used for storing monetary amounts as it provides higher precision than the `Double` or `Float` types.\n5. Leveraging modern libraries and frameworks like Entity Framework Core (EF Core) for database access, LINQ for querying data, and ASP.NET Core for web development when converting Actian 4GL applications to C# solutions, which can help improve performance and maintainability of the codebase.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Can you provide examples of common pitfalls and mistakes to avoid when converting Actian 4GL code for OpenROAD to C#?",
        "input": "When we initially began the conversion process from Actian 4GL to C#, we noticed some issues that occurred as a result of incorrect conversions. We would like to avoid these common mistakes in future conversions. Can you list some examples of common pitfalls and mistakes to steer clear of when converting our code?",
        "output": "1. Incorrect data types: Ensure all data types used in your 4GL code have an equivalent type in C#, as differences can cause compatibility issues or errors during execution. For example, convert Actian's VARCHAR data type to System.String in C#.\n2. Inadequate exception handling: Properly handle exceptions in both the original 4GL code and the converted C# code to ensure smooth operation of your application in case of errors.\n3. Ignoring performance implications: Optimize algorithms, data structures, and code sections during conversion to maintain or improve overall application performance.\n4. Inconsistent naming conventions: Adopt .NET coding standards for naming variables, methods, classes, and namespaces to make your code more readable and easier for team members to understand.\n5. Hard-coded values: Replace hard-coded values in the 4GL code with appropriate constants or configuration files when converting to C# to allow for easy modifications in the future.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Describe a best practice for debugging issues during the conversion process of Actian 4GL code to C#.",
        "input": "We are encountering some unexpected errors while converting our Actian 4GL codebase to C#. To ensure that these errors get resolved quickly, we would like to implement best practices when it comes to debugging issues. Can you describe a recommended practice for debugging issues during the conversion process?",
        "output": "1. Isolate the issue: Identify the specific part of your converted C# code causing the error by testing individual functions or modules. Narrow down the problem area by reproducing the error with as few components as possible.\n2. Use logging statements: Incorporate debugging statements into your C# code to provide more information about the issue at hand. Log messages will help you understand the execution flow and pinpoint where things went wrong.\n3. Analyze the stack trace: When an unhandled exception occurs, a stack trace is generated that displays the sequence of method calls leading up to the error. Examine this stack trace to better understand the source of the problem and make adjustments as needed.\n4. Consult documentation and forums: Research potential issues related to your specific scenario by browsing documentation, tutorials, and online resources dedicated to Actian 4GL-to-C# conversions and .NET development. Additionally, reach out to the community for help if you are stuck or need guidance.\n5. Test thoroughly after each conversion: Regularly test your converted code after implementing changes to ensure that it functions correctly and maintains existing functionalities. This will help catch any potential issues before they become major problems.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Define the necessary C# classes to represent tables in the online bookstore management system: books and customers. The book table has columns `book_id`, `title`, `publisher`, `publication_date`, and `stock`. The customer table has columns `customer_id`, `name`, `email`, and `address`.",
        "input": "",
        "output": "```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Data.SqlTypes;\n\npublic class Book\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Publisher { get; set; }\n    public DateTime PublicationDate { get; set; }\n    public int Stock { get; set; }\n}\n\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public SqlString Email { get; set; } // Use SqlString for email to store it correctly in the SQL Server database\n    public string Address { get; set; }\n    public List<PurchaseHistoryEntry> PurchaseHistory { get; set; } = new List<PurchaseHistoryEntry>();\n}\n\npublic class PurchaseHistoryEntry\n{\n    public int BookId { get; set; }\n    public int Quantity { get; set; }\n    public DateTime TimeStamp { get; set; }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Define a method to search for the list of books with matching keyword(s) in their title or author's name or category using C#. The method should take a string containing multiple keywords (space-separated) as input and return an IEnumerable of book objects that match any of the given keywords.",
        "input": "Assume you have already defined `Book` class which has properties `Title`, `AuthorName`, and `Category`. Also assume that your data is stored in a SQL Server database using Entity Framework with the connection string named `connectionString`.",
        "output": "```csharp\npublic IEnumerable<Book> SearchBooks(string keywords)\n{\n    using (var context = new BooksContext())\n    {\n        var searchTerms = keywords.Split(' ', StringSplitOptions.RemoveEmptyEntries);\n        return context.Books\n            .Where(book =>\n                book.Title.Contains(searchTerms.FirstOrDefault() ?? string.Empty) ||\n                book.AuthorName.Contains(searchTerms.FirstOrDefault() ?? string.Empty) ||\n                searchTerms.Any(term => book.Category.ToLower().Contains(term.ToLower())))\n            .ToList();\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Convert the given 4GL code snippet to C#: IF i > 0 AND customer_balance >= totalAmount THEN SET customer_balance = customer_balance - totalAmount ELSE RETURN \"Insufficient funds\";",
        "input": "Assume that the variables `i`, `customer_balance`, and `totalAmount` are integers. The code should return a string. If the payment is successful, return nothing.",
        "output": "```csharp\nif (i > 0 && customer_balance >= totalAmount)\n{\n    customer_balance -= totalAmount;\n}\nelse\n{\n    return \"Insufficient funds\";\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Write a C# method to calculate the total revenue from sales in a month for an online bookstore.",
        "input": "Assume you have a `SalesReport()` method that takes a date as input and a static property named `connectionString`. Also, assume that your sales table contains columns like `book_id`, `quantity`, `sale_price`, and `sale_date`.",
        "output": "```csharp\npublic double GetTotalRevenueForMonth(DateTime date)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand($\"SELECT SUM(sale_price * quantity) FROM sales WHERE MONTH(sale_date) = @month AND YEAR(sale_date) = @year\", connection))\n        {\n            command.Parameters.AddWithValue(\"@month\", date.Month);\n            command.Parameters.AddWithValue(\"@year\", date.Year);\n            return Convert.ToDouble(command.ExecuteScalar());\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Create a C# function that generates a list of books with their corresponding authors for an online bookstore's website.",
        "input": "Assume you already have classes for `Author` and `Book`, including their properties, constructors, and necessary methods (e.g. GetAuthorById(), GetBookById()). You also have a static property called `connectionString`.",
        "output": "```csharp\npublic List<Author> GetAuthoredBooks()\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        List<Author> authors = new List<Author>();\n        using (SqlCommand command = new SqlCommand(\"SELECT authors.author_id, authors.name, books.* FROM authors INNER JOIN books ON authors.author_id = books.author_id\", connection))\n        {\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    int authorId = reader.GetInt32(0);\n                    string name = reader.GetString(1);\n                    Author author = GetAuthorById(authorId);\n                    Book book = GetBookById(reader.GetInt32(2));\n                    author.Books.Add(book);\n                    authors.Add(author);\n                }\n            }\n        }\n        return authors;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Write a C# method to search for books by title in the online bookstore database. The method should take two parameters: `title` (string) and `pageNumber` (int). It should return a list of books that match the given title along with their corresponding page numbers in the results. Assume the search functionality is implemented using pagination, where each page contains 20 results.",
        "input": "Assume we have a method `GetBooks(string searchText)` which returns the list of matching books when given any text to search.\n\n<pre>\npublic List<Book> SearchForTitle(string title, int pageNumber)\n{\n    // Implement pagination and search for the books by title here.\n}\n</pre>",
        "output": "Using the `GetBooks` method provided in the input:\n\n```csharp\npublic List<Book> SearchForTitle(string title, int pageNumber)\n{\n    return GetBooks($\"title:{title}\") // Perform case-insensitive search.\n             .Skip((pageNumber - 1) * 20) // Skip to the appropriate page by adjusting the index of the list\n             .Take(20)                     // Limit the number of results per page to 20\n             .ToList();                    // Convert to a list for the caller\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL Insert statement into C# code that updates customer information, specifically name and email. Respond only in code. Given customer ID is `123`. The new name should be \"John Smith\" and email should be \"[john_smith@example.com](mailto:john_smith@example.com)\".",
        "input": "",
        "output": "```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\n        \"UPDATE customers SET name = @name, email = @email WHERE customer_id = @customerId\",\n        connection))\n    {\n        command.Parameters.AddWithValue(\"@name\", \"John Smith\");\n        command.Parameters.AddWithValue(\"@email\", \"[john_smith@example.com](mailto:john_smith@example.com)\");\n        command.Parameters.AddWithValue(\"@customerId\", 123);\n        command.ExecuteNonQuery();\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Create a C# class representing the `Order` entity with properties for `order_id`, `customer_id`, `total_amount`, and `status`. Include a constructor that initializes the object.",
        "input": "(Optional)\nAssume there is an existing `Customer` class in the project.",
        "output": "```csharp\npublic class Order\n{\n    public int order_id { get; set; }\n    public int customer_id { get; set; }\n    public decimal total_amount { get; set; }\n    public string status { get; set; }\n\n    public Order(int orderId, int customerId, decimal totalAmount, string status)\n    {\n        this.order_id = orderId;\n        this.customer_id = customerId;\n        this.total_amount = totalAmount;\n        this.status = status;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Write a method in C# that returns the top 5 best-selling books in the bookstore based on their sales quantity. If there are fewer than 5 books with sales quantities, return all available ones.",
        "input": "(Optional)\nAssume there is an existing `Book` class representing the books in the online store along with a property for `sales_quantity`.",
        "output": "```csharp\npublic List<Book> GetTopSellingBooks()\n{\n    var bookList = new List<Book>();\n    using (var context = new BookstoreContext())\n    {\n        var booksWithQuantities = context.Books\n            .OrderByDescending(b => b.sales_quantity)\n            .Take(5)\n            .ToList();\n        bookList = booksWithQuantities;\n    }\n    return bookList;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "Create a C# method to get the total sales for a given date range in the bookstore database using SQL query. The method should return a decimal value representing the total sales.",
        "input": "The database table is called 'sales' and it has columns: sale_id, customer_id, book_id, quantity, price, and sale_date.",
        "output": "```csharp\npublic Decimal GetTotalSales(DateTime startDate, DateTime endDate)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"SELECT SUM(quantity * price) as total FROM sales WHERE sale_date >= @startDate AND sale_date <= @endDate\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@startDate\", startDate);\n            command.Parameters.AddWithValue(\"@endDate\", endDate);\n            return (Decimal)command.ExecuteScalar();\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    },
    {
        "instruction": "How can you modify the `GetTotalSales` method to also include tax for a sales tax rate of 5%?",
        "input": "",
        "output": "To include tax in the `GetTotalSales` method, first calculate the total sales without tax and then multiply it by the sales tax rate (1.05). Here's an example implementation:\n```csharp\npublic Decimal GetTotalSalesWithTax(DateTime startDate, DateTime endDate)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"SELECT SUM(quantity * price) as total FROM sales WHERE sale_date >= @startDate AND sale_date <= @endDate\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@startDate\", startDate);\n            command.Parameters.AddWithValue(\"@endDate\", endDate);\n            Decimal total = (Decimal)command.ExecuteScalar();\n            return total * 1.05M; // sales tax rate is 5% or 0.05\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_j",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C# in the context of an online bookstore management system.",
        "document": null
    }
]
[
    {
        "instruction": "Show an example of using the _StringReplace global procedure to replace specific words in a string in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "A company wants to remove any instances of the word \"Inc.\" from their client's names. The client names are stored in the variable `clients`.",
        "output": "Here's an example of how to replace \"Inc.\" with an empty string:\n```\ndeclare\n    clients = varchar(100);\nenddeclare\n\nclients = 'John Smith Inc.';\n_StringReplace(string = clients, old_substring = ' Inc.', new_substring = '');\n\n-- The variable `clients` now contains \"John Smith\"\n```\nYou can use _StringReplace for replacing specific words in a string.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Provide an example of using the _DateFormat global procedure to convert a date format in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "A system generates dates in the DD-MM-YYYY format but you need them in MM/DD/YYYY for an export file. The current system date is stored in the variable `date`.",
        "output": "You can convert the date from DD-MM-YYYY to MM/DD/YYYY using _DateFormat:\n```\ndeclare\n    date = datetime;\nenddeclare\n\n-- Set current date\ndate = now();\n_DateFormat(datetime = date, source_format = 'DD-MM-YYYY', target_format = 'MM/DD/YYYY');\n\n-- The variable `date` contains the converted date in MM/DD/YYYY format\n```\nThe _DateFormat procedure can help you convert dates from one format to another.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "How to use the _StringToDate procedure to convert a formatted date string into a datetime value in Actian 4GL OpenROAD Global Procedures Available in the Core Library?",
        "input": "date_str = '2023/12/05'",
        "output": "Use the following code to convert a formatted date string:\n```\ndeclare\n    dt = datetime;\nenddeclare\n\ndt = _StringToDate(string = date_str);\n\n-- dt now contains the date of December 5, 2023\n```\nThis converts a given date string into a datetime value.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Implement code for sorting an array using the _SortArray procedure in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "my_array = [5, 3, 2, 1]",
        "output": "Here's how to use _SortArray:\n```\ndeclare\n    i = integer;\n    array_sorted = integer[4];\nenddeclare\n\ncopy(my_array) to array_sorted;\n_SortArray(array = array_sorted, ascending = 1);\n\n-- array_sorted now contains [1, 2, 3, 5]\n```\nThis sorts an integer array in ascending order.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "How do you convert a number into its exponential notation using _NumberConvertToExponent in Actian 4GL OpenROAD Global Procedures Available in the Core Library?",
        "input": "",
        "output": "Here's how to convert a number to exponential notation:\n```\ndeclare\n    num = numeric(17, 6);\n    exponent = smallint;\nenddeclare\n\nnum = 123456789.012345;\nexponent = _NumberConvertToExponent(value = num, minimum_digits = 4);\n\n-- num now contains \"1.234568e+9\" and exponent now contains \"9\"\n```\nUse the _NumberConvertToExponent procedure to convert a number into exponential notation. The `minimum_digits` parameter determines the number of significant digits in the result. In this example, we use 4 for the `minimum_digits`.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "How to generate a random number within a specified range using _Random between 10 and 50 in Actian 4GL OpenROAD Global Procedures Available in the Core Library?",
        "input": "",
        "output": "To generate a random integer between 10 and 50:\n```\ndeclare\n    min_value = numeric(17, 0);\n    max_value = numeric(17, 0);\n    rand_val = numeric(17, 0);\nenddeclare\n\nmin_value = 10;\nmax_value = 50;\nrand_val = _Random(min_value, max_value);\n\n-- rand_val now contains a random integer between 10 and 50\n```\nUse the _Random function to generate a number within a specified range. The `min_value` is inclusive while the `max_value` is exclusive. In this example, we generate a random integer between 10 (inclusive) and 51 (exclusive).",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Demonstrate the usage of the _DateToText procedure to convert a date value into text format using Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "You have the following date variables: `start_date` and `end_date`. Both date values are in the \"YYYY-MM-DD\" format (e.g., '2022-10-30' and '2022-12-31'). Write code to get the text representation of these dates.",
        "output": "Here's how to convert date values into text using _DateToText:\n```\ndeclare\n    start_date = datetime;\n    end_date   = datetime;\nenddeclare\n\nstart_date = '2022-10-30';\nend_date   = '2022-12-31';\n\ntext_start_date = _DateToText(date = start_date, format_type = 1);\ntext_end_date   = _DateToText(date = end_date,   format_type = 1);\n\n-- The variables `text_start_date` and `text_end_date` now contain \"October 30, 2022\" and \"December 31, 2022\", respectively\n```\nYou can use _DateToText to convert date values into text format.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Provide an example of using the _FormatNumber procedure to format numeric values in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "The variable `amount` contains a large monetary value ($2,019,873.45). Format this number so it appears as \"$2,019,873.45\".",
        "output": "Here's how to format a large numeric value using _FormatNumber:\n```\ndeclare\n    amount = decimal(19);\nenddeclare\n\namount = 2019873.45;\nformatted_amount = _FormatNumber(number = amount, grouping_digits = 3);\n\n-- The variable `formatted_amount` now contains \"$2,019,873.45\"\n```\nYou can use _FormatNumber to format numeric values in Actian 4GL.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Show an example of using _DateToStr and _StrTodate to convert between date format in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "The current date is March 1, 2023. Convert it to YYYY-MM-DD and then back to a formatted string.",
        "output": "Here's an example of using _DateToStr and _StrTodate to convert between date formats:\n```\ndeclare\n    d = date;\n    str_date = varchar(20);\nenddeclare\n\n-- Convert current date to YYYY-MM-DD format\nd = current_date();\nstr_date = _DateToStr(d, 'yyyymmdd');\nmessage 'Current date in format yyyymmdd: ' || str_date;\n\n-- Convert back to a formatted string (MM/DD/YYYY)\nd = _StrTodate(str_date, 'yyyymmdd', 'mm/dd/yyyy');\nmessage 'Current date in MM/DD/YYYY format: ' || _DateToStr(d, 'mm/dd/yyyy');\n```\nThe output will be:\n```\nCurrent date in format yyyymmdd: 20230301\nCurrent date in MM/DD/YYYY format: 03/01/2023\n```\n_DateToStr and _StrTodate allow easy conversion between different date formats.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Write a code snippet to validate an input string using _StringLength in Actian 4GL OpenROAD Global Procedures Available in the Core Library. Ensure that it has at least 5 characters and at most 20 characters.",
        "input": "",
        "output": "Here's a code snippet to validate an input string with _StringLength:\n```\ndeclare\n    str = varchar(10);\n    is_valid = boolean;\nenddeclare\n\n-- Get user input\nmessage 'Enter the string:';\nread(str);\n\nif _StringLength(str) < 5 or _StringLength(str) > 20 then\n    message 'Error: The length of the input must be between 5 and 20 characters. Please try again.'\nelse\n    message 'The given string is valid.'\nendif;\n```\nThis code checks if the length of the user-inputted string is within the specified range (5 to 20 characters).",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "How to retrieve the first 10 records from a table using _FetchFirst in Actian 4GL OpenROAD Global Procedures Available in the Core Library?",
        "input": "Here's an example table named `Sales_Table` with columns \"CustomerID\", \"ProductName\", and \"Amount\":\n```\nINSERT INTO Sales_Table (CustomerID, ProductName, Amount) VALUES\n(1234, 'Apple', 10.99),\n(5678, 'Banana', 3.99),\n(9012, 'Carrot', 1.49),\n(2345, 'Durian', 17.99),\n(6789, 'Eggplant', 2.99),\n(3456, 'Fish', 12.99),\n(8901, 'Grape', 1.79),\n(4567, 'Honeydew', 5.99),\n(7890, 'IceCream', 3.5),\n(1235, 'Juice', 2.99);\n```",
        "output": "To retrieve the first 10 records from the `Sales_Table`:\n\n```\ndeclare\n    cursor_name = cursor;\n    record_count = integer;\nenddeclare\n\n-- Create a cursor for the table\ndeclare cursor_name is select * from Sales_Table;\n\n-- Set a variable to store record count and set it equal to zero\nrecord_count = 0;\n\n-- Loop through the first 10 records using _FetchFirst\nrepeat\n    -- Increment record count by 1\n    record_count = record_count + 1;\n\n    -- If we've fetched 10 or more rows, break the loop\n    if record_count >= 10 then leave; endif;\n\n    -- Use _FetchFirst to fetch the next record\n    declare\n        customerID numeric(7,0);\n        productName varchar(256);\n        amount numeric(9,4);\n    enddeclare\n\n    _FetchFirst(cursor_name, customerID, productName, amount);\n\n    -- Print out the fetched record\n    message 'Record ' || record_count || ': CustomerID=' || customerID || ', ProductName=' || productName || ', Amount=' || amount;\nendrepeat;\n```\nThe output will be the first 10 records from the `Sales_Table`.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "How to sort records in a table using _SortRows by \"ProductName\" in Actian 4GL OpenROAD Global Procedures Available in the Core Library?",
        "input": "The same `Sales_Table` as in the previous task:\n```\nINSERT INTO Sales_Table (CustomerID, ProductName, Amount) VALUES\n(1234, 'Apple', 10.99),\n(5678, 'Banana', 3.99),\n(9012, 'Carrot', 1.49),\n(2345, 'Durian', 17.99),\n(6789, 'Eggplant', 2.99),\n(3456, 'Fish', 12.99),\n(8901, 'Grape', 1.79),\n(4567, 'Honeydew', 5.99),\n(7890, 'IceCream', 3.5),\n(1235, 'Juice', 2.99);\n```",
        "output": "To sort the records in the `Sales_Table` by \"ProductName\":\n\n```\n-- Create a cursor for the table\ndeclare cursor_name is select * from Sales_Table;\n\n-- Create a variable to store the sorted cursor\ndeclare sorted_cursor_name is cursor;\n\n-- Sort the records in the cursor using _SortRows by \"ProductName\"\n_SortRows(cursor_name, sorted_cursor_name, 'ProductName');\n\n-- Loop through the sorted records and print out each record\nrepeat\n    declare\n        customerID numeric(7,0);\n        productName varchar(256);\n        amount numeric(9,4);\n    enddeclare\n\n    _FetchFirst(sorted_cursor_name, customerID, productName, amount);\n    message 'ProductName=' || productName || ', Amount=' || amount;\nendrepeat;\n```\nThe output will be the records in the `Sales_Table`, sorted by \"ProductName\".",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Explain how to use _DateString function in Actian 4GL OpenROAD Global Procedures Available in the Core Library to convert a date value into a string.",
        "input": "A developer needs to format a specific date as \"yyyy-mm-dd\" for a report that the system generates every month. The date is stored in a variable called `orderDate`.",
        "output": "You can use _DateString to format your date into a desired string format. Here's an example:\n```\ndeclare\n    orderDate = datetime;\nenddeclare\n\n-- Assuming the current date is 2023-03-15\norderDate = now();\nresult_date = _DateString(date = orderDate, format = 'yyyy-mm-dd');\n\n-- The variable `result_date` now contains \"2023-03-15\"\n```\nThe _DateString function helps you convert a date into the desired string format.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Illustrate how to use _CalcAverage global procedure in Actian 4GL OpenROAD Global Procedures Available in the Core Library to calculate the average of multiple values.",
        "input": "An application is collecting data on employee salaries and wants to find the average salary. The salary values are stored in an array `salaries`.",
        "output": "To find the average salary, you can use _CalcAverage:\n```\ndeclare\n    salaries = integer[10];\nenddeclare\n\n-- Assuming the following salaries array contains the following data: [35000, 42000, 48000, 50000]\nsalaries = [35000, 42000, 48000, 50000];\naverage_salary = _CalcAverage(numbers = salaries);\n\n-- The variable `average_salary` now contains the average salary: 45750\n```\nUse _CalcAverage to calculate the average of multiple values in an array.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Create a function to validate the input of a zip code in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "The function should check if the length is 5 digits and contains only numbers, or it should return an error message.",
        "output": "Here's an example of creating a _ZipCodeValid function to validate the input of a zip code:\n```\ndeclare\n    function _ZipCodeValid(zip_code : varchar) : boolean;\nbegin\n    if length(zip_code) != 5 or (zip_code <> '' and isdigit(zip_code(1,1)) = 0) then\n        return false;\n    end if;\n\n    -- optional: add additional checks for specific zip code formats or ranges\n\n    return true;\nend;\nenddeclare\n```\nThis function checks the length and whether all characters are digits. It returns `true` if the input is valid, otherwise it returns `false`.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "How to sort an array of dates in ascending order using _SortArr in Actian 4GL OpenROAD Global Procedures Available in the Core Library?",
        "input": "Here's an array of dates: ['2023-01-01', '2023-01-05', '2023-01-03']. Sort it in ascending order using _SortArr.",
        "output": "Here's how you can sort an array of dates in Actian 4GL:\n```\ndeclare\n    date_array = array[date] of ('2023-01-01', '2023-01-05', '2023-01-03');\n    sorted_array = array[date] of length(date_array);\nenddeclare;\n\n_SortArr(date_array, sorted_array, sorttype='ascending');\nmessage 'Sorted date array:';\nfor i = 1 to length(sorted_array) do\n    message _DateToStr(sorted_array(i), 'MM/dd/yyyy');\nend for;\n```\nThe output will be:\n```\nSorted date array:\n01/01/2023\n01/03/2023\n01/05/2023\n```\n_SortArr is useful for sorting arrays of various data types, including dates.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Explain the purpose and syntax of the _FormatDate global procedure in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "A date is stored as a numeric value. We want to convert this number to a string in the \"dd/mm/yyyy\" format.",
        "output": "Here's an example of converting a numeric date to a date string using the _FormatDate procedure:\n```\ndeclare\n    date_num = numeric(8,0);\nenddeclare\n\ndate_num = 1642597600; -- This is the number representing 20/01/2022 (Unix time)\n\nformatted_date = _FormatDate(value = date_num, format = 'dd/mm/yyyy');\n\n-- The variable `formatted_date` now contains \"20/01/2022\"\n```\nThe purpose of the _FormatDate procedure is to convert a date or time into a string in a specific format. The syntax requires providing the value and format as parameters:\n```\n_FormatDate(value = <date>, format = '<format-string>')\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Describe how to use _StringIndexOf global procedure to locate the position of a substring in another string within Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "A customer has multiple addresses, and we need to determine where the first comma is found in each address stored in the `addresses` variable.",
        "output": "Here's how to find the position of a substring in another string using _StringIndexOf:\n```\ndeclare\n    addresses = varchar(2048);\nenddeclare\n\n-- Sample data for `addresses`: \"123 Main St, Anytown, NY 12345 | 456 Park Rd, Someville, NJ 54321\"\n\nfirst_commas = smallint array(10);\nposition = smallint;\n\nfor i = 1 to _StringCount(' ', addresses) do\n    begin\n        position = _StringIndexOf(string = addresses, substring = ',', start_pos = (i * 2) + 1);\n        if position > 0 then\n            first_commas[i] = position;\n        endif;\n    end;\nendfor\n\n-- First commas array now contains the positions of the commas in each address.\n```\nThe _StringIndexOf global procedure returns the position of a substring within another string, starting from a specific position. In this example, we use it to find the position of commas in customer addresses.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Describe the functionality and syntax of the _Now global procedure in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "We want to get the current date and time as a datetime value for future calculations.",
        "output": "Using the _Now procedure, you can obtain the current system's date and time as a datetime value:\n```\ndeclare\n    now_date = datetime;\nenddeclare\n\nnow_date = _Now();\n\n-- The variable `now_date` contains the current date and time.\n```\nThe purpose of the _Now procedure is to return the current system's date and time as a datetime value:\n```\n_Now()\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Supply an example of using the _DayName global procedure to determine the day of the week for a given date in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "A user has entered a date as a numeric value (Unix timestamp). You want to find out if it's a weekend or weekday based on the day name.",
        "output": "Here's an example of using _DayName:\n```\ndeclare\n    date_num = numeric(8,0);\nenddeclare\n\ndate_num = 1642597600; -- This is the number representing 20/01/2022 (Unix time)\n\nday_name = _DayName(date_num);\n\n-- The variable `day_name` contains \"Friday\". Now you can check if it's a weekend or weekday based on this information.\n```\nThe purpose of the _DayName procedure is to return the day name for a specified date as a string:\n```\n_DayName(date)\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Explain how to get the number of days between two dates in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "Suppose we have `start_date` (e.g., '2023-01-01') and `end_date` (e.g., '2023-01-31'). Write code to find out how many days are between these two dates.",
        "output": "To get the number of days between two dates, you can use _DateDiff:\n```\ndeclare\n    start_date = datetime;\n    end_date   = datetime;\nenddeclare\n\nstart_date = '2023-01-01';\nend_date   = '2023-01-31';\n\ndays_between = _DateDiff(date1 = start_date, date2 = end_date, time_interval = \"Day\");\n\n-- The variable `days_between` contains the number of days between the two given dates. In this case, it would equal 30.\n```\nIn Actian 4GL OpenROAD Global Procedures, use _DateDiff to find out the number of days between two dates with a specified time interval (\"Day\").",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Describe how to format date values using the _TextFormat procedure in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "Given the following date variables: `start_date` (e.g., '2023-01-01') and `end_date` (e.g., '2023-01-31'). Write code to format these dates as \"YYYY-MM-DD\" in a string variable.",
        "output": "Here's how to use _TextFormat to convert date variables into the desired format:\n```\ndeclare\n    start_date = datetime;\n    end_date   = datetime;\n    formatted_start_date = char(19);\n    formatted_end_date   = char(19);\nenddeclare\n\nstart_date = '2023-01-01';\nend_date   = '2023-01-31';\n\nformatted_start_date = _TextFormat(string = _DateToText(date = start_date, format_type = 1), format_string = \"YYYY-MM-DD\");\nformatted_end_date   = _TextFormat(string = _DateToText(date = end_date,   format_type = 1), format_string = \"YYYY-MM-DD\");\n\n-- The variables `formatted_start_date` and `formatted_end_date` contain '2023-01-01' and '2023-01-31', respectively, in the desired format.\n```\nIn Actian 4GL OpenROAD Global Procedures, use _TextFormat to convert string values into a specified format by using the _DateToText procedure for date values with the desired format mask (\"YYYY-MM-DD\").",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Illustrate how to use _StringConcat function to concatenate multiple strings in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "We have a list of names: ['John', 'Jane', 'Mike']. We want to concatenate them using commas as separators and store it in a single string variable.",
        "output": "Here's an example using the _StringConcat function to concatenate multiple strings:\n```\ndeclare\n    names_list = varchar(255);\nenddeclare\n\nnames_list = _StringConcat('John', ',', 'Jane', ',', 'Mike');\n-- The variable `names_list` now contains \"John,Jane,Mike\"\n```\nThe purpose of the _StringConcat function is to concatenate multiple strings in Actian 4GL OpenROAD Global Procedures. You can concatenate the strings along with any separator. The syntax requires passing the strings and a delimiter as parameters:\n```\n_StringConcat(string1, delimiter, string2, ..., stringN)\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Demonstrate the usage of _DateDiff to calculate the difference between two dates in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "We have two date values: '01/01/2020' and '31/12/2021'. We want to find out how many days are between these dates.",
        "output": "Here's an example of using _DateDiff to calculate the difference between two dates in Actian 4GL:\n```\ndeclare\n    start_date = date;\n    end_date = date;\nenddeclare\n\nstart_date = '01/01/2020';\nend_date = '31/12/2021';\n\nday_diff = _DateDiff(start_date, end_date, 'DAY');\n-- The variable `day_diff` now contains 730 days (rounded up to the nearest day)\n```\nThe _DateDiff function calculates the difference between two dates in Actian 4GL OpenROAD Global Procedures. You can specify the date parts and the time unit as parameters:\n```\n_DateDiff(date1, date2, 'DATEPART')\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Demonstrate the usage of _Mid function in Actian 4GL OpenROAD Global Procedures Available in the Core Library to extract substrings from a string.",
        "input": "Suppose we have the following string: 'Hello, World!'. We would like to extract the 'World' part and store it in the variable world_part.",
        "output": "To extract the desired substring using _Mid function, you can do this:\n```\ndeclare\n    original_string = 'Hello, World!';\n    start = 6;\n    length = length('World');\nenddeclare;\n\nworld_part = _Mid(original_string, start, length);\nmessage world_part; -- Output: 'World!'\n```\n_Mid function takes three parameters: the input string, starting position (zero-indexed), and the length of the substring. The function returns the requested substring.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "How to retrieve the current user's login name in Actian 4GL OpenROAD using a global procedure from the Core Library?",
        "input": "We are working on a script that needs to know the current user's login name. How can we achieve this?",
        "output": "To obtain the current user's login name, use the _User function:\n```\ndeclare\n    current_user = '';\nenddeclare;\n\ncurrent_user = _User();\nmessage 'Current user: ', current_user;\n```\nThe _User function returns a string containing the current user's login name. This function is very helpful for personalizing scripts or generating logs.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Show an example of sorting an array using the _SortArray procedure in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "Given the following unsorted integer array `my_array` containing the values [5, 2, 7, 3, 1]:\n```\ndeclare\n    my_array = int[5];\nenddeclare;\n\nmy_array[1] = 5;\nmy_array[2] = 2;\nmy_array[3] = 7;\nmy_array[4] = 3;\nmy_array[5] = 1;\n```",
        "output": "Here's an example of using _SortArray to sort the given array:\n```\ndeclare\n    my_array = int[5];\nenddeclare;\n\nmy_array[1] = 5;\nmy_array[2] = 2;\nmy_array[3] = 7;\nmy_array[4] = 3;\nmy_array[5] = 1;\n\n_SortArray(array = my_array);\n\n-- The sorted array `my_array` is now [1, 2, 3, 5, 7].\n```\nIn Actian 4GL OpenROAD Global Procedures, you can use _SortArray to sort an array in ascending order.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Explain how to perform a case-insensitive search for substrings within a string using the _StrInstr function in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "Search for the substring \"example\" (case insensitive) within the string `my_string` which contains: \"ExAMPLe\".",
        "output": "Here's how to perform a case-insensitive search using _StrInstr:\n```\ndeclare\n    my_string = char(50);\nenddeclare;\n\nmy_string = 'ExAMPLe';\n\n-- Search for the substring \"example\" (case insensitive).\npos = _StrInstr(string1 = my_string, string2 = 'example', match_type = 2);\n\n-- If pos contains a non-zero value, then the substring was found.\nif (pos > 0) then\n    write('The substring \"example\" is found at position: ', pos);\nelse\n    write('The substring \"example\" was not found.');\nend if;\n```\nIn Actian 4GL OpenROAD Global Procedures, use _StrInstr with a match_type parameter of 2 to perform case-insensitive string searching.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Demonstrate an example of using the _FormatCurrency global procedure in Actian 4GL OpenROAD Global Procedures Available in the Core Library to format a numeric value as currency.",
        "input": "An application requires users to input costs for items they want to purchase in dollars and cents, but only wants to display the formatted currency to them.",
        "output": "Here's an example of using _FormatCurrency:\n```\ndeclare\n    cost = numeric(8,2);\nenddeclare\n\ncost = 123456.78; -- The user has inputted a value for a cost\ndisplay _FormatCurrency(numericValue=cost, currencyCode='USD');\n-- Displays: $123,456.78\n```\nThe `_FormatCurrency` procedure formats a numeric value as the specified currency type with the provided number of decimal places.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Show an example of using the _InRange global procedure to check if a numerical value is within a specified range in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "A banking system wants to verify that deposits are between $500 and $10,000 before accepting them. An incoming deposit is `deposit`.",
        "output": "Here's an example of using _InRange:\n```\ndeclare\n    deposit = numeric(8,2);\nenddeclare\n\n-- Assume the deposit value has been stored in the variable `deposit`.\nif _InRange(value=deposit, startValue=500.00, endValue=10000.00) then\n    -- The deposit is within the acceptable range. Accept it!\nend if;\n```\nThe `_InRange` procedure checks whether a value lies between two specified values (inclusive). This can be used for validation purposes:\n```\n_InRange(value, startValue, endValue)\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Write code to use _TimeDiff in Actian 4GL OpenROAD Global Procedures Available in the Core Library to calculate the difference between two date and time values.",
        "input": "A user has entered a start_date and an end_date, and you need to determine the duration between them both.",
        "output": "Here's an example of using _TimeDiff:\n```\ndeclare\n    start_time = datetime;\n    end_time = datetime;\nenddeclare\n\nstart_time = '2023-03-18 14:30:00'; -- The user has inputted a start date and time\nend_time = '2023-03-19 08:00:00'; -- The user has inputted an end date and time\nduration = _TimeDiff(date1=start_time, date2=end_time);\n\nmessage 'Duration between start_time and end_time is: ' || duration;\n-- Output:\n-- Duration between start_time and end_time is: 30 hours 0 minutes 0 seconds\n```\nThe `_TimeDiff` procedure calculates the time difference (in days, hours, minutes or seconds) between two specified date-time values.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Explain how to use _StringUpper and _StringLower in Actian 4GL OpenROAD Global Procedures Available in the Core Library for case conversion of text strings.",
        "input": "",
        "output": "Here's an explanation on using `_StringUpper` and `_StringLower` for case conversion:\n```\ndeclare\n    text = varchar(2000);\nenddeclare\n\ntext = 'This is a test'; -- A mixed-case string\n\nupperText = _StringUpper(string = text);\nlowerText = _StringLower(string = text);\n\nmessage 'Uppercase text: ' || upperText;\nmessage 'Lowercase text: ' || lowerText;\n-- Output:\n-- Uppercase text: THIS IS A TEST\n-- Lowercase text: this is a test\n```\nThe `_StringUpper` procedure converts all characters within the input string to uppercase. The `_StringLower` procedure converts all characters within the input string to lowercase.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Explain how to use _CalcSum global procedure in Actian 4GL OpenROAD Global Procedures Available in the Core Library to sum a set of numbers.",
        "input": "A store is tracking daily sales data and has stored the sales values in an array called `daily_sales`. How can we find the total sales using _CalcSum?",
        "output": "To calculate the total sales, use _CalcSum:\n```\ndeclare\n    daily_sales = integer[7];\nenddeclare\n\n-- Assuming the following daily_sales array contains the following data: [5000, 4500, 6000, 3000, 4200, 5500, 6500]\ndaily_sales = [5000, 4500, 6000, 3000, 4200, 5500, 6500];\ntotal_sales = _CalcSum(numbers = daily_sales);\n\n-- The variable `total_sales` now contains the total sales: 27700\n```\nUse _CalcSum to add a set of numbers in an array.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "How do I use _Round global procedure in Actian 4GL OpenROAD Global Procedures Available in the Core Library to round a floating-point number?",
        "input": "In a banking application, we want to format the account balance to two decimal places when displaying it to users. How can we use _Round for this purpose?",
        "output": "To round a floating-point number to 2 decimal places:\n```\ndeclare\n    account_balance = numeric(17, 4);\nenddeclare\n\n-- Let's assume the variable `account_balance` contains 356.5048\nrounded_balance = _Round(_RoundDown(account_balance * 100) / 100);\n\n-- The rounded_balance now contains 356.50 (2 decimal places)\n```\nUse _Round to round a floating-point number to a specific number of decimal places in Actian 4GL OpenROAD.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Describe how to use the _FormatNumber global procedure to format numbers in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "The company has a policy of displaying dollar amounts with two decimal places and a thousand separator (,). Format the amount `2500.17` accordingly.",
        "output": "Here's an example of how to use _FormatNumber to format numbers with two decimal places and a thousand separator:\n```\ndeclare\n    amount = numeric(10,2);\n    formatted_amount = varchar(20);\nenddeclare\n\n-- Set the amount\namount = 2500.17;\n\n-- Format the amount\nformatted_amount = _FormatNumber(number = amount, grouping_symbol = ',', decimal_separator = '.') ;\n\n-- Output the formatted amount\nmessage 'Formatted amount: ' || formatted_amount;\n```\nThe output will be:\n```\nFormatted amount: 2,500.17\n```\n_FormatNumber is a handy tool for formatting numbers consistently.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Explain how to use the _Mod global procedure to perform modulo operation in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "Write a code snippet that checks if a number is odd or even using _Mod.",
        "output": "Here's an example of how to determine if a number is odd or even using _Mod:\n```\ndeclare\n    num = integer;\nenddeclare\n\nnum = 5;\nmessage 'Number ' || num || ' is ';\nif ( num % 2 = 0 ) then\n    message 'even';\nelse\n    message 'odd';\nend if;\n```\nThe output will be:\n```\nNumber 5 is odd\n```\n_Mod can help in determining whether a number is even or odd.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Create a procedure to calculate the total cost of shipping for multiple packages in Actian 4GL OpenROAD Global Procedures Available in the Core Library.",
        "input": "Suppose each package weighs between 1 and 20 kg, and the shipping rate is $2 per kg. The variable `num_packages` contains the number of packages, and the variable `weights` contains an array of weights for each package.",
        "output": "Here's a sample procedure for calculating the total shipping cost:\n```\ndeclare\n    var num_packages : integer;\n    var weights   : array[1..50] of real;\nenddeclare\n\nprocedure CalculateShippingCost(inout num_packages, inweights);\nbegin\n    declare variable totalCost as real;\n    totalCost = 0.0;\n\n    for i = 1 to length(weights) do\n        totalCost += weights(i) * 2.0;\n    end for;\n\n    -- optionally add error handling, such as checking if num_packages and weights have valid values\n\nendprocedure CalculateShippingCost;\n```\nIn this example, we created a `CalculateShippingCost` procedure that calculates the total shipping cost based on the number of packages and their weights.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Implement _HashTable_GetNext in Actian 4GL OpenROAD Global Procedures Available in the Core Library to retrieve the next key-value pair from a hashtable.",
        "input": "A developer has created a hashtable named `my_hash` with the keys \"apple\", \"banana\", and \"cherry\" and their corresponding values as \"12345\", \"23456\", and \"34567\". The variable `currentKey` stores the current key to be accessed.",
        "output": "To iterate through the hashtable and retrieve the next key-value pair, use _HashTable_GetNext function:\n```\ndeclare\n    var my_hash   : hash;\n    var currentKey  : char;\nenddeclare\n\n-- Initialize the hashtable with keys \"apple\", \"banana\", and \"cherry\"\ncreate hashtable my_hash using dictionary;\nmy_hash.put('apple', '12345');\nmy_hash.put('banana', '23456');\nmy_hash.put('cherry', '34567');\n\n-- Set the current key to \"apple\"\ncurrentKey = 'apple';\n\n-- Loop through the hashtable and retrieve the next key-value pair after \"apple\"\ndeclare variable next_key   : char;\ndeclare variable next_value : char;\nloop\n    if _HashTable_GetNext(my_hash, currentKey) then\n        next_key = _HashTable_GetName(my_hash);\n        next_value = my_hash.getValue(next_key);\n        -- Perform an action using the retrieved key-value pair\n\n        -- Update the current key for the next iteration\n        currentKey = next_key;\n    else\n        exit loop; -- no more keys to iterate through\n    end if;\nend loop;\n```\nThis example demonstrates how to use _HashTable_GetNext and related functions to retrieve the next key-value pair from a hashtable in Actian 4GL OpenROAD.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Illustrate the implementation of the _GetTimeZone procedure in Actian 4GL OpenROAD Global Procedures Available in the Core Library. This procedure returns the current timezone offset as an integer (e.g., +05:30) in minutes from Greenwich Mean Time.",
        "input": "The user is located in New York, USA with a timezone of \"America/New_York\". What should be the output for _GetTimeZone when run at 12:00 PM?",
        "output": "Here's how to get the current timezone offset using _GetTimeZone:\n```\ndeclare\n    timezone_offset = integer;\nenddeclare\n\ntimezone_offset = _GetTimeZone();\n\n-- The variable `timezone_offset` now contains +0400 which is the timezone offset for New York, USA (America/New_York). When it's 12:00 PM local time, the actual offset can be expressed as +05:00. This happens due to Daylight Saving Time during certain months in the year.\n```\nBe careful when using _GetTimeZone as it only provides the basic timezone offset and does not account for Daylight Saving Time adjustments.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    },
    {
        "instruction": "Explain how to use the _StringConcatenate global procedure in Actian 4GL OpenROAD Global Procedures Available in the Core Library. This function combines multiple strings into a single string with optional delimiters between them.",
        "input": "You have four variables containing strings: `str1`, `str2`, `str3`, and `str4`. Use _StringConcatenate to concatenate these strings, adding the '|' symbol as a delimiter between each string. For example: \"Hello\" || '|' || \"World\" = \"Hello|World\".",
        "output": "Here's how to use _StringConcatenate with optional delimiters:\n```\ndeclare\n    str1 = varchar(50);\n    str2 = varchar(50);\n    str3 = varchar(50);\n    str4 = varchar(50);\n    concatenated_string = varchar(200);\nenddeclare\n\n-- Assign each string a value\nstr1 = 'Hello';\nstr2 = 'World';\nstr3 = 'User';\nstr4 = 'Data';\n\nconcatenated_string = _StringConcatenate(string_list = ( str1, str2, str3, str4 ), delimiter = '|');\n\n-- The variable `concatenated_string` now contains \"Hello|World|User|Data\"\n```\nYou can use _StringConcatenate to combine multiple strings into a single string with optional delimiters.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures_available_in_the_core_library",
        "task_description": "Use Global Procedures from the Core Library in OpenROAD Actian 4GL",
        "document": null
    }
]
[
    {
        "instruction": "Can you provide an example for the use of _StringParseKeyword procedure?",
        "input": "",
        "output": "Yes! Here's an example:\n```4gl\nstr1 = 'Name=John Doe; Address=101 California, USA';\nvalue=_StringParseKeyword(string = str1, keyword = 'address');\n```\nIn this example, the value of the `address` is \"101 California, USA\".",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "What is the maximum number of arguments that can be passed to _StringSub procedure?",
        "input": "",
        "output": "The _StringSub procedure can handle up to 9 parameters embedded in a formatted string. If more than 9 occurrences are needed, multiple calls with separate invocations may be necessary.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "What is the difference between _StringParseKeyword and _StringTokenSub procedures?",
        "input": "",
        "output": "The difference between the _StringParseKeyword and _StringTokenSub procedures lies in what they do: The _StringParseKeyword procedure returns the value of a specified keyword, while the _StringTokenSub procedure substitutes a value for a specified token in a string.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "What is the role of the _StringParseKeyword procedure?",
        "input": "",
        "output": "The _StringParseKeyword procedure returns the value of a specified keyword in a specially formatted string. The search for the keyword is not case sensitive and trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Explain the functionality of _StringTokenSub procedure with an example.",
        "input": "",
        "output": "The _StringTokenSub procedure substitutes a value for a specified token in a string. The syntax for this procedure is:\n```4gl\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\nThe following example shows how to use the _StringTokenSub procedure:\n```4gl\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)',  token = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\nThis example returns \"Employee Name: Jane Doe, Address: 101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of 'John Doe' in the substituted string.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Describe the usage and syntax for _StringTokenSub procedure.",
        "input": "",
        "output": "The _StringTokenSub procedure is used to substitute a value for a specified token in a string. Its syntax is: varchar(2000) =_StringTokenSub(string=varchar(2000), token=varchar(256), replacewith=varchar(256) [remainingtokens=byref(integer)]). The optional remainingtokens argument returns the number of occurrences of tokens that remain in the string after substitution.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Explain how does _StringParseKeyword procedure handle keywords?",
        "input": "",
        "output": "The _StringParseKeyword procedure searches for a keyword in a specially formatted string (i.e., \"keyword1=value1[;keyword2=value2]\") and returns the value of the specified keyword. It is not case sensitive, and trailing white space on the keyword is trimmed before the search begins. If either the string or the keyword argument is empty, it returns an empty string.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Provide an example for using _StringSub procedure.",
        "input": "",
        "output": "Here's an example for using the `_StringSub` procedure:\n```4gl\nstr1 = _StringSub(string = 'Employee Name:%1, Address:%2(c/o %1)', arg1 = 'John Doe', arg2 ='101 California, USA');\n```\nThis example returns \"Employee Name: John Doe, Address: 101 California, USA (c/o John Doe)\".",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "What is the format for a string that _StringParseKeyword procedure processes?",
        "input": "",
        "output": "The _StringParseKeyword procedure handles strings with the following format:\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\nThe equal sign separates a keyword from its value. The semicolon is used to separate values and the last value does not have to end with a semicolon. There's no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. Leading and embedded white space is retained, but trailing white space on *keyword* is trimmed before the search begins.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "What is the format of a string that can be used with _StringSub?",
        "input": "",
        "output": "The format for a string that can be used with _StringSub must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "What is the difference between the _StringSub procedure and the _StringTokenSub procedure?",
        "input": "",
        "output": "The main difference between the _StringSub procedure and the _StringTokenSub procedure lies in what they replace within a string. The _StringSub procedure substitutes values for parameters, while the _StringTokenSub procedure replaces a specified token with another value.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Describe the format of a string passed to _StringParseKeyword procedure.",
        "input": "",
        "output": "The format for a string passed to the `_StringParseKeyword` procedure is:\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "What is the purpose of using the _StringParseKeyword procedure?",
        "input": "",
        "output": "The `_StringParseKeyword` procedure returns the value of the specified keyword in a specially formatted string. This can be useful when you need to extract specific values from a string that follows a predefined format, without having to manually parse the string yourself.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Provide an example of how to use the _StringParseKeyword procedure and explain the output.",
        "input": "",
        "output": "An example of using the _StringParseKeyword procedure is as follows:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1,\n                keyword = 'address');\n```\n\nIn this example, the _StringParseKeyword procedure is used to extract the value of the \"address\" keyword from the string. The output will be \"101 California, USA\".",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Write a code snippet that demonstrates how to use the _StringSub procedure and explain the output.",
        "input": "",
        "output": "Here is an example of using the _StringSub procedure:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1,  Address:%2(c/o %1)', arg1 = 'John Doe',\n                   arg2 ='101 California, USA');\n```\nIn this example, the _StringSub procedure is used to replace the placeholders \"%1\" and \"%2\" with \"John Doe\" and \"101 California, USA\", respectively. The output will be \"Employee Name: John Doe, Address: 101 California, USA (c/o John Doe)\".",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Explain how to use the `_StringSub` procedure with an example.",
        "input": "",
        "output": "The syntax for the `_StringSub` procedure is as follows:\n```4gl\nvarchar(2000) = _StringSub(string=varchar(2000), arg1=varchar(100), arg2=varchar(100), arg3=varchar(100), arg4=varchar(100), arg5=varchar(100), arg6=varchar(100), arg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\nFor example:\n```4gl\nstr1 = _StringSub(string = 'Employee Name:%1,  Address:%2(c/o %1)', arg1 = 'John Doe', arg2 ='101 California, USA');\n```\nIn this example, the `_StringSub` procedure is used to substitute `'John Doe'` for `%1`, and `'101 California, USA'` for `%2`. The output will be \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Provide an example of how the `_StringTokenSub` procedure works and explain the output.",
        "input": "",
        "output": "The syntax for the `_StringTokenSub` procedure is:\n```4gl\nvarchar(2000) =_StringTokenSub(string=varchar(2000), token=varchar(256), replacewith=varchar(256) [remainingtokens=byref(integer)]);\n```\nFor example:\n```4gl\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', token = 'John Doe', replacewith='Jane Doe' );\n```\nIn this example, the `_StringTokenSub` procedure is used to substitute the first occurrence of `'John Doe'` with `'Jane Doe'`. The output will be \"Employee Name: Jane Doe, Address: 101 California, USA (c/o John Doe)\".",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Describe the purpose of _StringTokenSub procedure.",
        "input": "",
        "output": "The `_StringTokenSub` procedure is used to replace a specific token (keyword/value) in a string with a new value. This allows for dynamic substitution of values in strings. Here's an example:\n```4gl\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', token = 'John Doe', replacewith='Jane Doe');\n```\nThis example replaces the token \"John Doe\" with \"Jane Doe\", and returns \"Employee Name: Jane Doe, Address: 101 California, USA (c/o John Doe)\".",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "What is the format of the string for _StringParseKeyword procedure?",
        "input": "",
        "output": "For the `_StringParseKeyword` procedure, the string should be formatted as follows:\n```sql\n\"keyword1=value1[;keyword2=value2]\"\n```\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Can you give an example of how to use _StringSub procedure in Actian 4GL SQL?",
        "input": "",
        "output": "Yes! Here's an example of using the _StringSub procedure:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1,  Address:%2(c/o %1)', arg1 = 'John Doe', arg2 ='101 California, USA');\n```\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\"",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "What is the difference between _StringSub and _StringTokenSub procedures?",
        "input": "",
        "output": "The main difference between _StringSub and _StringTokenSub procedures is that _StringSub substitutes values for parameters embedded in a string, while _StringTokenSub replaces a specific token within a string with a new value. Another key difference is that the syntax for _StringTokenSub procedure has an optional argument remainingtokens, which allows you to determine how many occurrences of tokens remain in the string after the substitution.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Write a question to ask about the difference between _StringSub and _StringTokenSub procedures in Actian 4GL SQL.",
        "input": "",
        "output": "What are the key differences between the _StringSub and _StringTokenSub procedures in Actian 4GL SQL, and under what circumstances might one procedure be more suitable than the other?",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Provide a sample usage of `_StringSub` procedure.",
        "input": "",
        "output": "Here's an example usage of the _StringSub procedure:\n```4gl\nstr1 = _StringSub(string = 'Employee Name:%1, Address:%2(c/o %1)', arg1 = 'John Doe', arg2 ='101 California, USA');\n```\nThis example substitutes the values \"%1\" and \"%2\" in the string \"Employee Name:%1, Address:%2(c/o %1)\" with the values \"John Doe\" and \"101 California, USA\", respectively. The output string is:\n```\nEmployee Name:John Doe, Address:101 California, USA (c/o John Doe)\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "What are the arguments in the _StringParseKeyword procedure and what do they represent?",
        "input": "",
        "output": "The `_StringParseKeyword` procedure accepts two arguments: the first one is a string variable that contains a specially formatted string with keyword-value pairs separated by an equal sign and semicolon. The second argument is a keyword, for which the value will be retrieved from the string. Here's an example of the syntax for this procedure:\n```4gl\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), keyword = varchar(32));\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Give an example of the usage of the _StringParseKeyword procedure with a sample string and keyword.",
        "input": "",
        "output": "```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1,\n                keyword = 'address');\n```\nThe example above uses the `_StringParseKeyword` procedure to find and return the address from a given string. In this case, it returns \"101 California, USA\".",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    },
    {
        "instruction": "Provide an example of the _StringSub procedure with sample strings and arguments.",
        "input": "",
        "output": "Here's an example for the `_StringSub` procedure:\n```\nstr1 = _StringSub(string = 'Employee Name:%1,\n    Address:%2(c/o %1)', arg1 = 'John Doe',\n    arg2 ='101 California, USA');\n```\nThe example above uses the `_StringSub` procedure to replace the parameters in a given string with their respective values. In this case, it returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->global_procedures_available_in_the_core_library",
        "task_description": "Explain the global procedures available in the core library for Actian 4GL SQL.",
        "document": [
            "# Global Procedures Available in the Core Library\n\nThe following global procedures are available in the core library:\n\n- **_StringParseKeyword**: Returns the values of the specified keyword\n- **_StringSub**: Substitutes values for %parameters in a string\n- **_StringTokenSub**: Substitutes a value for a single token in a string. Only the first occurrence of the token is replaced.\n\nThe following sections describe these procedures.\n\n## The _StringParseKeyword Procedure\n\nThe _StringParseKeyword procedure returns the value of the specified keyword in a specially formatted string. This string's format is:\n\n```\n\"keyword1=value1[;keyword2=value2]\"\n```\n\nThe equal sign separates a keyword from its value. The semicolon must be used to separate the end of a value from the next keyword. There is no space allowed before or after the equal sign. Everything between the semicolon (or the beginning of the string) and the equal sign is treated as part of the keyword. The last value does not have to end with the semicolon. If a value has trailing white space, it will be trimmed. Leading and embedded white space is retained.\n\nThe search for the keyword is not case sensitive. Trailing white space on *keyword* is trimmed before the search begins. If the keyword is found, its value is returned. If either the string or the keyword argument is empty, an empty string is returned.\n\nExample syntax for the _StringParseKeyword procedure is:\n\n```\nvarchar(2000) = _StringParseKeyword(string = varchar(2000), \n           keyword = varchar(32);)\n```\n\nThe following is an example of how to use the _StringParseKeyword procedure to find the value of a keyword:\n\n```\nstr1 = 'Name=John Doe;\nAddress=101 California, USA'; \nvalue=_StringParseKeyword(string = str1, \n                keyword = 'address');\n```\n\nThis example returns the string \"101 California, USA\".\n\n## The _StringSub Procedure\n\nThis procedure substitutes values for parameters that are embedded in a specially formatted string. It also substitutes \"\\t\" with HC_TAB, and \"\\n\" with HC_NEWLINE.\n\nThe string must be a varchar string embedded with parameters in the format of \"%1\", \"%2\", and so forth, up to \"%9\", and \"\\t\" and \"\\n\". A parameter can occur multiple times in the string.\n\nThe syntax for the _StringSub procedure is:\n\n```\nvarchar(2000) = _StringSub(string=varchar(2000), \narg1=varchar(100), arg2=varchar(100), arg3=varchar(100), \narg4=varchar(100), arg5=varchar(100), arg6=varchar(100), \narg7=varchar(100), arg8=varchar(100), arg9=varchar(100));\n```\n\nThe following code is an example of this syntax:\n\n```\nstr1 = _StringSub(string = 'Employee Name:%1, \n    Address:%2(c/o %1)', arg1 = 'John Doe', \n    arg2 ='101 California, USA');\n```\n\nThis example returns \"Employee Name: John Doe, Address:101 California, USA (c/o John Doe)\".\n\n## The _StringTokenSub Procedure\n\nThis procedure substitutes a value for the specified token in a string. The syntax for this procedure is:\n\n```\nvarchar(2000) =_StringTokenSub(string=varchar(2000),\n              token=varchar(256),\n              replacewith=varchar(256)\n              [remainingtokens=byref(integer)]);\n```\n\nThe optional argument remainingtokens, if specified, is set to the number of occurrences of tokens that remain in the string after the substitution.\n\nThe following example shows how to use the _StringTokenSub procedure:\n\n```\nstr1 = _StringTokenSub(string='Employee Name:John Doe, Address: 101 California, USA (c/o John Doe)', \ntoken = 'John Doe', replacewith='Jane Doe', remaingtoken=byref(icount));\n```\n\nThis example returns \"Employee Name:Jane Doe, Address:101 California, USA (c/o John Doe)\". The icount variable contains 1, indicating that there is one more occurrence of John Doe in the substituted string."
        ]
    }
]
[
    {
        "instruction": "How to pass parameters to a local procedure in Actian 4GL OpenROAD Local Procedures?",
        "input": "Write a local procedure that takes two input parameters and returns their sum as a result.",
        "output": "Pass parameters to a local procedure:\n```\ndeclare\n    add = procedure returning integer;\nenddeclare\n\nprocedure add(x = integer, y = integer) =\nbegin\n    return x + y;\nend\n\n-- Usage\nresult = callproc add(2, 3);\nmessage 'The sum of the two numbers is: ' || char(result);\n```\nThis local procedure takes two input parameters and returns their sum as a result. The example demonstrates its usage with 2 and 3 as input arguments.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "How to handle exceptions in a local procedure in Actian 4GL OpenROAD Local Procedures?",
        "input": "Write a local procedure that calculates the square root of an integer number, handles division by zero exception, and returns the calculated square root if no errors occur.",
        "output": "Handle exceptions in a local procedure:\n```\ndeclare\n    sqrt = procedure returning real;\nenddeclare\n\nprocedure sqrt(n = real) =\nbegin\n    let result = 0;\n    if n <= 0 then\n        raise 'Error: Cannot calculate square root for a non-positive number';\n    endif;\n    repeat\n        let delta_result = (result + n / result) * 2;\n        let result = result + delta_result / 2;\n    until abs(delta_result) <= 0.0001;\n    message 'The square root of the given number is: ' || char(result);\nend\n\n-- Usage\ncallproc sqrt(4);\ncallproc sqrt(16);\n```\nThis local procedure calculates the square root of a real number, handles the division by zero exception and returns the calculated square root if no errors occur. The example demonstrates its usage with 4 and 16 as input arguments.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL code to create a custom date function within a local procedure that adds 25 days to the given date.",
        "input": "input_date = '2022-12-01';",
        "output": "Create a custom date function:\n```\ndeclare\n    add_days = procedure returning date;\nenddeclare\n\nprocedure add_days(days_to_add = integer) =\nbegin\n    if days_to_add < 0 then\n        message 'Error: Negative number of days';\n        return null;\n    endif;\n\n    set today to current date;\n    today += days_to_add * 7; -- Assumes 1 week has 7 days\n    today = today + (today - extract(day from today));\nend;\n\n-- Usage:\nresult = add_days(25);\nmessage 'Resulting date: ' + format(result, 'YYYY-MM-DD');\n```\nThis procedure adds the given number of days to a date and returns the resulting date.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL code within a local procedure to calculate the sum of two arrays passed as parameters.",
        "input": "array1 = {1, 2, 3};\narray2 = {4, 5, 6};",
        "output": "Create a local procedure for calculating the sum of two given arrays:\n```\ndeclare\n    calculate_sum_of_arrays = procedure returning float8;\nenddeclare\n\nprocedure calculate_sum_of_arrays(input_array1 = array, input_array2 = array) =\nbegin\n    declare i = 1, sum = 0;\n    loop while i <= length(input_array1);\n        if i <= length(input_array2) then\n            -- Add corresponding elements of the arrays\n            set sum to sum + input_array1[i] + input_array2[i];\n        else\n            -- Add only remaining elements of the first array\n            set sum to sum + input_array1[i];\n        endif;\n        set i = i + 1;\n    end loop;\nend;\n-- Usage:\nsum = calculate_sum_of_arrays(array1, array2);\nmessage 'Sum of arrays: ' + format(sum, ',.2f');\n```\nThis procedure calculates the sum of two given arrays by iterating through their elements and adding them up.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "How to define a local procedure with an input and output cursor in Actian 4GL OpenROAD Local Procedures?",
        "input": "employees_cursor = declare cursor for select * from employees;\nemployee_data_output_cursor = declare cursor;",
        "output": "Define a local procedure that takes an input cursor and returns an output cursor with employee data:\n```\ndeclare\n    get_employee_data = procedure returning cursor;\nenddeclare\n\nprocedure get_employee_data(input_cursor = cursor) =\nbegin\n    declare result_employees = table();\n    -- Fetch employee records from the input cursor and store them in a table\n    loop while fetch next row from input_cursor into :id, :name, :department;\n        insert values (:id, :name, :department) into result_employees;\n    end loop;\n\n    -- Create an output cursor and return it with the employee data\n    declare employee_data_output = cursor for select * from result_employees;\n    return employee_data_output;\nend;\n-- Usage:\nemployee_data_output_cursor = get_employee_data(employees_cursor);\n```\nThis procedure takes an input cursor containing employee records, processes them, and returns an output cursor with the processed data.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL code within a local procedure to sort an array of integers passed as a parameter using selection sort algorithm.",
        "input": "array = {5, 3, 8, 9, 2};",
        "output": "Create a local procedure for sorting an integer array using the selection sort algorithm:\n```\ndeclare\n    sort_array = procedure returning array;\nenddeclare\n\nprocedure sort_array(input_array = array) =\nbegin\n    declare i, smallest, temp;\n    loop while length(input_array) > 1;\n        set i to 0;\n        set smallest to input_array[0];\n        loop while i < length(input_array);\n            if input_array[i] < smallest then\n                set smallest to input_array[i];\n                set small_index to i;\n            endif;\n            set i to i + 1;\n        end loop;\n        -- Swap the minimum element with the first element of the array\n        set temp to input_array[0];\n        set input_array[0] to smallest;\n        set input_array[small_index] to temp;\n        -- Remove the smallest element from the rest of the array\n        delete i - 1 from input_array starting at 1;\n    end loop;\nend;\n-- Usage:\nsorted_array = sort_array(array);\nmessage 'Sorted Array: ' + join(sorted_array, ', ');\n```\nThis procedure sorts an integer array using the selection sort algorithm by repeatedly finding and swapping the smallest unsorted element with the first unsorted element in the array.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure in Actian 4GL to read user input for their name and display a personalized greeting.",
        "input": "",
        "output": "```\ndeclare\n    get_name = procedure returning character;\n    personal_greeting = procedure;\nenddeclare\n\nprocedure get_name() =\nbegin\n    write 'What is your name? ';\n    read user input line name;\n    return name;\nend;\n\nprocedure personal_greeting(user_name = character) =\nbegin\n    message 'Hello, ' + user_name + '. It's nice to meet you.';\nend;\n\n-- Usage:\nuser_name = get_name(); -- Prompt the user for their name and store it\npersonal_greeting(user_name); -- Greet the user with their name\n```\nThis local procedure first prompts the user for their name, then greets them with a personalized message.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure to calculate the area of a rectangle in Actian 4GL using user-input values for its length and width.",
        "input": "length = 5; width = 10;",
        "output": "```\ndeclare\n    get_rectangle_area = procedure returning float8;\nenddeclare\n\nprocedure get_rectangle_area(length = float8, width = float8) =\nbegin\n    return length * width;\nend;\n\n-- Usage:\nresult = get_rectangle_area(5, 10); -- Calculate the area of a rectangle with length 5 and width 10\nmessage 'The area of the rectangle is: ' + format(result, '9.2');\n```\nThis local procedure takes user-provided values for the length and width of a rectangle and calculates its area using these dimensions.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure in Actian 4GL to reverse a string passed as a parameter.",
        "input": "original_string = \"Hello, World!\";",
        "output": "Create a local procedure for reversing the given string:\n```\ndeclare\n    reverse_string = procedure returning char(256);\nenddeclare\n\nprocedure reverse_string(input_string = char(256)) =\nbegin\n    declare i = 1, length = length(input_string), reversed_string = \"\";\n    loop while i <= length;\n        set reversed_string to reversed_string + substr(input_string, (length - i) + 1, 1);\n        set i = i + 1;\n    end loop;\nend;\n-- Usage:\nreversed_string = reverse_string(original_string);\nmessage 'Reversed string: ' + reversed_string;\n```\nThis local procedure takes a string and returns the reversed version of it.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure in Actian 4GL that sorts an array containing integers and returns the sorted array using a bubble sort algorithm.",
        "input": "array = {5, 2, 1, 3, 8};",
        "output": "Create a local procedure for sorting an integer array using bubble sort:\n```\ndeclare\n    bubble_sort_array = procedure returning array(1 to 100) of integer;\nenddeclare\n\nprocedure bubble_sort_array(input_array = array(1 to 100) of integer) =\nbegin\n    declare i = 1, j, temp;\n    loop while i < length(input_array);\n        loop while j <= (length(input_array) - i);\n            -- Swap elements if they are out of order\n            if input_array[j-1] > input_array[j] then\n                set temp to input_array[j];\n                set input_array[j] to input_array[j-1];\n                set input_array[j-1] to temp;\n            endif;\n            set j = j + 1;\n        end loop;\n        -- Move the inner loop one position to the right after each pass through the array\n        set i = i + 1;\n    end loop;\nend;\n-- Usage:\nsorted_array = bubble_sort_array(array);\nmessage 'Sorted array: [' + list_to_string(sorted_array, \", \") + ']';\n```\nThis local procedure sorts an integer array using the bubble sort algorithm.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure to validate an email address in Actian 4GL. Use regular expressions for better efficiency and accuracy.",
        "input": "email = 'example@gmail.com'",
        "output": "```\ndeclare\n    validate_email = procedure returning boolean;\nenddeclare\n\nprocedure validate_email(email = varchar(255)) =\nbegin\n    if regexp_search(email, '\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+', 1) then\n        return true;\n    else\n        return false;\n    endif;\nend;\n\n-- Usage:\nif validate_email('example@gmail.com') then\n    message 'Email is valid';\nelse\n    message 'Email is invalid';\nend if;\n```\nThis local procedure uses a regular expression to check if an email address is valid, and returns true or false accordingly.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure in Actian 4GL that retrieves the top 5 customers by sales amount from a table called 'SALES'. Sort the list in descending order.",
        "input": "",
        "output": "```\ndeclare\n    get_top_customers = procedure returning set of customer;\nenddeclare\n\nprocedure get_top_customers() =\nbegin\n    result = select distinct customer from sales\n        order by sales_amount descending\n        fetch first 5 rows only;\nend;\n\n-- Usage:\ncursor c = cursor for select * from get_top_customers();\nrepeat\n    read c into customer_record;\n    message 'Top Customer ID: ' + format(customer_record.customer_id, '9.0') + ' Name: ' + customer_record.customer_name;\nuntil (c.is_empty());\nclose cursor c;\n```\nThis local procedure retrieves the top 5 customers by sales amount from the table 'SALES' and returns a set of records containing their IDs and names.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure in Actian 4GL that calculates the total number of employees who work for more than 10 years at a company and returns this count as output.\n\nAssume that the table 'EMPLOYEE_INFO' contains information about each employee, including their hire date stored in the format 'DD-MON-YYYY'.",
        "input": "",
        "output": "```\ndeclare\n    total_tenured_employees = procedure returning integer;\nenddeclare\n\nprocedure total_tenured_employees() =\nbegin\n    declare\n        current_date = date 'now',\n        years_since_hire as duration,\n        hire_date as date;\n\n    -- Calculate the difference between the current year and the employee's hire year\n    set years_since_hire = (year(current_date) - year(extract_date(substr(employee_info.hire_date, 7, 4)))) * 365;\n    set hire_date = extract_date(employee_info.hire_date);\n\n    -- Calculate total tenured employees based on the condition that an employee has worked for more than 10 years\n    result = select count(*) from employee_info\n        where (years_since_hire > 10) and extract_month(employee_info.hire_date) <= month(current_date)\n            and extract_day(employee_info.hire_date) <= day(current_date);\nend;\n```\nThis local procedure calculates the total number of employees who have worked for more than 10 years at a company based on the 'EMPLOYEE\\_INFO' table with hire dates stored in the format 'DD-MON-YYYY'. It returns this count as output.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure in Actian 4GL that performs a search for products in a catalog using multiple filters (e.g., price range, category, brand). The user can specify these filters in the input.",
        "input": "search_filters = {'Price Range': [100, 500], 'Category': ['Electronics'], 'Brand': ['Samsung' ]};",
        "output": "```\ndeclare\n    products = procedure returning set of product;\nenddeclare\n\nprocedure search_products(search_filters = object) =\nbegin\n    declare filters as map(string, variant);\n    set filters = copy(search_filters);\n\n    -- Filter the products based on price range\n    if exists(filters['Price Range']) then\n        filter products using (product.price between filters['Price Range'].get(1) and filters['Price Range'].get(2));\n    endif;\n\n    -- Filter the products based on category\n    if exists(filters['Category']) then\n        filter products using (product.category in filters['Category']);\n    endif;\n\n    -- Filter the products based on brand\n    if exists(filters['Brand']) then\n        filter products using (product.brand = filters['Brand'].get_string());\n    endif;\nend;\n```\nThis local procedure performs a search for products in a catalog using multiple filters such as price range, category, and brand based on user input.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure in Actian 4GL to calculate the sales tax based on a subtotal and tax rate.",
        "input": "subtotal = 1250;\ntax_rate = 0.08;",
        "output": "```\ndeclare\n    calculate_sales_tax = procedure returning float8;\nenddeclare\n\nprocedure calculate_sales_tax(subtotal = float8, tax_rate = float8) =\nbegin\n    return subtotal * tax_rate;\nend\n```\nThis procedure calculates the sales tax based on a given subtotal and tax rate.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure in Actian 4GL to validate user input for a required field (e.g., ensure that a date entered is valid).",
        "input": "user_input_date = '2023-02-31';",
        "output": "```\ndeclare\n    validate_date = procedure returning boolean;\nenddeclare\n\nprocedure validate_date(date = datetime) =\nbegin\n    if (date >= now()) then\n        return false;\n    endif;\n\n    -- Validate day of the month\n    if (day(date) < 1 or day(date) > lastDayOfMonth(year(date), month(date))) then\n        return false;\n    endif;\n\n    return true;\nend;\n```\nThis procedure validates a given date by checking if it is within the current date and ensuring that the day of the month falls between 1 and the number of days in the specified month.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "How to create an if-else block within a local procedure in Actian 4GL OpenROAD Local Procedures?",
        "input": "",
        "output": "You can use the IF...THEN...ELSE statement to create an if-else block in a local procedure. Here's an example:\n```\ndeclare\n    determine_category = procedure returning char;\nenddeclare\n\nprocedure determine_category(age = number) =\nbegin\n    if age < 18 then\n        -- Return 'minor' if the person is below 18 years old.\n        set determine_category to 'minor';\n    else if age < 65 then\n        -- Return 'adult' for all ages between 18 and 64.\n        set determine_category to 'adult';\n    else\n        -- Return 'senior' if the person is 65 years old or more.\n        set determine_category to 'senior';\n    endif;\nend;\n-- Usage:\nmessage determine_category(21);\n```\nThis example creates a local procedure that determines a person\u2019s category based on their age, and returns either 'minor', 'adult', or 'senior'.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure in Actian 4GL to check whether a given string contains only digits or not.",
        "input": "input_string = \"123456\";",
        "output": "```\ndeclare\n    contains_only_digits = procedure returning boolean;\nenddeclare\n\nprocedure contains_only_digits(input_string = varchar) =\nbegin\n    -- Check each character in the string to determine if it's a digit. If there is an alphabetic character or any non-numeric character, return false.\n    for i = 1 to length(input_string) do\n        if input_string[i] < '0' or input_string[i] > '9' then\n            return false;\n        endif\n    endfor\n\n    -- If all characters in the string are digits, return true.\n    return true;\nend\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure in Actian 4GL to find the minimum value among several numbers passed as arguments.",
        "input": "num1 = 32, num2 = 65, num3 = 98;",
        "output": "```\ndeclare\n    min_value = procedure returning float8;\nenddeclare\n\nprocedure min_value(num1 = float8, num2 = float8, num3 = float8) =\nbegin\n    declare\n        smallest = float8;\n    enddeclare\n\n    -- Set the smallest value to the first number.\n    smallest = num1;\n\n    -- Compare each of the other numbers with the current smallest value and update it if necessary.\n    if num2 < smallest then\n        smallest = num2;\n    endif\n\n    if num3 < smallest then\n        smallest = num3;\n    endif\n\n    -- Return the smallest number.\n    return smallest;\nend\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure in Actian 4GL to find out if a given number is an even or odd number.",
        "input": "n = 5;",
        "output": "```\ndeclare\n    check_number = procedure returning text;\nenddeclare\n\nprocedure check_number(n = integer) =\nbegin\n    declare\n        result = text;\n    enddeclare\n\n    -- If the number is divisible by 2, it's an even number. Otherwise, it's odd.\n    if n mod 2 equals 0 then\n        result = \"Even\";\n    else\n        result = \"Odd\";\n    endif\n\n    return result;\nend\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure in Actian 4GL to check whether a given string is a palindrome (reads the same from left to right and from right to left).",
        "input": "palindrome_word = \"level\";",
        "output": "```\ndeclare\n    check_palindrome = procedure returning boolean;\nenddeclare\n\nprocedure check_palindrome(palindrome_word = text) =\nbegin\n    declare\n        length = length(palindrome_word),\n            reversed = text;\n    enddeclare\n\n    -- Reverse the input string and compare it with the original one.\n    for i from 1 to length do\n        reversed = substr(reversed, (length - i + 1), 1) + reversed;\n    endfor\n\n    return palindrome_word equals reversed;\nend\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure that deletes all records from a table 'CUSTOMERS' where the 'city' column contains a specified value. Use the 'delete' statement to delete multiple rows at once.",
        "input": "Delete all records from 'CUSTOMERS' where city = 'London'.",
        "output": "```\ndeclare\n    del_customers_by_city = procedure returning void;\nenddeclare\n\nprocedure del_customers_by_city(city = char) =\nbegin\n    delete from customers where city = city;\nend;\n\n-- Usage:\ncallproc del_customers_by_city('London');\n```\nThis local procedure deletes all records from the 'CUSTOMERS' table where the 'city' column contains the specified value. In this example, it deletes all records with London as city.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure that updates the 'email_address' of customers in the 'CUSTOMERS' table whose 'customer_id' matches a given input argument. Use the 'update' statement to update multiple rows at once.",
        "input": "Update customer_id = 123 with new email_address = '[john@example.com](mailto:john@example.com)'.",
        "output": "```\ndeclare\n    set_customer_email_by_id = procedure returning void;\nenddeclare\n\nprocedure set_customer_email_by_id(customer_id = integer, new_email = char) =\nbegin\n    update customers set email_address = new_email where customer_id = customer_id;\nend;\n\n-- Usage:\ncallproc set_customer_email_by_id(123, '[john@example.com](mailto:john@example.com)');\n```\nThis local procedure updates the 'email_address' of a customer in the 'CUSTOMERS' table whose 'customer_id' matches a given input argument. In this example, it updates the email address for customer_id 123 with the new email '[john@example.com](mailto:john@example.com)'.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure in Actian 4GL to find the sum of all numbers within an array containing integers and return the total using this local procedure.",
        "input": "arr = {1, 2, 3, 4, 5};",
        "output": "Create a local procedure to calculate the sum of integers in an array:\n```\ndeclare\n    total_sum = procedure returning integer;\nenddeclare\n\nprocedure total_sum(input_array = array(1 to 100) of integer) =\nbegin\n    declare sum, i = 0, 1;\n    loop while i <= length(input_array);\n        set sum to sum + input_array[i];\n        set i = i + 1;\n    end loop;\nend;\n-- Usage\ntotal = callproc total_sum(arr);\nmessage 'Total Sum: ' || char(total);\n```\nThis local procedure calculates the sum of integers in an array.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "How can you create a local procedure that generates a random integer within a specified range and returns this value?",
        "input": "",
        "output": "Create a local procedure to generate a random integer within a specified range:\n```\ndeclare\n    rand_int = procedure returning integer;\nenddeclare\n\nprocedure rand_int(min_val, max_val) =\nbegin\n    declare min_val, max_val, result;\n\n    if (max_val <= min_val) then\n        raise error 'Minimum value must be less than maximum value.';\n    endif;\n\n    set result to randomize('seed') + 1;\n    set result to round((result * (max_val - min_val)) + min_val);\nend;\n-- Usage\nrandom_num = callproc rand_int(min_val = 10, max_val = 25);\nmessage 'Random number between 10 and 25: ' || char(random_num);\n```\nThis local procedure generates a random integer within the specified range.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    }
]
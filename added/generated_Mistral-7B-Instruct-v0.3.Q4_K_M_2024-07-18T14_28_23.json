[
    {
        "instruction": "What is the syntax used to call a local procedure defined in Actian 4GL SQL?",
        "input": "",
        "output": "You can use the `callproc` statement to call a local procedure defined in Actian 4GL SQL. For example:\n```\ntax = callproc addtax (tax = taxpercent, price = costfield);\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Explain how to execute a local procedure in OpenROAD.",
        "input": "",
        "output": "To execute a local procedure in OpenROAD, use the callproc statement followed by the name of the procedure you want to execute:\n```\ncallproc procname ([parameterlist])\n```\nFor example, if you have a local procedure named `addtax`, you can call it with the following command:\n```\ncallproc addtax (tax = taxpercent, price = costfield)\n```\nThe order in which the parameters are specified need not match their order in the procedure definition as long as they have the same names.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Can a local procedure be called from another frame or procedure? If so, how?",
        "input": "",
        "output": "A local procedure can only be called within the frame or procedure in which it is defined. To call a local procedure from another frame or procedure, you would have to define that procedure globally instead of locally.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Explain the purpose of forward reference declaration for local procedures in OpenROAD.",
        "input": "",
        "output": "In OpenROAD, you must declare a forward reference before defining a local procedure. This is done by declaring the name of the procedure and its parameters in the `declare` block of the script where it will be defined later. The purpose of this declaration is to inform the compiler that the actual implementation of the procedure will follow later in the same script, so it can generate correct error messages if any problems are encountered before the definition.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What's an example of a local procedure in OpenROAD?",
        "input": "",
        "output": "Here is an example of a local procedure in OpenROAD:\n```\nprocedure addtax (tax=float8, price=float8) =\n{\n    return (price * tax);\n}\n```\nIn this example, the procedure is named `addtax`, it has two parameters: `tax` and `price`, both with data type `float8`. The purpose of the procedure is to calculate the tax amount based on a given price.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What is the syntax for defining local procedures in OpenROAD?",
        "input": "",
        "output": "The syntax for defining a local procedure in OpenROAD is as follows:\n```\nprocedure procname [([parameterlist])] =\n[declare\n    localvariablelist\n[enddeclare]]\nbegin\n    statementlist\nend\n[;]\n```\nThe `procedure` keyword signifies the start of a procedure definition. The `procname` is the name you give to your procedure, and the parameter list (optional) specifies the input parameters for the procedure. The `declare` block allows you to initialize local variables for use within the procedure. The `statementlist` contains the code that will be executed when the procedure is called. Finally, the semicolon at the end of the procedure definition is optional but recommended for clarity and readability.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Write an example of a local procedure in OpenROAD.",
        "input": "",
        "output": "Here's an example of a local procedure definition:\n```\nprocedure addtax (tax=float8, price=float8) =\n{\n    return (price * tax);\n}\n```\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`, which are both of type `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Explain the difference between declaring forward references and defining local procedures in OpenROAD.",
        "input": "",
        "output": "Declaring a forward reference for a local procedure in OpenROAD means that you are announcing the intention to create a local procedure with a specific name before you actually define it. This is necessary because local procedures are defined within the script where they are called, and therefore need to be declared before they can be used. Defining a local procedure involves providing the actual code for the procedure, using the provided syntax.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Explain how to define a local procedure in Actian 4GL SQL.",
        "input": "",
        "output": "To define a local procedure in Actian 4GL SQL, use the following syntax:\n```\nprocedure procname [([parameterlist])] =\n[declare\n    localvariablelist\n[enddeclare]]\nbegin\n    statementlist\nend\n[;]\n```\nHere, `procname` is the name of the procedure, and `parameterlist` is an optional list of parameters with their data types. If no parameters are required, leave the brackets empty. The `localvariablelist` contains a list of local variables to be used within the procedure, defined before executing the main body of the code using the `declare` statement. Finally, `statementlist` is a collection of SQL statements or 4GL commands that will be executed when the procedure is called.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What is the format for declaring forward references for local procedures?",
        "input": "",
        "output": "You can declare a local procedure forward reference using one of the following formats: `localprocname = procedure returning typeofreturnvalue`, `localprocname = procedure returning none`, or `localprocname = procedure`. The `procedure returning none` and the `procedure` formats are equivalent, specifying that the procedure does not return a value.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What is the syntax for defining a local procedure in Actian 4GL SQL?",
        "input": "",
        "output": "Use the following syntax to define a local procedure:\n```\nprocedure procname [([parameterlist])] =\n[declare\n    localvariablelist\n[enddeclare]]\nbegin\n    statementlist\nend\n[;]\n```\nFor more information about the `parameterlist`, see Procedure Statement, and for more information about the declare block, see Initialize Statement.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What are the three ways to declare the forward reference for a local procedure in Actian 4GL SQL?",
        "input": "",
        "output": "In Actian 4GL SQL, you can use one of the following formats when declaring the local procedure forward reference:\n1. `localprocname = procedure returning typeofreturnvalue`\n2. `localprocname = procedure returning none`\n3. `localprocname = procedure`\n\nThe `procedure returning none` and the `procedure` formats are equivalent, specifying that the procedure does not return a value.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Can you explain what a forward reference is in the context of local procedures in OpenROAD?",
        "input": "",
        "output": "In the context of local procedures in OpenROAD, a forward reference is a declaration that informs the system about a procedure to be defined later in the script. This allows the system to know about the existence and structure of the procedure before it is actually defined, enabling it to be called when needed. The forward reference should be made using one of these formats:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nFor example, if you are defining a local procedure `addtax`, the forward reference could be declared as follows:\n```\naddtax = procedure returning none;\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Describe the syntax for defining a local procedure in OpenROAD.",
        "input": "",
        "output": "A local procedure can be defined using the following syntax:\n\n```\nprocedure procname [([parameterlist])] =\n[declare\n    localvariablelist\n[enddeclare]]\nbegin  statements end\n[;]\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Write a script to call the local procedure `addtax` defined in the previous example using two different parameter orderings.",
        "input": "",
        "output": "Here's an example of calling the `addtax` procedure with different parameter orderings:\n```\ndeclare\n    taxPercent float8,\n    costField float8;\nbegin\n    // Assign values to parameters\n    taxPercent = .12; // 12% tax rate\n    costField = 250.00; // Cost of the item\n\n    // Call procedure with different parameter orderings\n    result1 = callproc addtax (tax = taxPercent, price = costField);\n    result2 = callproc addtax (price = costField, tax = taxPercent);\nend;\n```\nIn this example, we first declare the variables `taxPercent` and `costField`, assign them values, and then use two different orderings to call the `addtax` procedure. The first call sets the tax value first (`tax = taxPercent`) and price second (`price = costField`), while the second call does the opposite (`price = costField` and `tax = taxPercent`). The results of both calls are stored in the variables `result1` and `result2`, respectively.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What is the difference between local procedures and global procedures in Actian 4GL SQL?",
        "input": "",
        "output": "Local procedures in Actian 4GL SQL are only accessible within the frame or procedure they were defined, while global procedures can be accessed from any frame or procedure. Local procedures are useful for creating reusable code specific to a single frame or procedure without impacting other parts of the application. On the other hand, global procedures may be used to share code across multiple frames and procedures, enhancing modularity and reusability in your Actian 4GL SQL application.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What happens if the order of parameters in the callproc statement does not match the order in which they appear in the procedure definition?",
        "input": "",
        "output": "Although the order in which the parameters are specified in the `callproc` statement need not match the order in which they appear in the procedure's heading, they must be identical in name to the parameters in the procedure definition. If there is a mismatch between names, it will lead to errors when executing the procedure.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Describe how to call a local procedure in Actian 4GL SQL.",
        "input": "",
        "output": "To call a local procedure defined in Actian 4GL SQL, use the `callproc` statement followed by the name of the procedure you wish to invoke. Here's an example:\n```\ncallproc addtax(tax=taxpercent, price=costfield);\n```\nThe order in which the parameters are specified in the `callproc` statement may not always match the order they were defined within the procedure; however, their names must be identical. It is important to note that, if the local procedure expects a specific data type for its parameters, it will also expect the same data type when called.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Explain the purpose and use cases of using forward references in Actian 4GL SQL local procedures.",
        "input": "",
        "output": "The purpose of declaring a forward reference for a local procedure in Actian 4GL SQL is to provide an announcement about the intention to create a local procedure with a specific name before the actual definition occurs within the script where it will be called. This is because local procedures are defined only within the script they are used and therefore need to be declared before they can be utilized.\n\nCommon use cases for forward references include scenarios where you want to modularize your code by breaking complex procedures into smaller, more manageable pieces, or when you're developing a user class script and need to declare local procedures for that specific script.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What is the purpose of using a forward reference in OpenROAD's local procedures?",
        "input": "",
        "output": "The purpose of using a forward reference in OpenROAD's local procedures is to declare a local procedure before it can be defined. This helps the runtime system identify and execute the local procedure when it's called later. You put the forward reference in the `declare` block for the script in which the local procedure is defined.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What are the ways to declare a forward reference for a local procedure in OpenROAD?",
        "input": "",
        "output": "There are three ways to declare a forward reference for a local procedure in OpenROAD:\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What is the use of the callproc statement in OpenROAD?",
        "input": "",
        "output": "The callproc statement in OpenROAD is used to call a local procedure that has been defined within the current frame or procedure. The runtime system searches through the local scopes of the currently executing frame or procedure and executes the local procedure if it's found.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What happens during the execution of a local procedure in Actian 4GL SQL?",
        "input": "",
        "output": "During the execution of a local procedure in Actian 4GL SQL, the runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable. This means that as long as the local procedure's name is included in the callproc variable, it will be executed when called from anywhere within the same frame or procedure.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "What are some common uses of local procedures in Actian 4GL SQL?",
        "input": "",
        "output": "Local procedures are used in 4GL to code a callable procedure for a single frame, field, procedure, or user class script. They can perform specific tasks such as data validation, calculation, error handling, and more. By defining local procedures, you create reusable pieces of code that can be easily called wherever they're needed in the application, making the code cleaner, easier to maintain, and more efficient.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Describe the syntax for defining a local procedure in Actian 4GL SQL.",
        "input": "",
        "output": "In Actian 4GL SQL, you use the `procedure` statement to define a local procedure. The following is the syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] =\n[declare\n    localvariablelist\n[enddeclare]]\nbegin\n    statementlist\nend\n[;]\n```\n\nReplace `procname` with the name of your desired procedure, `parameterlist` with a list of parameter declarations if needed, and `statementlist` with the statements that make up the body of the procedure. You can use the `declare` block to define local variables for use within the procedure. The `;` is optional and used to separate multiple procedure definitions in a script.",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    },
    {
        "instruction": "Provide an example of how to call a local procedure using the `callproc` statement in Actian 4GL SQL.",
        "input": "",
        "output": "You can call a local procedure defined in the same frame or procedure by using the `callproc` statement in Actian 4GL SQL. The syntax for calling a local procedure is as follows:\n\n```\ncallproc procname [([arglist])];\n```\n\nReplace `procname` with the name of the local procedure you want to call and `arglist` with a list of arguments, if any, enclosed in parentheses. For example, if you have a local procedure called `addtax` that takes two parameters, tax and price, and calculates the total cost by multiplying the price by the tax rate, you can call it using the following statement:\n\n```\ncallproc addtax (tax=0.12, price=100);\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->procedures->local_procedures",
        "task_description": "Explain the features and creation process of local procedures in Actian 4GL SQL.",
        "document": [
            "# Local Procedures\n\nYou can use a local procedure in 4GL to code a callable procedure for a single frame, field, procedure, or user class script.\n\nAlthough you define local procedures in the frame, field, procedure, or user class script in which they are called, you must declare a forward reference before you can define a local procedure. Put the forward reference in the declare block for the script in which the local procedure is defined.\n\nYou define local 4GL procedures directly in the frame, field, procedure, or user class script using the procedure statement as described in the following section.\n\nUse the callproc statement to call a local procedure defined in the current frame or procedure. For more information see the *Language Reference Guide* online help.\n\n## Declaring Forward References for Local Procedures\n\nUse one of the following formats when declaring the local procedure forward reference:\n\n```\nlocalprocname = procedure returning typeofreturnvalue\nlocalprocname = procedure returning none\nlocalprocname = procedure\n```\n\nThe `procedure returning none` and the `procedure` formats are equivalent. They specify that the procedure does not return a value.\n\n## How You Can Define Local Procedures\n\nUse the following syntax to define a local procedure:\n\n```\nprocedure procname [([parameterlist])] = \n[declare\n    localvariablelist\n[enddeclare]]\nbegin \n    statementlist\nend\n[;]\n```\n\nFor more information about the *parameterlist*, see Procedure Statement.\n\nFor more information about the declare block, see Initialize Statement.\n\nThe runtime system searches local scopes of the currently executing frame or procedure and executes the local procedure if it is in the callproc string variable.\n\n## Example--Local Procedure\n\nThis section provides an example of a procedure definition and a sample call to the procedure. Here is the procedure definition:\n\n```\nprocedure addtax (tax=float8, price=float8) = \n{\n    return (price * tax);\n}\n```\n\nThe name of the sample procedure is `addtax`. It has two parameters, `tax` and `price`. The data types of each are `float8`. The caller passes information to the procedure using these parameters. When you call the procedure, it uses the parameter values it receives from the caller in its calculations and returns the result to the caller.\n\nThe following is a sample statement calling the addtax procedure:\n\n```\ntax = callproc addtax (tax = taxpercent, \n    price = costfield);\n```\n\nThe order in which the parameters are specified in the callproc statement need not match the order in which they appear in the procedure's heading. However, they must be identical in name to the parameters in the procedure definition. Here is a second call to the same procedure:\n\n```\ncost = currprice + addtax (tax = .1, price = currprice);\n```"
        ]
    }
]
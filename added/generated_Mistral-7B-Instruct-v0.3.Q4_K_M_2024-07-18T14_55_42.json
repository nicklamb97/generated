[
    {
        "instruction": "Create a local function that retrieves employee information by ID in Actian 4GL OpenROAD Local Procedures.",
        "input": "We have an employee table with columns: 'employee_id' (INT), 'first_name' (VARCHAR(25)), and 'last_name' (VARCHAR(25)). An example record is:\n- 'employee_id': 1,\n- 'first_name': 'John',\n- 'last_name': 'Doe'.",
        "output": "Write a function to retrieve employee information by ID using the provided table structure:\n```\ndeclare\n    get_employee_by_id = procedure returning record;\nenddeclare\n\nprocedure get_employee_by_id(emp_id = integer) =\nbegin\n    let result = new record('get_employee_by_id');\n    select into result from employee where employee.employee_id = emp_id;\n    return result;\nend\n```\nThis function retrieves the employee information by ID using a SELECT statement and returns the matching record.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "How can you create a local procedure to update an existing record in Actian 4GL OpenROAD Local Procedures?",
        "input": "We have an 'orders' table with columns: 'order_id' (INT), 'customer_id' (INT), and 'total_price' (DECIMAL). An example record is:\n- 'order_id': 1,\n- 'customer_id': 2,\n- 'total_price': 100.50.",
        "output": "Create a local procedure to update an existing order total price using the provided table structure:\n```\ndeclare\n    update_order_total = procedure returning integer;\nenddeclare\n\nprocedure update_order_total(order_id = integer, new_total = decimal) =\nbegin\n    let updated_rows = 0;\n    update orders set total_price = new_total where order_id = order_id;\n    select count(*) into updated_rows from orders where order_id = order_id and total_price = new_total;\n    return updated_rows;\nend\n```\nThis procedure updates the total price of an existing order using an UPDATE statement and returns the number of rows that have been updated.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Create a local procedure to insert a new record into an existing table in Actian 4GL OpenROAD Local Procedures with specific input parameters.",
        "input": "We have an 'employees' table with columns: 'employee_id' (INT), 'first_name' (VARCHAR), 'last_name' (VARCHAR), 'position' (VARCHAR), and 'salary' (DECIMAL). The employee being inserted is John Doe, his position is Senior Developer, and his salary is 80000.",
        "output": "Create a local procedure to insert a new record for a new employee with the provided table structure:\n```\ndeclare\n    insert_employee = procedure returning integer;\nenddeclare\n\nprocedure insert_employee(first_name = varchar, last_name = varchar, position = varchar, salary = decimal) =\nbegin\n    let new_id = 0;\n    declare empl_id cursor for select next employee_seq from sysibm.syscatalog;\n    open empl_id;\n    fetch next from empl_id into new_id;\n\n    insert into employees values (new_id, first_name, last_name, position, salary);\n    close empl_id;\n\n    return new_id;\nend\n```\nThis procedure generates a new ID for the employee from a sequence and inserts the record with the provided data using an INSERT statement.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "How can you create a local procedure to retrieve records from multiple tables related through foreign key constraints in Actian 4GL OpenROAD Local Procedures?",
        "input": "We have 'employees' and 'departments' tables. The 'employees' table contains columns: 'employee_id' (INT), 'first_name' (VARCHAR), 'last_name' (VARCHAR), 'position' (VARCHAR), and 'salary' (DECIMAL). The 'departments' table has columns: 'dept_id' (INT), 'dept_name' (VARCHAR), and a foreign key column 'manager_id' (INT) referencing 'employees.employee_id'. Our goal is to find employees with a manager having the department name of \"Software Development\".",
        "output": "Create a local procedure that retrieves employees who have a manager working in the \"Software Development\" department:\n```\ndeclare\n    get_managed_employees = procedure returning cursor;\nenddeclare\n\nprocedure get_managed_employees() =\nbegin\n    declare man_cursor cursor for\n        select employee_id from employees where employee_id = (select manager_id from departments where dept_name = 'Software Development');\n\n    declare empl_cursor cursor for\n        select * from employees inner join employees e2 on e.employee_id = e2.manager_id;\n\n    open man_cursor, empl_cursor;\n    fetch all from man_cursor into :manager_id;\n    fetch all from empl_cursor using returning into :emp_id, :first_name, :last_name, :position, :salary;\n    close man_cursor, empl_cursor;\n\n    return empl_cursor;\nend\n```\nThis procedure uses two nested cursors to join the 'employees' and 'departments' tables based on the foreign key constraint. The returned cursor holds all the employees managed by a manager from the \"Software Development\" department.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL OpenROAD Local Procedures code to update the records in an existing table with conditions.",
        "input": "There is an 'orders' table with columns: 'order_id', 'customer_name', 'quantity', and 'order_date'. The user wants to update a specific record for customer \"Acme Inc\" if the order quantity is greater than 500, set the quantity to double the current value.",
        "output": "```\ndeclare\n    update_order = procedure;\nenddeclare\n\nprocedure update_order() =\nbegin\n    let update_stmt = \"update orders set quantity = quantity * 2 where customer_name = 'Acme Inc' and quantity > 500\";\n    execute dynamic statement update_stmt;\nend\n```\nThis procedure updates the order quantity for a specific customer with the provided conditions using an UPDATE statement with a Dynamic SQL.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Create a local procedure that retrieves data from multiple tables in Actian 4GL OpenROAD Local Procedures.",
        "input": "There are 'employees' and 'departments' tables with columns: 'employee_id', 'first_name', 'last_name', and 'position' in the employees table, and 'dept_id', 'dept_name', and 'manager_id' in the departments table. We want to fetch data for an employee and their department.",
        "output": "```\ndeclare\n    get_employee_info = procedure returning struct(emp = struct(\"first_name\" as string, \"last_name\" as string, \"position\" as string), dept = struct(\"dept_id\" as integer, \"dept_name\" as string));\nenddeclare\n\nprocedure get_employee_info(employee_id = integer) =\nbegin\n    let emp_query = \"select first_name, last_name, position from employees where employee_id = ?\";\n    let dept_query = \"select dept_id, dept_name from departments where manager_id = (select employee_id from employees where employee_id = ?)\";\n\n    let emp_stmt = prepare(emp_query);\n    execute prepared stmt emp_stmt using employee_id;\n    let employee_record = fetch row from curr_row;\n    close cursor emp_stmt;\n\n    let dept_stmt = prepare(dept_query);\n    execute prepared stmt dept_stmt using employee_id;\n    let department_record = fetch row from curr_row;\n    close cursor dept_stmt;\n\n    return struct(emp: struct(\"first_name\" as string, \"last_name\" as string, \"position\" as string) = employee_record,\n                   dept: struct(\"dept_id\" as integer, \"dept_name\" as string) = department_record);\nend\n```\nThis procedure retrieves data for a specific employee and their corresponding department using Prepared Statements and nested queries. It then returns the information in a structured format.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write code to handle errors and display appropriate error messages in Actian 4GL OpenROAD Local Procedures.",
        "input": "",
        "output": "Implement an error handling mechanism:\n```\n-- In a local procedure\ndeclare\n    divide = procedure returning numeric;\nenddeclare\n\nprocedure divide(dividend = numeric, divisor = numeric) =\nbegin\n    if (divisor = 0) then\n        message 'Error: Division by zero is not allowed.';\n        return null;\n    endif;\n\n    -- Perform division\n    return dividend / divisor;\nend\n```\nIn the example, error messages are displayed when the divisor is equal to zero and no result is returned.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write code for passing arguments between local procedures in Actian 4GL OpenROAD Local Procedures.",
        "input": "",
        "output": "Example of passing arguments between local procedures:\n```\n-- In a local procedure\ndeclare\n    add = procedure returning numeric;\nenddeclare\n\nprocedure add(a = numeric, b = numeric) =\nbegin\n    -- Perform addition and return result\n    return a + b;\nend\n\nprocedure call_add() =\nbegin\n    declare\n        sum = variable;\n    enddeclare;\n\n    sum = callproc add(3, 4);\n    message 'The sum is: ' || sum;\nend\n```\nIn the example, the 'call_add' procedure calls the 'add' local procedure with arguments and displays the result.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a local procedure that generates an invoice for a given order in Actian 4GL OpenROAD Local Procedures. The invoice should include the customer name, order number, items ordered, quantities of each item, and prices per item.",
        "input": "Consider the following order details:\n```\ncustomer_name = 'John Doe';\norder_number = 'AB1234567';\nitems_ordered = [('Apples', 10), ('Bananas', 20), ('Cherries', 5)];\nprices_per_item = [(1.20, 'Apples'), (0.90, 'Bananas'), (2.45, 'Cherries')];\n```",
        "output": "Define and call a procedure to generate an invoice:\n```\ndeclare\n    generate_invoice = procedure returning string;\nenddeclare\n\nprocedure generate_invoice() =\nbegin\n    declare\n        invoice as string;\n        i as integer;\n    enddeclare\n\n    invoice = 'Invoice for: ' || customer_name || '\\n';\n    invoice = invoice || 'Order Number: ' || order_number || '\\n';\n    invoice = invoice || '\\n';\n    for i = 1 to arraylength(items_ordered) loop\n        invoice = invoice || items_ordered[i][0] || ' x ' || items_ordered[i][1] || ', Price: $' || prices_per_item[(i - 1) + 1][2] || '\\n';\n    endfor;\n\n    return invoice;\nend;\n\n-- Usage\ninvoice = callproc generate_invoice();\nmessage invoice;\n```\nThis procedure generates an invoice for a given order and displays the output.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Create a local procedure that calculates a sales tax based on the subtotal, tax rate, and tax exempt items in Actian 4GL OpenROAD Local Procedures.",
        "input": "",
        "output": "Define and call a procedure to calculate sales tax:\n```\ndeclare\n    calculate_sales_tax = procedure returning float8;\nenddeclare\n\nprocedure calculate_sales_tax(subtotal = float8, tax_rate = float8, exempted_items = set of integer) =\nbegin\n    declare\n        total as float8 = subtotal;\n        i as integer;\n    enddeclare\n\n    -- Iterate through the exempted items and subtract them from the total\n    for each el in exempted_items loop\n        total = total - total * el / 100;\n    endfor\n\n    return total * tax_rate / 100;\nend;\n\n-- Usage\nsubtotal = 100.00;\ntax_rate = 7.50;\nexempted_items = {5}; -- Exempt item number 5 from tax\nsales_tax = callproc calculate_sales_tax(subtotal, tax_rate, exempted_items);\nmessage 'Sales Tax: $' || sales_tax;\n```\nThis procedure calculates the sales tax for a given subtotal and tax rate while considering exempt items.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL OpenROAD Local Procedures code to insert multiple records into a single table.",
        "input": "We have a 'users' table with columns: 'user_id', 'first_name', 'last_name', and 'email'. We want to add new users with the following data:\n```\n[{\"user_id\": 100, \"first_name\": \"John\", \"last_name\": \"Doe\", \"email\": \"johndoe@example.com\"}, {\"user_id\": 101, \"first_name\": \"Jane\", \"last_name\": \"Smith\", \"email\": \"janesmith@example.com\"}, {\"user_id\": 102, \"first_name\": \"Peter\", \"last_name\": \"Johnson\", \"email\": \"peterjohnson@example.com\"}]\n```",
        "output": "```\ndeclare\n    insert_users = procedure;\nenddeclare\n\nprocedure insert_users() =\nbegin\n    for each row data in [{\"user_id\": 100, \"first_name\": \"John\", \"last_name\": \"Doe\", \"email\": \"johndoe@example.com\"}, {\"user_id\": 101, \"first_name\": \"Jane\", \"last_name\": \"Smith\", \"email\": \"janesmith@example.com\"}, {\"user_id\": 102, \"first_name\": \"Peter\", \"last_name\": \"Johnson\", \"email\": \"peterjohnson@example.com\"}] do\n        let insert_stmt = \"insert into users (user_id, first_name, last_name, email) values (?, ?, ?, ?)\";\n        execute prepared statement insert_stmt using data[\"user_id\"], data[\"first_name\"], data[\"last_name\"], data[\"email\"];\n    endfor;\nend\n```\nThis procedure inserts multiple records into the 'users' table with the provided data using a Prepared Statement and a FOR loop to iterate through each record.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL OpenROAD Local Procedures code for handling exceptions and returning appropriate error messages.",
        "input": "When attempting to insert or update records, the program may encounter duplicate primary key errors. We want to handle this exception and return a custom error message to the user.",
        "output": "```\ndeclare\n    insert_or_update = procedure(table_name as string, column_id as string, value as any) returning struct();\nenddeclare;\n\nprocedure insert_or_update(table_name as string, column_id as string, value as any) returning struct() =\nbegin\n    try {\n        let insert_stmt = \"insert into \" + table_name + \"( \" + column_id + \") values (?)\";\n        execute prepared statement insert_stmt using value;\n    } on duplicate key do {\n        throw new exception(\"Error: Duplicate Primary Key for '\" + column_id + \"' in the '\" + table_name + \"' table.\");\n    } end try;\nend\n```\nThis procedure handles a primary key error when inserting or updating records using TRY-CATCH blocks and returns an appropriate custom error message to the user if the exception occurs.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Describe how to handle errors in Actian 4GL OpenROAD Local Procedures by using exception handling.",
        "input": "",
        "output": "Handle errors in Actian 4GL OpenROAD Local Procedures with exception handling:\n```\ndeclare\n    calculate_discount = procedure;\nenddeclare\n\nprocedure calculate_discount(amount = float8, percentage = integer) = on error go to error_handler;\nbegin\n    declare discount as float8;\n\n    try\n        discount = amount * (100 - percentage) / 100;\n    except when overflow or underflow then\n        message 'Error: Overflow or Underflow';\n    end try;\n\n    return discount;\nerror_handler:\n    message 'Unexpected error occurred while processing the discount';\nend\n```\nThis example demonstrates exception handling by catching overflow and underflow errors. An error handler is defined to handle unexpected issues.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL OpenROAD Local Procedures code to retrieve records from multiple tables with JOINs and WHERE clauses.",
        "input": "We have two tables 'employees' and 'departments'. The 'employees' table has columns: 'employee_id', 'first_name', 'last_name', and 'department_id'. The 'departments' table has columns: 'department_id' and 'dept_name'. We want to fetch all employees who work in the Sales department.",
        "output": "```\ndeclare\n    get_sales_employees = procedure returning cursor;\nenddeclare\n\nprocedure get_sales_employees() =\nbegin\n    declare emp_cursor cursor for\n        select e.employee_id, e.first_name, e.last_name from employees e\n            inner join departments d on e.department_id = d.department_id\n        where d.dept_name = 'Sales';\n    return emp_cursor;\nend;\n```\nThis procedure retrieves all the employees who work in the Sales department using an INNER JOIN and a WHERE clause to filter the data from the two tables.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write code for updating multiple columns in a table using a local procedure in Actian 4GL OpenROAD Local Procedures.",
        "input": "We have an 'invoices' table with columns: 'invoice_id', 'customer_id', 'date', and 'total_amount'. We want to update the 'total_amount' for invoices where the 'customer_id' equals 123456.",
        "output": "```\ndeclare\n    update_invoices = procedure;\nenddeclare\n\nprocedure update_invoices() =\nbegin\n    let update_stmt = \"update invoices set total_amount = ? where customer_id = 123456\";\n\n    let new_total_amount = 7890.00;\n\n    execute prepared statement update_stmt using new_total_amount;\nend;\n```\nThis procedure updates the 'total_amount' for all invoices with a 'customer_id' of 123456.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Create a function that checks if an input string contains special characters in Actian 4GL OpenROAD Local Procedures.",
        "input": "input_string = \"MyName123!\"",
        "output": "```\n-- Function to check for special characters in a string\ndeclare\n    has_special_char = function returning boolean;\nenddeclare\n\nfunction has_special_char(s as string) =\nbegin\n    declare\n        i as integer = 1;\n    enddeclare\n\n    -- Loop through each character in the input string\n    while i <= length(s) do\n        -- If current character is a special character (not a digit, letter or white space), return true\n        if not is_alphanum(substr(s, i, 1)) then\n            return true;\n        endif\n        i = i + 1;\n    endwhile\n\n    -- If no special characters found, return false\n    return false;\nend;\n\n-- Usage\ninput_string = \"MyName123!\";\nmessage 'Special character(s) found: ' || (if has_special_char(input_string) then 'True' else 'False');\n```\nThe function checks for the presence of special characters in an input string.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write a procedure that generates a random password using a given set of character types in Actian 4GL OpenROAD Local Procedures.",
        "input": "min_password_length = 8;\nmax_password_length = 12;\ninclude_lowercase = true;\ninclude_uppercase = true;\ninclude_numbers = true;\ninclude_special_chars = false;",
        "output": "```\n-- Procedure to generate a random password with the specified character types\ndeclare\n    generate_password = procedure returning string;\nenddeclare\n\nfunction generate_password(min_length = integer, max_length = integer, include_lowercase = boolean, include_uppercase = boolean, include_numbers = boolean, include_special_chars = boolean) =\nbegin\n    declare\n        password as string = '';\n    enddeclare;\n\n    -- Declare sets of characters for each type\n    let lowercases = set of char('a' .. 'z');\n    let uppercases = set of char('A' .. 'Z');\n    let numbers = set of char('0' .. '9');\n    let special_chars = set of char(); -- Empty if not specified\n\n    if include_lowercase then append lowercases to password; endif\n    if include_uppercase then append uppercases to password; endif\n    if include_numbers then append numbers to password; endif\n    if include_special_chars then append special_chars to password; endif\n\n    -- Generate the random password with a length between given minimum and maximum values\n    loop while length(password) < min_length or length(password) > max_length do\n        -- Shuffle the password characters for better randomness\n        let shuffled = shuffle(password);\n\n        -- Remove duplicate characters in the shuffled set to ensure uniqueness\n        let unique_shuffled = remove_duplicates(shuffled);\n\n        -- Update password with a new random sequence of characters\n        password = unique_shuffled;\n    end loop\n\n    return password;\nend;\n\n-- Usage with the given input parameters\nmin_password_length = 8;\nmax_password_length = 12;\ninclude_lowercase = true;\ninclude_uppercase = true;\ninclude_numbers = true;\ninclude_special_chars = false;\n\nmessage 'Generated Password: ' || generate_password(min_password_length, max_password_length, include_lowercase, include_uppercase, include_numbers, include_special_chars);\n```\nThis procedure generates a random password based on the specified character types (include_lowercase, include_uppercase, include_numbers and include_special_chars). The length of the generated password falls within the given minimum and maximum values.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Create Actian 4GL OpenROAD Local Procedures code for sorting a struct array based on the values in a specific field.",
        "input": "Suppose we have an employee records array and want to sort it by employee salaries in descending order.",
        "output": "```\nprocedure sort_by_salary =\nbegin\n    -- Sort the employee records array by salary (descending) using the 'sort' function\n    let sorted_records = struct_array(length(employee_records));\n    for i = 1 to length(employee_records) loop\n        copy employee_record at index i into sorted_records[index];\n        sort sorted_records by employee_record.salary descending;\n    endloop;\nend\n```\nThis code sorts an array of records based on their \"salary\" field in descending order using the 'sort' function.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Create a local function to get the average of all order totals in the 'orders' table of Actian 4GL OpenROAD Local Procedures.",
        "input": "The 'orders' table has a column 'total_price'.",
        "output": "Define a local function to get the average total price for all records in the orders table:\n```\ndeclare\n    get_average = function returning float8;\nenddeclare\n\nfunction get_average() =\nbegin\n    declare\n        total as float8 = 0.00,\n        count as integer = 0;\n    enddeclare\n\n    for select into cur_orders from orders loop\n        total = total + cur_orders.total_price;\n        count = count + 1;\n    endfor;\n\n    return total / count;\nend;\n```\nThis function computes the average total price by summing up all order totals and counting the number of records in the orders table.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Create a local procedure to insert new rows into the 'products' table with columns: 'product_id', 'product_name', and 'quantity_on_hand'.",
        "input": "The 'products' table does not exist yet, so we need to create it first. Here's its schema:\n```\ncreate table products (\n    product_id integer primary key,\n    product_name varchar(255),\n    quantity_on_hand int\n);\n```",
        "output": "Define a local procedure to insert multiple new rows into the products table with the provided column values:\n```\ndeclare\n    add_products = procedure returning integer;\nenddeclare\n\nprocedure add_products(product_list = set of record) =\nbegin\n    -- Open a cursor for bulk processing\n    declare new_rows as integer = 0;\n    open cursor new_cursor for insert into products values (?, ?, ?);\n\n    -- Iterate through the provided product list\n    for each prod in product_list loop\n        prepare stmt from 'insert into products(product_id, product_name, quantity_on_hand) values(?, ?, ?)';\n        execute stmt using (prod.product_id, prod.product_name, prod.quantity_on_hand);\n        close stmt;\n        new_rows = new_rows + 1;\n    endfor;\n\n    -- Commit the changes and close the cursor\n    commit work;\n    close cursor new_cursor;\n\n    return new_rows;\nend;\n```\nThis local procedure accepts a set of records and inserts multiple rows into the products table. The new_rows variable is used to keep track of the number of inserted rows.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL OpenROAD Local Procedures to update a single record in a table by reading values from user input.",
        "input": "Suppose we have a \"customers\" table with columns: id, name, address, phone_number, and email. We want to update the phone number of customer ID 10 using input from the user.",
        "output": "```\nprocedure update_phone_number =\nbegin\n    -- Get user input for the new phone number\n    prompt \"Enter the new phone number: \";\n    let new_phone_number = string(readline());\n\n    -- Update the 'customers' table record with the new phone number using the 'update' statement\n    let updated_count = update customers set phone_number = :new_phone_number where id = 10;\nend\n```\nThis code updates the phone number of customer ID 10 in the \"customers\" table by reading the value from user input using a prompt and then executing an 'update' statement.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Create Actian 4GL OpenROAD Local Procedures to search for a record in a table based on a specific condition.",
        "input": "Suppose we have a \"products\" table with columns: id, name, description, price, and inventory. We want to find the product with the name \"Product X\".",
        "output": "```\nprocedure find_product =\nbegin\n    -- Search for the \"Product X\" in the 'products' table using the 'select' statement\n    let found_product = select * from products where name = \"Product X\";\nend\n```\nThis code searches for a record in the \"products\" table that has the name \"Product X\". It returns an entire row as a struct.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Create Actian 4GL OpenROAD Local Procedures to update a specific field of a record in a table based on a condition.",
        "input": "We have a \"orders\" table with columns: 'order_id' (INT), 'customer_id' (INT), 'order_date' (DATE), 'product_id' (INT), and 'quantity' (INT). We want to update the quantity of an order if it's less than 10.",
        "output": "```\nprocedure update_quantity =\nbegin\n    -- Update the 'quantity' field in the 'orders' table when it's less than 10 using the 'update' statement and set clause.\n    let updated_row_count = update orders set quantity = 10 where quantity < 10;\nend\n```\nThis code updates the quantity of the rows in the \"orders\" table where the quantity is less than 10 by setting it to 10 using the UPDATE statement with a WHERE clause.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Create Actian 4GL OpenROAD Local Procedures to delete a record from a table based on a specific condition.",
        "input": "We have an \"employees\" table as mentioned in task 1 and we want to delete the employee with the ID of 503.",
        "output": "```\nprocedure delete_employee =\nbegin\n    -- Delete the record from the 'employees' table using the 'delete' statement and where clause with specific ID.\n    let deleted_row_count = delete from employees where employee_id = 503;\nend\n```\nThis code deletes the row with the specified employee ID of 503 from the \"employees\" table using a DELETE statement with the WHERE clause.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL OpenROAD Local Procedures code to validate user input for a search query before performing a search operation.",
        "input": "Our application allows users to search for a specific employee by name. However, we want to enforce that the user's input contains only alphanumeric characters and is at least 3 characters long before searching.",
        "output": "```\ndeclare\n    validate_and_search = procedure(name as string) returning record;\nenddeclare\n\nprocedure validate_and_search(name as string) returning record =\nbegin\n    if len(trim(name)) < 3 then {\n        throw new exception(\"Invalid search query. Please enter at least 3 characters.\");\n    } endif;\n\n    let name_pattern = \"[a-zA-Z0-9]+\";\n    let regex = new reg_expression();\n    if not regex.match(name, name_pattern) then {\n        throw new exception(\"Invalid search query. Please enter only alphanumeric characters.\");\n    } endif;\n\n    // Search logic goes here\nend\n```\nThis function validates the user input for a search query by checking if it has at least 3 characters and contains only alphanumeric characters before performing the actual search operation.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->local_procedures",
        "task_description": "Write Actian 4GL OpenROAD Local Procedures",
        "document": null
    }
]
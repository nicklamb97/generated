[
    {
        "instruction": "What are the differences in name resolution when using a variable or actual procedure name in an Actian 4GL OpenROAD Callproc Statement?",
        "input": "",
        "output": "When you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Describe what happens when a variable is used to represent the procedure name so that the user can specify a procedure at runtime in an Actian 4GL OpenROAD Callproc Statement.",
        "input": "",
        "output": "If you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Can you explain how to pass values back from the called procedure to the calling procedure or frame in Actian 4GL?",
        "input": "",
        "output": "On returning from the called procedure, a single value can be passed back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "In Actian 4GL OpenROAD, what is the return type of database procedures when using the Callproc Statement?",
        "input": "",
        "output": "For database procedures, the return type is always integer.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Can you explain the syntax of 'Callproc Statement' in OpenROAD Actian 4GL?",
        "input": "",
        "output": "The syntax of Callproc Statement in OpenROAD Actian 4GL is `[returnvariable =] callproc procname[(parameterlist)];`. You can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use a variable, OpenROAD resolves the procedure reference at runtime. This statement calls a global or local procedure written in 4GL or a procedure written in another high-level programming language (a 3GL language such as C or FORTRAN).",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "What is the difference between calling a database procedure and using Callproc Statement in OpenROAD Actian 4GL?",
        "input": "",
        "output": "To call a database procedure, use the Execute Procedure Statement. The callproc statement is used to call procedures written in 4GL or a high-level programming language such as C or FORTRAN.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "How can you pass parameters by value and by reference in Actian 4GL OpenROAD callproc statement? And, what is the difference between them?",
        "input": "",
        "output": "To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option. This allows the called procedure to update the value of the variable. The data type of the variable must agree with the return type of the called procedure. If you don't use the byref option, the parameters are passed by value and the called procedure cannot change them.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "How can a user specify a procedure to call at runtime in OpenROAD Actian 4GL?",
        "input": "",
        "output": "To allow the user to specify a procedure at runtime, you must use a variable for procname. This means that the name of the procedure is resolved at runtime rather than at compile time.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "What should you do when you want to call a database procedure using Actian 4GL?",
        "input": "",
        "output": "To call a database procedure, use the `Execute Procedure Statement` instead of the `Callproc Statement`.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Can you explain how to pass parameters by value or reference in Actian 4GL Callproc Statement?",
        "input": "",
        "output": "To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option. For more information about passing parameters, refer to the *Programming Guide*.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "How do you specify the name of the variable that receives the return value from the called procedure in Actian 4GL?",
        "input": "",
        "output": "The name of the variable that receives the return value from the called procedure is specified using the `returnvariable` parameter. Its data type must agree with the return type of the called procedure.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "How to call a procedure written in another high-level programming language (3GL) using Callproc Statement in Actian 4GL?",
        "input": "",
        "output": "To call a procedure written in another high-level programming language (3GL), specify the procedure name in `procname` parameter. OpenROAD assumes that the called 3GL procedure is available and ready to execute.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "How do you pass a single value back from a called procedure to the calling procedure or frame in Actian 4GL?",
        "input": "",
        "output": "On returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For more information about passing values, refer to the *Programming Guide*.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Can you provide an example that demonstrates passing variables by value and by reference to a 4GL procedure using the `callproc` statement?",
        "input": "",
        "output": "Here is an example that demonstrates passing variables by value and by reference in Actian 4GL:\n\nCall the OpenROAD procedure, `addtax`, passing the `taxpercent` variable by value and the `price` variable by reference:\n```\ncallproc addtax(tax = taxpercent, total = byref(price));\n```\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the `addtax` procedure returns.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "What are the advantages of using a variable for the procedure name in the `callproc` statement in Actian 4GL?",
        "input": "",
        "output": "Using a variable for the procedure name in the callproc statement allows you to specify a procedure at runtime. This way, you can dynamically decide which procedure to call depending on user input or other conditions. The difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Explain how to pass values by reference to a 4GL or 3GL procedure using the Callproc Statement in OpenROAD Actian 4GL.",
        "input": "",
        "output": "To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option when listing the parameters in the callproc statement.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "What are the possible types of procedures that can be called using an Actian 4GL OpenROAD Callproc Statement?",
        "input": "",
        "output": "The callproc statement in Actian 4GL can call any of these types of procedures:\n- A global or local procedure written in 4GL.\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN).",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "What is the difference between using an actual procedure name and a variable for procname in Actian 4GL OpenROAD Callproc Statement?",
        "input": "",
        "output": "If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "What is the purpose of using the 'byref' option in the Callproc Statement while passing parameters to a procedure?",
        "input": "",
        "output": "Using the `byref(variable)` option allows you to pass values by reference to a 4GL or 3GL procedure. This means that the called procedure can update the value of the variable passed by reference.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "How do you call a database procedure using Callproc Statement in OpenROAD Actian 4GL?",
        "input": "",
        "output": "To call a database procedure, use the Execute Procedure Statement instead of the Callproc Statement in OpenROAD Actian 4GL.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Provide an example of the syntax used for the Callproc Statement in Actian 4GL OpenROAD.",
        "input": "",
        "output": "The syntax for the callproc statement is: `[returnvariable =] callproc procname[(parameterlist)];` Here is an example: `callproc myprocedure();`",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Can you explain what the 'Execute Procedure Statement' is in Actian 4GL OpenROAD and under what circumstances we should use it instead of 'Callproc Statement'?",
        "input": "",
        "output": "The Execute Procedure Statement in Actian 4GL OpenROAD is used to call a database procedure. It should be used instead of the Callproc Statement when you want to execute a stored procedure in a database.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "How can I call a 3GL procedure using Actian 4GL's Callproc Statement?",
        "input": "",
        "output": "To call a 3GL (High-Level Programming Language such as C or FORTRAN) procedure, you use the `callproc` statement just like you would with a 4GL procedure. You don't need to include any specific options for the 3GL language.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Write an example of using the Callproc Statement with passing parameters by reference in OpenROAD Actian 4GL.",
        "input": "",
        "output": "Call the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "What are the allowed data types for 'returnvariable' in OpenROAD Actian 4GL?",
        "input": "",
        "output": "The data type of the variable that receives the return value from the called procedure must agree with the return type of the called procedure. If you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value\u2019s data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "How is the 'parameterlist' used in an Actian 4GL OpenROAD Callproc Statement?",
        "input": "",
        "output": "For 4GL procedures, the 'parameterlist' follows the naming convention of named parameters. For 3GL procedures, it follows the convention of positional parameters without names. You can pass values by value or by reference using this parameter list in the callproc statement. To pass values by reference to a 4GL or 3GL procedure, you should use the `byref(variable)` option.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Provide an example of how to call a procedure using the Callproc Statement in Actian 4GL with parameters.",
        "input": "",
        "output": "Here is an example that shows how to call a procedure called 'addtax' and pass it two parameters: tax percent by value (`taxpercent`) and price by reference (`price`).\n```sql\ncallproc addtax(tax = taxpercent, total = byref(price));\n```\nIn this example, the procedure `addtax` will calculate a new total price based on the inputted parameters. Because the `price` variable is passed by reference, the calculated total will be stored in the `price` variable and can be used after the procedure returns.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "What is the purpose of the returnvariable in OpenROAD Actian 4GL Callproc Statement?",
        "input": "",
        "output": "The 'returnvariable' parameter specifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Can you provide an example of how to call a local procedure using Callproc Statement in Actian 4GL?",
        "input": "",
        "output": "You can use the callproc statement to call a local procedure. Here is an example: `callproc myLocalProcedure;`. This will execute the `myLocalProcedure` which should be defined earlier. If you have any parameters for this procedure, they can be included in the callproc statement as well.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Can you explain what happens if we don't specify returnvariable while calling a procedure using Callproc Statement in Actian 4GL?",
        "input": "",
        "output": "If no `returnvariable` is specified, the called procedure does not return any value to the calling frame or procedure. If the called procedure has a return type and it tries to return a value, an error occurs at runtime because there's no variable to store the returned value.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "How do I call a procedure as part of an expression in Actian 4GL OpenROAD?",
        "input": "",
        "output": "When you want to call a procedure as part of an expression, you don't need the `callproc` keyword.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "What is the difference between name resolution in 'Callproc Statement' when using an actual procedure name versus a variable?",
        "input": "",
        "output": "When you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has important consequences when the 'callproc statement' is executed inside an included application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "What are the parameters of the Callproc Statement in Actian 4GL?",
        "input": "",
        "output": "The callproc statement in Actian 4GL has three parameters: `returnvariable`, `procname`, and `parameterlist`. The returnvariable parameter specifies the name of the variable that receives the return value from the called procedure. The procname parameter specifies the name of the procedure you are calling. The parameterlist parameter contains a list of parameters to be passed to the called procedure, either by value or by reference.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Describe how to call a local or global 4GL or 3GL procedure in Actian 4GL using the Callproc statement.",
        "input": "",
        "output": "You can call a local or global 4GL or 3GL procedure in Actian 4GL by using the `Callproc` statement with the name of the procedure and an optional parameter list. The syntax is as follows:\n```bash\n[returnvariable =] callproc procname[(parameterlist)];\n```\nYou can use either the actual procedure name or a variable that resolves to a procedure name at runtime. If you use a variable, OpenROAD resolves the reference at runtime. The procedure name must be enclosed in single quotes if it is the same as a 4GL keyword. To pass values by reference, include the `byref(variable)` option for the relevant parameters in the parameter list.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "What is the difference between a Callproc statement and an Execute Procedure Statement in Actian 4GL?",
        "input": "",
        "output": "The main difference between a Callproc statement and an Execute Procedure Statement in Actian 4GL lies in what types of procedures they are used for. The Callproc statement is used to call any of the following types of procedures: A global or local procedure written in 4GL or a procedure written in another high-level programming language (a 3GL language such as C or FORTRAN). On the other hand, the Execute Procedure Statement is specifically used for calling database procedures.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Can I pass values by reference to a 4GL or 3GL procedure using Actian 4GL's `Callproc Statement`? If so, how?",
        "input": "",
        "output": "Yes, you can pass values by reference to a 4GL or 3GL procedure using Actian 4GL's Callproc statement. To do this, you use the `byref(variable)` option in the parameter list of the callproc statement.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "What is the significance of dynamic name resolution when using the `Callproc Statement` in Actian 4GL?",
        "input": "",
        "output": "Dynamic name resolution in the Callproc Statement allows you to use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "How does the timing of name resolution affect the callproc statement execution inside an included application?",
        "input": "",
        "output": "In a called procedure, when `procname` is a dynamic name, using an actual procedure name at runtime will cause OpenROAD to resolve the reference at compile time. This means that if you are calling procedures from an included application and their names have not yet been defined in the main application, they won't be found. To avoid this problem, use a variable for `procname` so that the procedure is resolved at runtime.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "What happens when you use a variable to represent the procedure name in Actian 4GL 'Callproc Statement'?",
        "input": "",
        "output": "When you use a variable to represent the procedure name, OpenROAD resolves the reference at runtime. This means that the user can specify a procedure at runtime based on the value of the variable. However, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    },
    {
        "instruction": "Explain the difference in the timing of name resolution when using an actual procedure name and using a variable to represent it in OpenROAD Actian 4GL.",
        "input": "",
        "output": "When you use an actual procedure name, OpenROAD resolves the reference at compile time. This means that if there's an error or the procedure doesn't exist, it will be caught during compilation. When using a variable, OpenROAD resolves the reference at runtime. This means that the error or non-existence of the procedure may not be detected until runtime.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->callproc_statement",
        "task_description": "Explain the concept and usage of 'Callproc Statement' in OpenROAD Actian 4GL",
        "document": [
            "## Callproc Statement\n\nThis statement calls a procedure from a frame, a procedure, or a method for a user class. The callproc statement calls any of these types of procedures:\n\n- A global or local procedure written in 4GL\n- A procedure written in another high-level programming language (a 3GL language such as C or FORTRAN)\n\n**Note:** To call a database procedure, use the Execute Procedure Statement.\n\nThis statement has the following syntax:\n\n`[returnvariable =] callproc procname[(parameterlist)];`\n\nYou can call this procedure from a frame, a procedure, or a method for a user class. Because `procname` is a dynamic name, you can use an actual procedure name or a variable that resolves to a procedure name at runtime. If you use an actual procedure name, OpenROAD resolves the reference at compile time. If you use a variable, OpenROAD resolves the procedure reference at runtime. This difference in the timing of name resolution has an important consequence when the callproc statement is executed inside an included application.\n\nTo pass values to the called procedure, use the optional parameter list in the callproc statement. You can pass the parameters by value or by reference. To pass values by reference to a 4GL or 3GL procedure, use the `byref(variable)` option.\n\nFor more information about using the callproc statement to pass parameters by value and by reference, see the *Programming Guide*.\n\nOn returning from the called procedure, you can pass a single value back to the calling procedure or frame. The data type of the variable that receives the return value must be compatible with the return type of the called procedure. For database procedures, the return type is always integer.\n\nIf you use a variable to represent the procedure name so that the user can specify a procedure at runtime, you must ensure that the data type of the procedure's return value is compatible with that of any specified return variable. OpenROAD assumes that the return value's data type is the same as the return variable type. If the procedure attempts to return a value of an incompatible type, an error results at runtime.\n\n**Note:** You can also call a procedure as part of an expression. When you do so, the callproc keyword is not needed.\n\n### Parameters--Callproc Statement\n\nThis statement has the following parameters:\n\n#### returnvariable\n\nSpecifies the name of the variable in the calling frame or procedure that receives the return value from the called procedure. Its data type must agree with the return type of the called procedure.\n\n#### procname\n\nSpecifies the name of the procedure you are calling. You must enclose any procedure name that is the same as a 4GL keyword in single quotes. The procedure name you use for `procname` must match the name in the procedure's definition.\n\n#### parameterlist\n\nFor 4GL procedures, see NamedParameterList.\nFor 3GL procedures, see UnnamedParameterList.\n\n### Example--Callproc Statement\n\nCall the OpenROAD procedure, addtax, passing the `taxpercent` variable by value and the `price` variable by reference:\n`callproc addtax(tax = taxpercent, total = byref(price));`\nBecause `price` is passed by reference, the procedure can update its value by adding the tax amount. The new total price is visible to the calling frame or procedure after the addtax procedure returns."
        ]
    }
]
[
    {
        "instruction": "Give an example of how you would call a global procedure with a return value and parameters in Actian 4GL.",
        "input": "",
        "output": "Here is an example of calling a global procedure with a return value and parameters:\n\n```sql\nresult_variable = callproc get_maximum_value(start_index = 1, end_index = 5);\n```\nIn this example, the procedure `get_maximum_value` returns the maximum value between the indexes 1 to 5. The returned result is stored in the variable `result_variable`.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "Explain the purpose and syntax of the callproc statement in Actian 4GL.",
        "input": "",
        "output": "The `callproc` statement in Actian 4GL is used to call a global or local 4GL procedure from any OpenROAD script or another 4GL procedure. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\nIn this statement, `procedurename` specifies the name of the 4GL procedure to be called, while the optional parameters allow you to pass values to the procedure.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "What are the differences between callproc statements for procedures with and without parameters?",
        "input": "",
        "output": "For procedures without any parameters, you just need to specify their names using `callproc procedurename`. For procedures with parameters, in addition to specifying the name of the procedure, you must also specify a corresponding expression for each parameter as well.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "How do you pass a variable by reference when calling a procedure using callproc statement in Actian 4GL?",
        "input": "",
        "output": "To pass a variable by reference when calling a procedure using the `callproc` statement in Actian 4GL, you need to use an address-of operator (`&`) before the parameter name in the calling code. This ensures that the original variable is modified within the called procedure rather than a local copy. For example:\n\n```sql\ncallproc update_record(&my_variable);\n```\nIn this case, `my_variable` is passed by reference to the `update_record` procedure.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "Explain what happens if a variable in Actian 4GL is passed as a parameter and the called procedure does not include that parameter?",
        "input": "",
        "output": "If a variable is passed to a 4GL procedure using the `callproc` statement but the procedure doesn't have a parameter with that name, the system will raise an error. The default value of the undeclared parameter will not be used and the execution of the called procedure will not occur as intended. To avoid such errors, it is essential to ensure that all parameters passed in the `callproc` statement are properly declared in the target procedure.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "What is the purpose of the Flush method in Actian 4GL? When might we need to use it when calling a 4GL procedure?",
        "input": "",
        "output": "The Flush method is used in Actian 4GL to refresh or update the values displayed on the form, especially when data is being manipulated during the execution of a script or a 4GL procedure. When calling a 4GL procedure with a reference variable as a parameter and updating its value within the called procedure, you may want to use the Flush method immediately after the callproc statement if you want the updated value to display on the form before the current event block completes. Without the Flush method, the updated value will be displayed only when the event block is finished.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "What is the difference between passing parameters by value and by reference in Actian 4GL? Provide an example for each method.",
        "input": "",
        "output": "In Actian 4GL, parameters can be passed by value or by reference. When a parameter is passed by value, a copy of the original variable's value is created and sent to the called procedure. Any changes made to this copy inside the procedure do not affect the original variable in the calling frame. Here is an example of passing a parameter by value:\n```\ndeclare integer number1 := 5;\ncallproc add_numbers(number2 = 3);\nwrite number1;\n```\nIn the above example, the value `5` is passed to the called procedure `add_numbers`. Inside the procedure, a copy of this value is created and incremented by `3`. However, the original variable `number1` remains unchanged. The output will be `5`.\n\nOn the other hand, when a parameter is passed by reference, the called procedure has direct access to the original variable in the calling frame. Any changes made inside the procedure affect the original variable as well. Here is an example of passing a parameter by reference:\n```\ndeclare integer number1 := 5;\ncallproc add_numbers(number1);\nwrite number1;\n```\nIn this example, the variable `number1` is passed directly to the called procedure `add_numbers`, which increments its value. After the procedure finishes execution, the updated value of `number1` (i.e., `6`) will be displayed in the output.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "Provide an example of calling a 4GL procedure and updating the value of a variable in the calling procedure using the `Flush` method.",
        "input": "",
        "output": "Here's an example of modifying a variable in the calling procedure, passing it as a parameter to a called procedure, and using the `Flush` method to update the value immediately:\n\n```sql\ndim i as int;\ni = 5;\ncallproc increment_value(value = i);\nflush();\nmsgbox(\"Value after updating: \" & i);\n```\nIn this example, we are calling a procedure `increment_value` with an integer variable `i` and passing it as a parameter. The called procedure increments the value by 1. After executing the `Flush` method, the new value of the variable `i` is displayed in a message box.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "When we declare parameters for a 4GL procedure, how does Actian 4GL decide whether to pass them by value or reference?",
        "input": "",
        "output": "Actian 4GL determines the passing method based on the data type of the parameter. By default, scalar types (such as integer, real, and character) are passed by value while object types (like structures, classes, and arrays) are passed by reference. However, you can explicitly specify the passing method using the `INOUT` keyword in the procedure header to pass scalar values by reference or using the `ref` keyword for object types to pass them by value.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "What is the syntax for calling a procedure without parameters in Actian 4GL?",
        "input": "",
        "output": "In the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n```sql\ncallproc procedurename\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "What is the difference between passing a parameter by value and passing it by reference in Actian 4GL procedures?",
        "input": "",
        "output": "In Actian 4GL, parameters to procedures can be passed by value or by reference. When a parameter is passed by value, a copy of the argument's value is sent from the calling procedure to the called procedure, and any changes made within the called procedure do not affect the original variable in the calling procedure. On the other hand, when a parameter is passed by reference, a reference (not a copy) to the argument's memory location is sent from the calling procedure to the called procedure. This means that any changes made within the called procedure are reflected in the original variable in the calling procedure.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "A variable can be associated with a field on a form. If a referenced variable is updated inside a procedure, what will be the effect of this update on the field?",
        "input": "",
        "output": "If a field on the form is associated with a referenced variable and the variable is updated inside the called procedure, the field will not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "Explain how you can dynamically specify the procedure name in a callproc statement using a variable in Actian 4GL.",
        "input": "",
        "output": "To dynamically specify the procedure name in a `callproc` statement using a variable in Actian 4GL, you need to assign the variable containing the procedure name as follows:\n\n```sql\ndim proc_name as string;\nproc_name = \"error_handler\";\ncallproc (proc_name);\n```\nIn this example, we're creating a string variable `proc_name` and assigning it the value \"error_handler\", which is the name of the 4GL procedure you want to call. The variable `proc_name` is enclosed in parentheses when passing it to the `callproc` function as shown above.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "What is the basic syntax for calling a 4GL procedure with no return value or parameters in Actian?",
        "input": "",
        "output": "In the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is: `callproc procedurename`.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "What should you specify in the callproc statement to receive the return value from a called procedure?",
        "input": "",
        "output": "If the 4GL procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The basic syntax is: `[return_variable =] callproc procedurename`.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "How do you specify the procedure name in a callproc statement?",
        "input": "",
        "output": "In a callproc statement, you can either use the procedure name directly or use a variable that specifies the procedure name dynamically. Using a variable allows you to specify the procedure name at runtime. The basic syntax is:\n```sql\ncallproc {procedure_name}\n```\nWhere `{procedure_name}` is the name of the 4GL procedure.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "Can a called procedure return values to the calling procedure using the callproc statement? If yes, how can it do that?",
        "input": "",
        "output": "Yes, a called 4GL procedure can return values to the calling procedure using the `callproc` statement. To receive the returned value, you must specify a variable in the calling frame or procedure to store the value. The basic syntax is:\n```sql\n[return_variable =] callproc procedurename\n```\nHere, `return_variable` is the name of the variable in the calling frame or procedure that will receive the returned value. The data type of the return variable should be compatible with the return value of the called procedure.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "What are the different ways to call a 4GL procedure using the callproc statement in Actian 4GL?",
        "input": "",
        "output": "There are two main ways to call a 4GL procedure using the callproc statement:\n1. Calling a procedure with no return value or parameters, as demonstrated by the basic syntax:\n```sql\ncallproc procedurename\n```\n2. Calling a procedure that returns a value and passing parameters if needed. In this case, specify the variable to receive the return value and pass the parameter(s) using the syntax:\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "What are the rules for specifying parameters in Actian 4GL procedures when using the callproc statement?",
        "input": "",
        "output": "In Actian 4GL, you specify the parameters of a procedure being called with the callproc statement by name rather than by position. This means that you can pass them in any order and you need not pass all the parameters. The syntax for specifying parameters is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\nIn this syntax, *expression* is the value that will be passed to a specific parameter in the called procedure. Because you specify the parameters by name rather than by position, you can pass them in any order and you need not pass all the parameters. Variables in the expression can be any type, including reference variables and array variables.\n\nHere are some examples of calling procedures with specified parameters:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\nIn this example, the `remove_new_detail` procedure has two parameters: `new_details_frames` and `details_frame`. Their respective values are passed by the expressions `new_details_frames` and `video.details_frame`.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "Explain how to receive a return value from a called 4GL procedure in Actian.",
        "input": "",
        "output": "When a 4GL procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\nIn this syntax, `return_variable` is a local variable declared before calling the procedure that will hold the returned value. The data type of the return variable must be compatible with the return value of the called procedure.\n\nHere's an example:\n```sql\nresult = callproc get_total_sum();\n```\nIn this example, the `get_total_sum` procedure returns a numeric value, and the returned result is stored in the variable `result`.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "What is the basic syntax of calling a 4GL procedure without any parameters or return values in Actian 4GL?",
        "input": "",
        "output": "The basic syntax for calling a 4GL procedure without any parameters or return values in Actian 4GL using the `callproc` statement is as follows:\n```sql\ncallproc procedurename;\n```\nHere, `procedurename` is the name you gave to the procedure when you created it.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "How do you specify a variable in the calling frame or procedure to receive the return value of a called 4GL procedure with a return value?",
        "input": "",
        "output": "To specify a variable in the calling frame or procedure to receive the return value of a called 4GL procedure with a return value, you can use the following syntax in your `callproc` statement:\n```sql\n[return_variable =] callproc procedurename;\n```\nIn this syntax, `return_variable` represents the name of the variable you've defined to store the returned value. Ensure that the data types of the return variable and the procedure's return value match for correct operation.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "What is the basic syntax for calling a 4GL procedure without any parameters in Actian 4GL?",
        "input": "",
        "output": "In the simplest version of the `callproc` statement, you can call a procedure with no return value or parameters. The basic syntax is:\n```sql\ncallproc procedurename\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "How do you pass multiple parameters to a 4GL procedure when using the callproc statement in Actian 4GL?",
        "input": "",
        "output": "To pass multiple parameters to a 4GL procedure, you specify each parameter name along with its corresponding expression within parentheses. The syntax is:\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "If a 4GL procedure returns a value, explain what should be done in Actian to receive that value.",
        "input": "",
        "output": "When the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be of the same data type as the return value. The basic syntax is: `[return_variable =] callproc procedurename`. This tells Actian that there is a variable where it should place the return value after executing the procedure.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    },
    {
        "instruction": "Explain how you can pass parameters to 4GL procedures in Actian, and give an example of passing two parameters.",
        "input": "",
        "output": "To pass a value to a 4GL procedure in the `callproc` statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is: `[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]`.\n\nHere's an example where we pass two parameters to a 4GL procedure:\n\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\nIn this example, `remove_new_detail` is the name of the 4GL procedure to call. The first parameter `new_details_frames` will receive the value of `new_details_frames`, and the second parameter `details_frame` will receive the value of `video.details_frame`.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->call_4gl_procedures",
        "task_description": "Explain how you call 4GL procedures in Actian 4GL.",
        "document": [
            "# How You Can Call 4GL Procedures\n\nThe callproc statement lets you call a global 4GL procedure from any OpenROAD script or another 4GL procedure. You also use the callproc statement to call a local procedure defined in the current frame or procedure.\n\n## Basic Syntax\n\nIn the simplest version of the statement, you can call a procedure with no return value or parameters. The basic syntax is:\n\n```sql\ncallproc procedurename\n```\n\n### *procedurename*\n\nSpecifies the name that you gave to the 4GL procedure when you created it. You can enter the procedure name directly or you can use a variable to specify the procedure name dynamically. Using a variable lets you specify the procedure name at runtime.\n\nExample:\n```sql\ncallproc error_handler;\n```\n\nWhen the procedure returns a value, you must specify a variable in the calling frame or procedure to receive the return value. The return variable must be the same data type as the return value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename\n```\n\n## How You Can Pass Parameters to 4GL Procedures\n\nTo pass a value to a 4GL procedure in the callproc statement, you specify the name of the parameter in the 4GL procedure that is to receive the value. The basic syntax is:\n\n```sql\n[return_variable =] callproc procedurename [(parameter = expression {, parameter = expression})]\n```\n\n### *parameter*\n\nAssigns the expression in the callproc statement to the parameter in the called procedure that you declared with the procedure statement. For more information about declaring procedure parameters, see the *Language Reference Guide* online help.\n\nBecause you specify the parameters by name rather than by position, you can pass them in any order, and you need not pass all the parameters.\n\n### *expression*\n\nSpecifies a constant or any legal OpenROAD expression, as long as the resulting data type is compatible with the data type of the local variable in the procedure. Variables in the expression can be any type, including reference variables and array variables.\n\nExample:\n```sql\ncallproc remove_new_detail(new_details_frames = new_details_frames, details_frame = video.details_frame);\n```\n\nAny variable in the procedure that you do not specify in the parameter list is set to its default value.\n\nParameters to 4GL procedures can be passed by value and by reference. For a discussion of passing parameters by value and by reference, see How You Can Pass Parameters Between an Active Child and Inactive Parent.\n\nThe value of the referenced variable is not updated until the called procedure returns. At this point, the variable in the calling frame is updated the same way it would be if you had used an assignment statement. If a field on the form is associated with the variable, the field does not display the new value until the current event block completes. To cause the value to update before the end of the event block, you can use the Flush method immediately after the callproc statement. For more information about the Flush method, see the *Language Reference Guide* online help."
        ]
    }
]
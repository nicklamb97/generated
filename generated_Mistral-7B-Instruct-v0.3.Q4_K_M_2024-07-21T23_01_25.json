[
    {
        "instruction": "Translate this 4GL function into a C# method: FUNCTION is_valid_date(p_date DATE) RETURNS BOOLEAN. BEGIN IF MONTH(p_date) < 1 OR MONTH(p_date) > 12 THEN RETURN FALSE; ENDIF\nIF DAYOFMONTH(p_date) < 1 OR DAYOFMONTH(p_date) > LASTDAYOFMONTH(p_date) THEN RETURN FALSE; ENDIF\nRETURN TRUE; END;",
        "input": "",
        "output": "public bool IsValidDate(DateTime date)\n{\n    if (date.Month < 1 || date.Month > 12) return false;\n    if (date.Day < 1 || date.Day > DateTime.DaysInMonth(date.Year, date.Month)) return false;\n    return true;\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# method that implements the functionality of this Actian 4GL loop. How would you convert this 4GL loop into C#? LOOP FOR i = 1 TO 5 STEP 2. ... ENDLOOP;",
        "input": "",
        "output": "public void LoopExample()\n{\n    for (int i = 1; i <= 5; i += 2)\n    {\n        Console.WriteLine(i);\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is the syntax in C# to access a SQL stored procedure parameter with its corresponding name?",
        "input": "",
        "output": "To access a SQL stored procedure parameter by its name in C#, use `@parameterName` within your command text or use the `Parameters` collection of the `SqlCommand` object and set the parameter name using `command.Parameters[\"@parameterName\"].Value = value;`",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL loop statement to C#. Respond only in code: WHILE counter < 10 DO PROCESS_ORDER(counter); END WHILE counter <= 10;",
        "input": "",
        "output": "for (int counter = 0; counter < 10; counter++)\n{\n    ProcessOrder(counter);\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this Actian 4GL cursor statement to C#. Respond only in code: DECLARE customer_cursor CURSOR FOR SELECT * FROM customers; OPEN customer_cursor; FETCH NEXT customer_cursor INTO cust_id, cust_name; WHILE NOT EOF(customer_cursor) DO PROCESS_CUSTOMER(); END WHILE CLOSE customer_cursor;",
        "input": "",
        "output": "using (var customerCursor = new OleDbCommand(\"SELECT * FROM customers\", connection))\n{\n    customerCursor.Open();\n    using (var reader = customerCursor.ExecuteReader())\n    {\n        while (reader.Read())\n        {\n            ProcessCustomer(reader.GetInt32(0), reader.GetString(1));\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is a common idiomatic way to handle exceptions in Actian 4GL and how can it be translated to C#?",
        "input": "",
        "output": "In Actian 4GL, you can use the TRY-CATCH block to handle exceptions. In C#, you can also use try-catch blocks to handle exceptions. However, in C#, you don't need the EXIT WHILE; statement inside the CATCH block as it is not needed to exit from a try block when an exception occurs. Here's an example:\n\nActian 4GL:\nTRY CALL process_data(); END TRY\nCATCH LET error = \"An error occurred while processing data.\"; RETURN -1; END TRY\n\nC#:\ntry\n{\n    ProcessData();\n}\ncatch (Exception ex)\n{\n    throw new Exception(\"An error occurred while processing data.\", ex);\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL DO-WHILE loop to C#. Respond only in code: DO IF p_count >= 5 THEN LEAVE WHILE; ELSE SET p_count = p_count + 1 END IF; ENDDO LOOP",
        "input": "",
        "output": "int count = 0;\nwhile (count < 5)\n{\n    if (count >= 5)\n        break;\n    ++count;\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain the equivalent C# construct for Actian's %IF-%ELSEIF-%ELSE structures. Provide a real-life example using realistic data in your answer.\n\nAssuming we have the following variables: `int temperature`, `string message` and `double humidity`. We want to set `message` according to the weather conditions as follows:\n1. If the temperature is greater than 30, then set \"It's hot.\" as the message\n2. Else if the temperature is between 20 and 30, then set \"It's pleasant.\" as the message\n3. Otherwise, set \"It's cold.\" as the message",
        "input": "temperature = 25; humidity = 45.2;",
        "output": "if (temperature > 30)\n{\n    message = \"It's hot.\";\n}\nelse if (temperature >= 20 && temperature <= 30)\n{\n    message = \"It's pleasant.\";\n}\nelse\n{\n    message = \"It's cold.\";\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Create a C# method that accepts two arguments: `string` and `int`. The method should return the concatenated value of these inputs separated by a space.",
        "input": "string cityName = \"New York\"; int population = 8623000;",
        "output": "void PrintCityPopulation(string city, int pop)\n{\n    Console.WriteLine($\"{city} {pop}\");\n}\nPrintCityPopulation(\"New York\", 8623000);",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain the difference between cursors in Actian 4GL and C# and provide an example for each.",
        "input": "Create a simple program to list all orders with total_amount greater than 200 for a given customer (customer_id = 1001) using cursors in both Actian 4GL and C#.",
        "output": "In Actian 4GL, a cursor is a control structure that enables accessing the rows of a table one by one or multiple times, forward, backward, or randomly. The cursor acts like a pointer to a row, allowing you to fetch the columns in the current row and update them if needed. Here's an example:\n\nActian 4GL:\nDEFINE CURSOR orders_cursor AS SELECT * FROM orders WHERE customer_id = 1001 AND total_amount > 200;\nDO WHILE NOT EOF OF orders_cursor;\n    DISPLAY order_date, total_amount;\n    GOTO orders_cursor;\nEND;\n\nIn C#, a cursor is not a native concept. Instead, you can use the ADO.NET DataReader to iterate through the results of a query, row by row, and fetch the columns one at a time. Here's an example:\n\nC#:\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT * FROM orders WHERE customer_id = 1001 AND total_amount > 200\", connection))\n    {\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                Console.WriteLine($\"{reader[0]}: {reader[1]}\");\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What are the common data types in Actian 4GL and their C# counterparts, and how can you convert between them?",
        "input": "Convert a simple example where a 4GL character type variable 'char_var' is assigned the string \"Hello, world!\", to its C# equivalent.",
        "output": "In Actian 4GL, the CHAR data type represents fixed-length strings. To represent that in C#, you can use the `string` data type, which does not have a fixed length. Here's an example of assigning a string value to a `StringBuilder` object and converting it to its Actian 4GL equivalent:\n\nC#:\nvar char_var = new StringBuilder(\"Hello, world!\");\nvar actianCharVar = char_var.ToString().PadLeft(10); // Assume the maximum length of the CHAR variable in Actian is 10 characters.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How can you convert loops and iteration in Actian 4GL to C#? Provide an example for both languages.",
        "input": "Create a loop that calculates the factorial of numbers from 1 to 5 using both Actian 4GL and C#.",
        "output": "In Actian 4GL, you can use DO-END loops or PERFORM statements to iterate over a sequence of values. Here's an example for calculating the factorial of numbers from 1 to 5:\n\nActian 4GL:\nDEFINE VARIABLE fact AS DECIMAL;\nPERFORM i FROM 1 BY 1 UNTIL 6 DO;\n    DEFINE VARIABLE num AS DECIMAL = i - 1;\n    fact = fact * i;\nEND PERFORM;\nDISPLAY \"Factorial of numbers from 1 to 5 is: \", fact;\n\nIn C#, you can use for loops or while loops to iterate over a sequence of values. Here's an example for calculating the factorial of numbers from 1 to 5:\n\nC#:\nusing System;\n\nnamespace FactorialProgram\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            decimal fact = 1;\n            for (int i = 1; i <= 5; i++)\n            {\n                fact *= i;\n            }\n            Console.WriteLine(\"Factorial of numbers from 1 to 5 is: \" + fact);\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Can you write a function in C# that performs a similar operation to the ACTIAN SQL Query: SELECT AVG(salary) FROM employees WHERE department = 'IT'?",
        "input": "Assuming you have an Employees class with the following properties: Name, Age, Salary, and Department. The Employee data is stored in List<Employee>.\n```csharp\nList<Employee> employees = new List<Employee> {\n    new Employee {Name = \"Alice\", Age = 30, Salary = 75_000, Department = \"IT\"},\n    // ... additional employee records ...\n};\n```",
        "output": "```csharp\npublic double CalculateAverageSalary(List<Employee> employees, string department)\n{\n    var eligibleEmployees = employees.Where(emp => emp.Department == department).ToList();\n    if (eligibleEmployees.Count == 0) return -1; // Indicate that there were no records found for the provided department.\n    double totalSalary = 0;\n    foreach (var employee in eligibleEmployees)\n    {\n        totalSalary += employee.Salary;\n    }\n    return totalSalary / eligibleEmployees.Count; // The average salary is calculated by dividing the total salary by the number of employees for the specific department.\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "In Actian 4GL, how can you perform an SQL UPDATE operation on multiple rows using a subquery? What's the equivalent C# code to achieve this functionality?",
        "input": "Suppose you have two tables, `orders` and `order_items`, where the `orders` table has fields order_id, customer_id, and total_price. The `order_items` table contains item_id, order_id, product_name, quantity, and price. You want to update the total_price of every row in the orders table where the customer_id equals a certain value (let's say 123), by summing the prices of all the order items for that order and multiplying it by some discount factor.\n```csharp\nList<Order> orders = new List<Order> {\n    // ... Order instances with corresponding order_items list...\n};\nint customerIdToUpdate = 123;\ndouble discountFactor = 0.95; // Example of a discount factor.\n```",
        "output": "First, let's convert the given example to Actian 4GL:\n\nActian 4GL (SQL):\n```sql\nUPDATE orders\nSET total_price = (SELECT SUM(quantity * price) FROM order_items oi WHERE oi.order_id = o.order_id) * :discountFactor\nWHERE customer_id = :customerIdToUpdate;\n```\nNow, the equivalent C# code:\n\nC#:\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    var discountedOrders = orders\n        .Where(order => order.CustomerId == customerIdToUpdate)\n        .Select(order =>\n        {\n            double totalPrice = order.OrderItems\n                .Sum(oi => oi.Quantity * oi.Price);\n            double discountedTotalPrice = totalPrice * discountFactor;\n            return new Order\n            {\n                // Set the updated `total_price` field here and return the updated Order instance.\n                TotalPrice = discountedTotalPrice\n            };\n        });\n    using (SqlCommand command = connection.CreateCommand())\n    {\n        command.CommandText = @\"\n            UPDATE orders\n            SET total_price = (SELECT @discountedOrdersTable FROM dual.json_table(\n                @discountedOrdersJson, '$.[*]'\n            ))\n            WHERE customer_id = @customerIdToUpdate;\";\n        command.Parameters.AddWithValue(\"@discountedOrdersJson\", JsonSerializer.Serialize(discountedOrders));\n        command.Parameters.AddWithValue(\"@discountedOrdersTable\", SqlDbType.Structured);\n        command.Parameters[\"@discountedOrdersTable\"].UdtTypeName = \"json_table\"; // This assumes the server-side SQL has a custom user-defined type (UDT) called json_table for working with JSON data.\n        command.Parameters.AddWithValue(\"customerIdToUpdate\", customerIdToUpdate);\n        command.ExecuteNonQuery();\n    }\n}\n```\nNote that this C# example assumes the existence of a user-defined type (UDT) called `json_table`. If the server doesn't have this custom UDT, you may need to create one or find an alternative solution for handling JSON data in SQL.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL conditional statement to C#. Respond only in code: IF order_total < 100 THEN PRINT \"Order Total is less than 100\"; ELSE PRINT \"Order Total is 100 or more.\";",
        "input": "",
        "output": "if (orderTotal < 100)\n{\n    Console.WriteLine(\"Order Total is less than 100\");\n}\nelse\n{\n    Console.WriteLine(\"Order Total is 100 or more.\");\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How can you handle error conditions in Actian 4GL when converting the code to C#? Provide a general example of error handling using try-catch blocks and a common exception type.",
        "input": "Consider this example 4GL code snippet:\n```\nOPEN CONNECTION TO datasource1 USING db_userid AS userid, db_password AS password;\nSELECT * FROM customers WHERE customer_id = :customerId;\nFETCH NEXT 1 ROWS ONLY;\n```\nThis code retrieves a single row from the `customers` table using the specified `customerId`. In case of any errors (e.g., incorrect password, non-existing database, etc.), how can this example be adapted to C# with proper error handling?",
        "output": "In C#, you can use the `using` statement to manage disposable resources (like a connection), and wrap your code inside try/catch blocks to handle exceptions. Here's an example for your given 4GL code snippet:\n\nC#:\n```csharp\nstring dbUserid = \"db_userid\";\nstring dbPassword = \"db_password\";\nint customerId = /* Provide a specific customer ID value here */;\n\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    try\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"SELECT * FROM customers WHERE customer_id = @customerId\", connection))\n        {\n            command.Parameters.AddWithValue(\"@customerId\", customerId);\n            SqlDataReader reader = command.ExecuteReader();\n\n            if (!reader.Read())\n                throw new Exception(\"Customer not found.\");\n\n            // Read and process the retrieved data here\n        }\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"An error occurred: {ex.Message}\");\n        // Handle errors according to your application's needs, such as showing a message to the user or logging the exception.\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you convert conditional statements in Actian 4GL to C#? Respond only in code.",
        "input": "In this example, what would be the equivalent C# code for an IF-THEN-ELSE statement in Actian 4GL where a customer is given a discount of 10% if their total purchase exceeds $500?",
        "output": "In Actian 4GL, you can write:\n\nIF total_purchase > 500 THEN\n    SET customer_discount = .1 * total_purchase;\nELSE\n    SET customer_discount = 0;\nEND-IF;\n\nIn C#, you can use if-else statements to accomplish the same logic:\n\nusing System;\n\nnamespace CustomerDiscountProgram\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            decimal totalPurchase = 600;\n            decimal customerDiscount = totalPurchase > 500 ? (totalPurchase * .1m) : 0;\n            Console.WriteLine(\"Customer Discount: \" + customerDiscount);\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Suppose you have an Actian 4GL function that performs a calculation on two arrays of numbers. Write a C# method to perform the same operation. Provide a specific example of data for the input arrays.",
        "input": "Declare A[100] of Integer and B[50] of Integer.\nInitialise A with {1, 2, 3, ..., 100} and B with {5, 7, 9, ..., 104}. Perform element-wise multiplication of A and B and store the result in C array of length 150.",
        "output": "int[] A = Enumerable.Range(1, 100).ToArray();\nint[] B = { 5, 7, 9, ..., 104 }; // Provide the rest of elements up to size 50.\nint[] C = new int[A.Length + B.Length];\nfor (int i = 0; i < A.Length; i++)\n{\n    C[i] = A[i] * B[i];\n}\n// Fill the rest of array elements with 0\nfor (int i = A.Length; i < C.Length; i++)\n{\n    C[i] = 0;\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Create a C# method that accepts two arguments: `string` and an `ArrayList`. The method should filter the list based on the given string and return the filtered list.",
        "input": "ArrayList fruits = new ArrayList();\nfruits.Add(\"Apple\");\nfruits.Add(\"Banana\");\nfruits.Add(\"Cherry\");\nfruits.Add(\"Date\");\nfruits.Add(\"Elderberry\");\nstring searchStr = \"A\";",
        "output": "void FilterFruits(string pattern, ArrayList fruitList)\n{\n    var filteredList = new ArrayList();\n    foreach (var item in fruitList)\n    {\n        if (item.ToString().StartsWith(pattern))\n            filteredList.Add(item);\n    }\n    return filteredList;\n}\nArrayList filteredFruits = FilterFruits(\"A\", fruits);",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to handle multiple SQL queries in a C# program using the ADO.NET library. Use specific examples if possible and provide code snippets where necessary.",
        "input": "Suppose we have two tables: \"Orders\" with columns \"OrderID\", \"CustomerName\", and \"OrderDate\", and \"Products\" with columns \"ProductID\", \"ProductName\", \"Price\". We want to get the total order amounts for each customer who ordered a product named \"Product A\" from January 1, 2023, to March 31, 2023.",
        "output": "To handle multiple SQL queries using ADO.NET in C#, we can use a `SqlConnection`, `SqlCommand` for each query, and a `SqlDataReader` to read the result set. Here's an example of how you can achieve this:\n\n```csharp\nusing System.Data;\nusing System.Data.SqlClient;\n\n// Initialize the connection string.\nstring connStr = \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=mypassword;\";\n\n// Create and open a connection to the database.\nSqlConnection conn = new SqlConnection(connStr);\nconn.Open();\n\n// Define the first query to get customer information who ordered product A.\nstring query1 = \"SELECT CustomerName FROM Orders INNER JOIN Products ON Orders.ProductID = Products.ProductID WHERE ProductName = 'Product A' AND OrderDate >= '2023-01-01' AND OrderDate <= '2023-03-31'\";\nSqlCommand cmd1 = new SqlCommand(query1, conn);\n\n// Create a reader to read the result set of the first query.\nSqlDataReader reader1 = cmd1.ExecuteReader();\n\n// Process the results by reading each row in the reader.\nwhile (reader1.Read())\n{\n    // Read the customer name from the \"CustomerName\" column and store it.\n    string customerName = reader1[\"CustomerName\"].ToString();\n\n    // Define the second query to get the total order amount for this specific customer.\n    string query2 = $\"SELECT SUM(OrderTotal) FROM Orders WHERE CustomerName = '{customerName}'\";\n    SqlCommand cmd2 = new SqlCommand(query2, conn);\n\n    // Create a reader to read the result set of the second query.\n    SqlDataReader reader2 = cmd2.ExecuteReader();\n\n    // Read the total order amount for the current customer and store it.\n    if (reader2.Read())\n    {\n        decimal totalOrderAmount = (decimal)reader2[\"SUM(OrderTotal)\"];\n        Console.WriteLine($\"Customer: {customerName}, Total Order Amount: {totalOrderAmount}\");\n    }\n    // Close the reader for the second query and move to the next customer.\n    reader2.Close();\n}\n// Close the connection when you're done.\nconn.Close();\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a LINQ query to find and display all car makes in the `CarCollection` list that have cars with more than one model.",
        "input": "CarCollection is a List of Car objects, where each object represents a car make and models:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace LINQQueryExample\n{\n    public class Car\n    {\n        public string Make { get; set; }\n        public List<string> Models { get; set; }\n\n        public Car(string make, IEnumerable<string> models)\n        {\n            this.Make = make;\n            this.Models = new List<string>(models);\n        }\n    }\n\n    public class CarCollection\n    {\n        public static readonly List<Car> Cars = new()\n        {\n            new Car(\"Toyota\", new[] {\"Corolla\", \"Camry\"}),\n            new Car(\"Honda\", new[] {\"Civic\"}),\n            new Car(\"Ford\", new[] {\"Mustang\", \"F150\", \"Explorer\"})\n        };\n    }\n}\n```",
        "output": "```csharp\nCar makes with more than one model:\n1. Ford\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Provide a code snippet that converts the given 4GL loop statement to C#. Respond only in code: WHILE counter <= 10 DO REPEAT tasks; END WHILE;",
        "input": "",
        "output": "for (int counter = 1; counter <= 10; counter++)\n{\n    // Repeat the tasks here\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL string concatenation to C#. Respond only in code: SET str_result = CONCAT('Hello, ', FIRST_NAME, '! Welcome to our store.');",
        "input": "",
        "output": "string firstName = \"John\";\nstring strResult = $\"Hello, {firstName}! Welcome to our store.\";",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Can you give an example of how to define an Employee class in C# following best practices with proper properties and constructors?",
        "input": "",
        "output": "```csharp\npublic class Employee\n{\n    public int Id { get; set; } // Auto-property with a private backer field for encapsulation.\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public DateTime DateOfBirth { get; set; }\n    public decimal Salary { get; set; }\n    public Department Department { get; set; } // This is a property for the Enum Department.\n\n    // Default constructor. It initializes all properties to default values or null.\n    public Employee()\n    {\n        this.Id = 0;\n        this.FirstName = string.Empty;\n        this.LastName = string.Empty;\n        this.DateOfBirth = new DateTime(1900, 1, 1);\n        this.Salary = 0M;\n    }\n\n    // Constructor with parameters for initializing specific properties.\n    public Employee(int id, string firstName, string lastName, DateTime dateOfBirth, decimal salary)\n    {\n        this.Id = id;\n        this.FirstName = firstName;\n        this.LastName = lastName;\n        this.DateOfBirth = dateOfBirth;\n        this.Salary = salary;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "The 4GL code performs a specific operation: IF COUNT(orders) < 5 THEN SELECT orderId FROM orders ELSE SELECT SUM(orderValue) FROM orders END IF. Write equivalent C# code to handle the same condition using switch-case construct.",
        "input": "Assuming you have an Order class with Id, Value, and a Count property for the number of records in the List<Order>. The Orders data is stored in List<Order>.\n```csharp\nList<Order> orders = new List<Order> { /* ... order records ... */ };\nint count = orders.Count; // This variable holds the total count of orders.\n```",
        "output": "```csharp\npublic enum OrderSelectionType\n{\n    Id,\n    SumValue\n}\n\npublic static OrderSelectionType SelectOrderInfo(List<Order> orders, int orderCount)\n{\n    switch (orderCount)\n    {\n        case <= 4:\n            return OrderSelectionType.Id;\n        default:\n            return OrderSelectionType.SumValue;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Assuming you have a custom function that generates a list of unique values from a given column using Actian SQL. Translate the Actian SQL code to C# LINQ query for the same functionality.",
        "input": "```sql\nSELECT DISTINCT category\nFROM orders\nWHERE is_active = true;\n```",
        "output": "```csharp\nvar uniqueCategories = orders\n    .Where(o => o.IsActive)\n    .Select(o => o.Category)\n    .Distinct()\n    .ToList();\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert the following Actian 4GL code to C# that calculates the total count of active orders (is_active = true), then sorts them by order date, and returns a list of the first five sorted orders.",
        "input": "```4gl\nDEFINE VAR resultList LIST OF ORDER.\nDEFINE VAR sortOrder BY date ASC.\nFETCH FIRST 5 ROWS FROM (\n    SELECT * FROM orders\n    WHERE is_active = true\n    ORDER BY date ASC\n) INTO resultList SORTED BY sortOrder;\n```",
        "output": "```csharp\nvar activeOrders = orders.Where(o => o.IsActive).OrderBy(o => o.Date);\nvar sortedFirstFiveOrders = activeOrders.Take(5).ToList();\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# method to convert an Actian 4GL date in the format \"YYYYMMDD\" (e.g., 20210531) into a C# DateTime object using the DateTime.Parse method.",
        "input": "```4gl\nDEFINE VAR orderDate AS CHARATER \"20210531\".\n```",
        "output": "```csharp\npublic static DateTime ConvertOrderDate(string orderDate)\n{\n    return DateTime.Parse($\"{orderDate}-01-01\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Can you give an example of a simple function in C# that performs a conversion similar to Actian's STRTOCHAR() function? The function should convert an integer into a string representation, specifically the Roman numerals.",
        "input": "```csharp\npublic int number = 17; // for example, convert 17 into MCMXVII (MCM stands for 1000, CV is 100, X is 10 and VII are five 5s)\n```",
        "output": "```csharp\npublic string RomanNumerals(int number)\n{\n    var numeralMap = new Dictionary<int, char>\n    {\n        {1, 'I'},\n        {4, 'IV'},\n        {5, 'V'},\n        {9, 'IX'},\n        {10, 'X'},\n        {40, 'XL'},\n        {50, 'L'},\n        {90, 'XC'},\n        {100, 'C'},\n        {400, 'CD'},\n        {500, 'D'},\n        {900, 'CM'},\n        {1000, 'M'}\n    };\n\n    string result = \"\";\n    int currentValue = number;\n    foreach (var entry in numeralMap.Reverse())\n    {\n        while (currentValue >= entry.Key)\n        {\n            currentValue -= entry.Key;\n            result += entry.Value;\n        }\n    }\n    return result;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Can you convert the following Actian 4GL code snippet for creating an array into C#?\n```\nDEFINE VAR employee_arr AS ARRAY[0..9] OF EMPLOYEE.\n```",
        "input": "The Employee class is defined as follows:\n```csharp\npublic class Employee\n{\n    public string Name { get; set; }\n    // ... additional properties ...\n}\n```",
        "output": "In C#, you do not use the ARRAY data structure to define arrays like in Actian 4GL. Instead, we can simply declare an array of Employee objects:\n```csharp\nEmployee[] employee_arr = new Employee[10]; // An array containing 10 employee objects.\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# method to convert a `decimal` value in cents to a formatted dollar amount. The method should return the value in string format, including two decimal places after the decimal point.",
        "input": "",
        "output": "string DollarFormat(decimal amountInCents)\n{\n    var amount = (decimal)$(amountInCents / 100);\n    return $\"${amount:N2}\";\n}\nConsole.WriteLine(DollarFormat(159));",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Create a C# function to check if an entered email address is valid or not using regex (Regular Expressions).",
        "input": "string emailAddress = \"test@example.com\";",
        "output": "bool IsValidEmail(string email)\n{\n    var regEx = new Regex(@\"\\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-zA-Z]{2,}\\z\");\n    return regEx.IsMatch(email);\n}\nConsole.WriteLine(\"Valid email: \" + IsValidEmail(\"test@example.com\"));",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What are the common traps and challenges when converting Actian 4GL code to C#?",
        "input": "",
        "output": "When converting Actian 4GL code to C#, common traps include handling date and time manipulation, dealing with procedural programming concepts like cursors, managing database connections and transactions, and understanding the difference in data types between 4GL and C#. Additionally, understanding how to structure and organize objects and methods, as well as learning to leverage modern design patterns for efficient code organization, are important considerations.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given the following 4GL function to calculate an average, explain what it does and provide the equivalent C# code: FUNCTION average_grade(p_grades NUMERIC[]) RETURNS NUMERIC. BEGIN DECLARE avg AS NUMERIC; DECLARE sum AS NUMERIC; SET sum = 0; FOR EACH grade IN p_grades DO SET sum = sum + grade; END LOOP; SET avg = sum / LENGTH(p_grades); RETURN avg; ENDIF; END;",
        "input": "",
        "output": "The given function calculates the average of a list of grades. In C#, this can be achieved by using the following code:\npublic double AverageGrade(double[] grades)\n{\n    double sum = 0;\n    for (int i = 0; i < grades.Length; ++i)\n        sum += grades[i];\n    return sum / grades.Length;\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is a common pattern for creating functions in Actian 4GL and C#? Provide an example of a function definition with arguments, return type, and body in both languages for the given task.",
        "input": "Consider the following Actian 4GL function that calculates the total amount spent by a customer on a specific date:\n```\nDEFINE FUNCTION CalculateTotalAmount(customer_id INTEGER, purchase_date DATE) AS DECIMAL (18,2).\nBEGIN\n   ...\nEND;\n```",
        "output": "In C#, you can define functions with similar characteristics using methods. Here's the equivalent C# method:\n\nC#:\n```csharp\npublic static decimal CalculateTotalAmount(int customerId, DateTime purchaseDate)\n{\n    // Implement your calculation logic here\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How can you handle Actian's built-in functions and special characters when converting them to C# equivalents?",
        "input": "Consider the following Actian code snippet using a built-in function called \"TRIM\": TRIM(F1.fieldName)",
        "output": "In C#, you can use the System.Text.RegularExpressions.Regex.Replace method with a pattern to remove leading and trailing white spaces from the string as follows: `Regex.Replace(F1.fieldName, @\"\\s+\", \"\")`.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Identify a common Actian data type that doesn't have a direct equivalent in C# and describe how you can work around this issue when converting code.",
        "input": "",
        "output": "The TIMESTAMP data type in Actian does not have an exact equivalent in C#. However, you can represent a timestamp as a DateTime object in C# by converting it to a string format like \"yyyy-MM-dd HH:mm:ss\" and then parsing it using the DateTime.ParseExact method or DateTime.TryParseExact method.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is the equivalent C# code for Actian 4GL's `UPDATE ... SET ... WHERE EXISTS(...)` syntax? Provide a complete code snippet when possible.",
        "input": "Consider an example table named \"Orders\" with columns 'order_id', 'product_id', and 'quantity'. We have to update the 'quantity' column for all orders whose product has the 'sku' of 'ABC123'.\n\nOur 4GL code snippet is:\n```4gl\nUPDATE Orders\nSET quantity = 500\nWHERE EXISTS (SELECT 1 FROM products WHERE Orders.product_id = products.product_id AND sku = 'ABC123');\n```",
        "output": "In C#, you can use a combination of the `SqlCommand` and `SqlDataReader` classes to achieve this:\n\nFirst, let's assume we have already set up the database connection string. Then, prepare the SQL command:\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    using (SqlCommand command = new SqlCommand(\"\", connection))\n    {\n        // Replace with the actual SQL query.\n        command.CommandText = @\"\n            UPDATE Orders SET quantity = 500\n            WHERE EXISTS (SELECT 1 FROM products\n                WHERE Orders.product_id = products.product_id AND sku = 'ABC123')\";\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Translate the Actian 4GL code for database insertion to C#. Provide examples of both languages.",
        "input": "Here's an example of Actian 4GL code for inserting a new record into the employees table with columns employee_id, first_name, last_name, and email:\n```\nINSERT INTO employees VALUES(next_employee_id(), 'John', 'Doe', 'john.doe@example.com');\n```",
        "output": "In C#, you can use the ADO.NET library to insert a new record into the employees table in SQL Server:\n```csharp\nusing System;\nusing System.Data.SqlClient;\n\nnamespace EmployeesDB\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string connectionString = \"Server=(local)\\\\SQLEXPRESS;\" +\n                                       \"Database=myDB;\" +\n                                       \"User Id=myUser;\" +\n                                       \"Password=myPassword;\";\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                string query = \"INSERT INTO employees VALUES(@employee_id, @first_name, @last_name, @email);\";\n                using (SqlCommand command = new SqlCommand(query, connection))\n                {\n                    command.Parameters.Add(\"@employee_id\", SqlDbType.Int).Value = GetNextEmployeeId(); // Your function to get the next employee ID\n                    command.Parameters.Add(\"@first_name\", SqlDbType.NVarChar).Value = \"John\";\n                    command.Parameters.Add(\"@last_name\", SqlDbType.NVarChar).Value = \"Doe\";\n                    command.Parameters.Add(\"@email\", SqlDbType.NVarChar).Value = \"john.doe@example.com\";\n                    connection.Open();\n                    int rowsAffected = command.ExecuteNonQuery();\n                    Console.WriteLine(rowsAffected + \" row inserted.\");\n                }\n            }\n        }\n        static int GetNextEmployeeId() // Your function to generate the next employee ID\n        {\n            // Implement your logic here, e.g., using SQL query to retrieve the highest employee_id from the employees table and increment it\n            return 1;\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Can you explain how to convert a SQL query used in Actian 4GL into C# LINQ?",
        "input": "Suppose that the following SQL query retrieves customer names from orders where the order value is greater than 50: \"SELECT customerName FROM orders WHERE orderValue > 50\".\n\n```csharp\nList<Order> orders = new List<Order> { /* ... order records ... */ };\n```",
        "output": "In this example, you can use LINQ to Entity Framework (EF) or LINQ without EF to retrieve the desired data. Here's an example using LINQ to Entity Framework:\n\nFirst, create an Order class with Id, Value, CustomerName properties and include navigation properties to reference other entities if necessary. Then define a DbContext for the context of your database as follows:\n\n```csharp\npublic class Order\n{\n    public int Id { get; set; }\n    public decimal OrderValue { get; set; }\n    public string CustomerName { get; set; }\n    // Include any other navigation properties here.\n}\n\npublic DbContext : DbContext\n{\n    // Define the entities and their relationships in the context.\n}\n```\n\nNow, retrieve customer names from orders where order value is greater than 50:\n\n```csharp\nusing (var ctx = new DbContext())\n{\n    var customerNames = ctx.Orders.Where(o => o.OrderValue > 50)\n                               .Select(o => o.CustomerName).ToList();\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Translate the Actian 4GL loop structure for iterating through a range of numbers into C# using a 'for' or 'foreach' loop and explain any differences in syntax between both languages.",
        "input": "Assume you have to print all even numbers from 1 to 20. Here's an example of an Actian 4GL loop that does so:\n```4gl\nDEFINE VAR num AS 1;\nDO WHILE num <= 20;\n    IF MOD(num,2)=0 THEN DO;\n        DISPLAY num;\n    END;\n    num = num + 1;\nEND;\n```",
        "output": "In C#, you can use a 'for' loop or a 'foreach' loop to iterate through a range of numbers. Here's an example using both approaches:\n\nFor Loop:\n```csharp\nfor (int num = 1; num <= 20; num++)\n{\n    if (num % 2 == 0)\n        Console.WriteLine(num);\n}\n```\n\nForeach Loop:\n```csharp\nforeach (int num in Enumerable.Range(1, 21)) // C# 7.0 and above includes range functionality\n{\n    if (num % 2 == 0)\n        Console.WriteLine(num);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is the purpose of this Actian 4GL function? Explain how to convert it into C#. This is a sample code: DEFINE PROCEDURE sayHello(NAME CHARACTER VARYING) LANGUAGE SQL. EXEC SQL BEGIN DECLARE statement; SELECT 'Hello, ' || NAME || ', How are you?' INTO :statement FROM dual; RETURN statement; END-DEFINE;",
        "input": "",
        "output": "This Actian 4GL function defines a stored procedure that accepts a parameter called `NAME` and returns a greeting message formatted with the provided name. In C#, you can convert this function into a method as follows:\n```csharp\npublic static string SayHello(string name)\n{\n    string statement;\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"SELECT 'Hello, ' || @name || ', How are you?' FROM dual\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@name\", name);\n            statement = (string)command.ExecuteScalar();\n        }\n    }\n    return statement;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this Actian 4GL script into C#: SET variable1 TO 'Hello'; IF variable1 > '' THEN message := 'The variable is not empty.' ELSE message := 'The variable is empty.'; END IF;",
        "input": "",
        "output": "```csharp\nstring variable1 = \"Hello\";\nif (!string.IsNullOrEmpty(variable1))\n{\n    Console.WriteLine(\"The variable is not empty.\");\n}\nelse\n{\n    Console.WriteLine(\"The variable is empty.\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a function that implements the functionality of Actian 4GL's `SORT BY ... INDEX` statement in C#. Provide a complete code snippet when possible, including examples for both ascending and descending orders.",
        "input": "Consider an array called \"arr\" with integers: `{32, -19, 65, -48, 47, 0, 8}` and sort the array in descending order using index-based sorting.\n\nOur 4GL code snippet for ascending order is as follows:\n```4gl\nSORT BY arr INDEX ASCENDING;\n```",
        "output": "To implement the same functionality in C#, you can create a custom `SortArrayByIndexAscending` and `SortArrayByIndexDescending` functions. Here's an example for both cases:\n\n```csharp\npublic void SortArrayByIndexAscending(int[] arr)\n{\n    // Initialize the temporary array with the same size as the original array.\n    int[] tempArr = new int[arr.Length];\n\n    // Iterate through each element in the original array, comparing adjacent elements and swapping them if necessary.\n    for (int i = 1; i < arr.Length; ++i)\n    {\n        int current = arr[i];\n        int j = i - 1;\n\n        // Find the position to insert the current element while maintaining the sorted order.\n        while (j >= 0 && current < arr[j])\n        {\n            tempArr[j + 1] = arr[j];\n            j--;\n        }\n\n        // Insert the current element at the found position.\n        tempArr[j + 1] = current;\n    }\n\n    // Copy the sorted array back into the original array.\n    for (int i = 0; i < arr.Length; ++i)\n    {\n        arr[i] = tempArr[i];\n    }\n}\n\npublic void SortArrayByIndexDescending(int[] arr)\n{\n    // Initialize the temporary array with the same size as the original array.\n    int[] tempArr = new int[arr.Length];\n\n    // Iterate through each element in the original array, comparing adjacent elements and swapping them if necessary.\n    for (int i = 1; i < arr.Length; ++i)\n    {\n        int current = arr[i];\n        int j = i - 1;\n\n        // Find the position to insert the current element while maintaining the sorted order in descending order.\n        while (j >= 0 && current > arr[j])\n        {\n            tempArr[j + 1] = arr[j];\n            j--;\n        }\n\n        // Insert the current element at the found position.\n        tempArr[j + 1] = current;\n    }\n\n    // Copy the sorted array back into the original array.\n    for (int i = 0; i < arr.Length; ++i)\n    {\n        arr[i] = tempArr[i];\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is a possible C# code implementation for Actian 4GL's `MERGE ... WITH` statement? Provide a complete code snippet when possible, including examples.",
        "input": "Let's assume we have two tables named \"Customers\" and \"Orders\", where the 'customer_id' column in both tables matches. We want to merge data from both tables based on that matching key and calculate each customer's total sales (the sum of all order amounts for the respective customer).\n\nOur 4GL code snippet would look like:\n```4gl\nMERGE Customers C WITH Orders O BY C.customer_id = O.customer_id;\nSORT BY C.customer_id;\nFOR EACH GROUP OF C GROUP BY C.customer_id;\n    SET C.total_sales = SUM(O.amount);\nEND FOR;\n```",
        "output": "To implement this functionality in C#, you can use LINQ's `GroupBy` and `Aggregate` methods to achieve a similar result:\n\nFirst, let's assume we have the two classes `Customer` and `Order`, and an instance of both is stored in lists called \"customersList\" and \"ordersList\". Here's the code snippet for calculating total sales for each customer:\n\n```csharp\nvar groupedOrders = ordersList\n    .GroupBy(o => o.Customer.Id) // Group by Customer Id\n    .Select(group => new { Customer = group.First(), TotalSales = group.Sum(o => o.Amount) }); // Anonymous type to combine customer and total sales\n\nforeach (var g in groupedOrders)\n{\n    var customer = customersList.First(c => c.Id == g.Customer.Id); // Find the customer\n    customer.TotalSales = g.TotalSales; // Update the customer's Total Sales field with the total sales from their orders\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How can you convert a simple IF-THEN statement in Actian 4GL to C#? Provide an example for both languages.",
        "input": "Write a simple code snippet that checks if the user's age is over 18, and if so, assigns them to the 'adult' variable. In Actian 4GL, you can use IF-ELSE statements.",
        "output": "In Actian 4GL:\nDEFINE VARIABLE age AS INTEGER;\nREAD user_age FROM *USER;\nIF user_age > 18 THEN SET adult = \"Yes\"; ELSE SET adult = \"No\"; END IF;\nDISPLAY adult;\n\nIn C#:\nusing System;\n\nnamespace AgeClassificationProgram\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.Write(\"Enter your age: \");\n            int user_age = Convert.ToInt32(Console.ReadLine());\n            string adult = (user_age > 18) ? \"Yes\" : \"No\";\n            Console.WriteLine(adult);\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What are common data types in Actian 4GL and C#? Compare their usage and any differences between these data types.",
        "input": "",
        "output": "Common data types in both Actian 4GL and C# include:\n- Boolean: used for logical values (true or false)\n- Integer: used for whole numbers (e.g., 1, -5, etc.)\n- Decimal/Float: used for real numbers with a decimal point (e.g., 3.14, -2.00, etc.)\n- String: used for text or character data (e.g., \"Hello World\", \"John Doe\", etc.)\n\nIn Actian 4GL, you can also use CHARACTER and DATE/TIME types. In C#, the CHARACTER type is replaced with the string data type, but the DateTime type provides more precise control over dates and times than Actian 4GL's native date handling.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Provide an example of how to convert a FOR loop in 4GL to a while loop in C#. Use a simple counter variable and the range of numbers from 1 to 5 inclusive.",
        "input": "```4gl\nFOR i = 1 TO 5 DO\n   DISPLAY \"i: \", i;\nEND;\n```",
        "output": "```csharp\nint i = 1;\nwhile (i <= 5)\n{\n    Console.WriteLine(\"i: \" + i);\n    i++;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this Actian 4GL function that creates a temporary table and populates it with the average price of products per category to its equivalent C# LINQ expression, then returns a list containing the averages. The data is stored in the 'products' table which contains columns id (int), category (string) and price (decimal).",
        "input": "```4gl\nDEFINE TEMPORARY TABLE temp_table (category STRING, avg_price DECIMAL);\n\nDEFINE VAR totalPriceSum LONG, totalCount INT;\n\nFOR EACH g IN GROUP products BY category DO\nBEGIN\n    DEFINE VAR totalPrice LONG = 0;\n    DEFINE VAR count INT = 0;\n\n    FETCH EVERY ROW FROM g INTO product;\n    WHILE NOT AT END OF g DO BEGIN\n        DEFINE VAR currentPrice DECIMAL = product.price;\n        ADD totalPrice + currentPrice TO totalPriceSum;\n        ADD 1 TO count;\n        ADVANCE g;\n    END;\n    DEFINE VAR avg_price DECIMAL = totalPrice / count;\n    INSERT temp_table VALUES category, avg_price;\nEND;\n```",
        "output": "```csharp\nvar averages = (from productGroup in products.GroupBy(p => p.Category)\n                select new\n                {\n                    Category = productGroup.Key,\n                    AvgPrice = productGroup.Average(p => p.Price)\n                }).ToList();\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Modify this Actian 4GL block of code to use a C# loop:\n```\nWHENEVER ANY ERROR OR WARNING DO\nBEGIN\n   WRITE SYSTEM \"Error or Warning Occurred!\" LABEL error_label;\nEND;\n```",
        "input": "A sample log output in Actian 4GL with 5 errors and warnings:\n```\n2023-03-14 09:30:00 Error occurred!\n2023-03-14 09:35:00 Warning: Data missing\n2023-03-14 09:40:00 Warning: Incorrect format\n2023-03-14 09:45:00 Error occurred!\n2023-03-14 09:50:00 Warning: Data missing\n```",
        "output": "C# code using a loop to iterate through the log output and write error or warning messages as needed:\n```\nusing System;\nusing System.Collections.Generic;\n\npublic class LogHandler\n{\n    private List<string> logs = new List<string>()\n    {\n        \"2023-03-14 09:30:00 Error occurred!\",\n        \"2023-03-14 09:35:00 Warning: Data missing\",\n        \"2023-03-14 09:40:00 Warning: Incorrect format\",\n        \"2023-03-14 09:45:00 Error occurred!\",\n        \"2023-03-14 09:50:00 Warning: Data missing\"\n    };\n\n    public void ProcessLog()\n    {\n        foreach (var log in logs)\n        {\n            if (log.Contains(\"Error\"))\n                Console.WriteLine(\"Error or Warning Occurred!\");\n            else if (log.Contains(\"Warning\"))\n            {\n                if (log.Contains(\"Data missing\"))\n                    Console.WriteLine(\"Warning: Data missing\");\n                else\n                    Console.WriteLine(\"Warning: Incorrect format\");\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Implement this Actian 4GL function in C# that performs a simple calculation based on user input:\n\nFUNCTION calculate_total(p_item1 INTEGER, p_item2 INTEGER) RETURNS INTEGER. BEGIN DECLARE total INTEGER; total := p_item1 + p_item2; RETURN total; END;",
        "input": "User input for item 1 and item 2 is given as `5` and `3`, respectively.",
        "output": "C# code to implement the `calculate_total` function:\n```\npublic int CalculateTotal(int item1, int item2)\n{\n    int total = item1 + item2;\n    return total;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Identify potential issues with the following C# code when converting Actian 4GL code. Respond only in comments within the code:\n```csharp\nusing (var reader = customerCursor.ExecuteReader())\n{\n    while (reader.Read())\n    {\n        ProcessCustomer(reader.GetInt32(0), reader.GetString(1));\n        // Assuming `ProcessCustomer` takes a single parameter, the customer_id. This code may lead to unexpected behavior since it seems we are passing two parameters when only one is expected.\n    }\n}\n```",
        "input": "",
        "output": "using (var reader = customerCursor.ExecuteReader())\n{\n    while (reader.Read())\n    {\n        ProcessCustomer(reader.GetInt32(0)); // Assuming `ProcessCustomer` takes a single parameter, the customer_id. This code may lead to unexpected behavior since it seems we are passing two parameters when only one is expected.\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "In Actian's %SET statement, you can set multiple variables in one line using comma-separated values. Implement a C# function `SetMultipleVariables(params (string name, string value)[] variableList)` that accepts an array of key-value pairs and sets the corresponding variables in your codebase.",
        "input": "SetMultipleVariables(new[] {(\"customerName\", \"John Doe\"), (\"address\", \"123 Main Street\")});",
        "output": "public void SetMultipleVariables((string name, string value)[] variableList)\n{\n    foreach (var (name, value) in variableList)\n    {\n        var property = typeof(Program).GetProperty(name);\n        if (property != null)\n        {\n            property.SetValue(this, value);\n        }\n        else\n        {\n            Console.WriteLine($\"Unknown variable: {name}\");\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# function to convert an Actian 4GL date in format DD-MON-YYYY (e.g., '01-JAN-2022') into the DateTime object in .NET.",
        "input": "string actianDate = \"01-JAN-2022\";",
        "output": "```csharp\nDateTime ConvertActian4GLtoDotNetDate(string actianDate)\n{\n    string[] dateParts = actianDate.Split('-');\n    int day = Int32.Parse(dateParts[0]);\n    string month = dateParts[1].Substring(0, 3);\n    int year = Int32.Parse(dateParts[2]);\n\n    DateTime dotNetDate = new DateTime(year, Convert.ToInt32(CultureInfo.CurrentCulture.DateTimeFormat.GetMonthNameByShortName(month)[0]), day);\n    return dotNetDate;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Provide an example C# code to convert a given currency amount from Actian 4GL's real (fixed point) format to a decimal in .NET.",
        "input": "Actian 4GL Real number: 123.456789",
        "output": "```csharp\ndecimal ConvertActian4GLRealtoDotNetDecimal(string actianReal)\n{\n    string realValue = actianReal.Replace(\",\", \".\"); // Replace comma with dot for decimal format\n    return Decimal.Parse(realValue);\n}\nConsole.WriteLine(\"Decimal value: \" + ConvertActian4GLRealtoDotNetDecimal(\"123.456789\"));\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Consider the Actian 4GL function that creates a report using a table containing customer information. Write a C# console application to display the same report data in the console. Provide an example of the customer information table structure and some sample records for this task.",
        "input": "Create a table with columns \"Customer ID\", \"First Name\", \"Last Name\" and \"Email\". The following are sample records:\n| Customer ID | First Name  | Last Name     | Email             |\n|---          |------------|--------------|-------------------|\n| 1           | John       | Doe          | john.doe@example.com |\n| 2           | Jane       | Smith        | jane.smith@example.com |\n| 3           | James      | Brown        | james.brown@example.com |",
        "output": "```csharp\nusing System;\n\nnamespace ConsoleReport\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var customers = new List<Customer>\n            {\n                new Customer {Id = 1, FirstName = \"John\", LastName = \"Doe\", Email = \"john.doe@example.com\" },\n                new Customer {Id = 2, FirstName = \"Jane\", LastName = \"Smith\", Email = \"jane.smith@example.com\" },\n                new Customer {Id = 3, FirstName = \"James\", LastName = \"Brown\", Email = \"james.brown@example.com\" }\n            };\n            Console.WriteLine(\"Customer Report\");\n            Console.WriteLine(\"------------------\");\n            Console.WriteLine(\"| Customer ID | First Name | Last Name |     Email     |\");\n            Console.WriteLine(\"------------------\");\n\n            foreach (var customer in customers)\n            {\n                Console.Write(\"| {0,10} \", customer.Id);\n                Console.Write(\"{0,-20}\", customer.FirstName);\n                Console.Write(\"{0,-20}\", customer.LastName);\n                Console.WriteLine(\"{0,-30}\", customer.Email);\n            }\n        }\n    }\n    public class Customer\n    {\n        public int Id { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public string Email { get; set; }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Provide an example for converting an Actian 4GL code loop to C# using a `foreach` loop.",
        "input": "```4gl\nDO 10 TIMES;\n   READ FIRST Customer C FROM Customers WHERE c.age >= 30;\n   IF NOT EOF THEN\n      PRINT \"Name: \", C.name;\n   END IF;\nEND DO;\n```",
        "output": "In the given code snippet, you can convert it to a C# `foreach` loop as follows:\n\nFirst, let's assume we have an instance of Customer called `currentCustomer`. To implement a similar functionality using C#, create a foreach loop that iterates through the customers and checks each one's age. If the customer's age is 30 or more, print their name.\n\n```csharp\nforeach (var currentCustomer in Customers.Where(c => c.age >= 30))\n{\n    Console.WriteLine(\"Name: \" + currentCustomer.name);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to convert Actian 4GL conditional structures into C# if-else statements using an example of a simple IF...ELSEIF...ELSE structure.",
        "input": "```4gl\nDEFINE VAR amount AS NUMERIC(5,2).\n\nIF amount <= 100 THEN\n    OUTPUT \"Amount is less than or equal to 100.\".\nELSIF amount >= 500 THEN\n    OUTPUT \"Amount is greater than or equal to 500.\".\nELSE\n    OUTPUT \"Amount is neither less than or equal to 100 nor greater than or equal to 500.\".\nEND IF;\n```",
        "output": "Here's the equivalent code in C# using if-else statements:\n```csharp\ndouble amount = 250d;\nstring message = \"\";\nif (amount <= 100)\n{\n    message = \"Amount is less than or equal to 100.\";\n}\nelse if (amount >= 500)\n{\n    message = \"Amount is greater than or equal to 500.\";\n}\nelse\n{\n    message = \"Amount is neither less than or equal to 100 nor greater than or equal to 500.\";\n}\nConsole.WriteLine(message);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# method that takes a 4GL JSON string as an input and returns a strongly typed C# object with properties matching the JSON object's key-value pairs. Use Newtonsoft.Json library for parsing the JSON string.",
        "input": "```4gl\nDEFINE VAR jsonStr AS CHARACTER \"{\"Customer\":{\"id\":\"123\", \"name\":\"John Doe\"}}\".\n```",
        "output": "```csharp\nusing Newtonsoft.Json;\n\npublic class Customer\n{\n    public string Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic static Customer ParseCustomer(string jsonStr)\n{\n    return JsonConvert.DeserializeObject<Customer>(jsonStr);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What's a possible solution for converting the following Actian 4GL code block, which loops through records in a table and displays their details, into C# LINQ (Language Integrated Query) code?\n```4gl\nFOR EACH employee_rec IN employees.FIND(emp.employee_id = :employee_id).\n    DISPLAY employee_id, first_name, last_name, department, salary, job_title;\n```",
        "input": "The Employees table has the following structure:\n```csharp\npublic class Employee\n{\n    public int EmployeeId { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string Department { get; set; }\n    public decimal Salary { get; set; }\n    public string JobTitle { get; set; }\n}\n```",
        "output": "To achieve the desired functionality using C# LINQ, you can query the Employees table as follows:\n```csharp\nvar result = from e in db.Employees\n             where e.EmployeeId == employee_id\n             select new {\n                 EmployeeId = e.EmployeeId,\n                 FirstName = e.FirstName,\n                 LastName = e.LastName,\n                 Department = e.Department,\n                 Salary = e.Salary,\n                 JobTitle = e.JobTitle\n             };\nforeach (var employee in result)\n{\n    Console.WriteLine($\"Employee ID: {employee.EmployeeId}, Name: {employee.FirstName} {employee.LastName}, Department: {employee.Department}, Salary: ${employee.Salary:F2}, Job Title: {employee.JobTitle}\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How can you convert this Actian 4GL code snippet that creates an IF statement to C#? ```IF emp.salary >= 50000 THEN DISPLAY \"The employee earns over $50,000.\";```",
        "input": "The `emp` variable is defined as follows:\n```csharp\npublic class Employee\n{\n    public decimal Salary { get; set; }\n}\n```",
        "output": "Here's the equivalent C# code for the given 4GL IF statement:\n```csharp\nif (emp.Salary >= 50000m)\n{\n    Console.WriteLine(\"The employee earns over $50,000.\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is the purpose of this Actian 4GL block of code?",
        "input": "```4gl\nDEFINE VAR totalProducts INT;\n\nLOOP FOR EACH g IN GROUP products BY category DO BEGIN\n    LOOP FOR EACH product IN g DO BEGIN\n        ADD 1 TO totalProducts;\n    END;\nEND;\n\nOUTPUT totalProducts AS \"Total Products\";\n```",
        "output": "This block of Actian 4GL code calculates the total number of products and outputs it. It does this by looping through each group of products by category, then looping through each product within the group. For each product it encounters, it increments a counter variable 'totalProducts'. At the end, it outputs the value of 'totalProducts' as \"Total Products\".",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this Actian 4GL procedure that retrieves top 5 categories with the highest number of products to its equivalent C# LINQ expression. The data is stored in the 'products' table which contains columns id (int), category (string) and product_count (int).",
        "input": "```4gl\nDEFINE TEMPORARY TABLE temp_table (category STRING, product_count INT);\n\nSELECT COUNT(*) FROM products GROUP BY category ORDER BY COUNT(*) DESC LIMIT 5 INTO temp_table;\n```",
        "output": "```csharp\nvar topFiveCategories = (from product in products\n                          group product by product.Category into categoryGroup\n                          orderby categoryGroup.Count() descending\n                          select new { Category = categoryGroup.Key, ProductCount = categoryGroup.Count() })\n                .Take(5)\n                .ToList();\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Create an example C# code for handling exceptions within a stored procedure call using a try-catch block, and describe what the exception message might be.",
        "input": "```csharp\nusing System;\nusing System.Data.SqlClient; // Assuming you have the necessary namespaces imported\n\npublic void ExecuteStoredProcedure()\n{\n    string connectionString = \"server=myServerAddress;database=myDataBase;User Id=myUsername;Password=myPassword;\";\n    using (var connection = new SqlConnection(connectionString))\n    {\n        var command = new SqlCommand(\"dbo.MyStoredProcedure\", connection);\n        try\n        {\n            connection.Open();\n            command.ExecuteNonQuery(); // Calling the stored procedure\n        }\n        catch (SqlException exception)\n        {\n            Console.WriteLine(exception.Message);\n        }\n    }\n}\n```",
        "output": "Example C# code for handling exceptions within a stored procedure call using a try-catch block:\n\n```csharp\nusing System;\nusing System.Data.SqlClient; // Assuming you have the necessary namespaces imported\n\npublic void ExecuteStoredProcedure()\n{\n    string connectionString = \"server=myServerAddress;database=myDataBase;User Id=myUsername;Password=myPassword;\";\n    using (var connection = new SqlConnection(connectionString))\n    {\n        var command = new SqlCommand(\"dbo.MyStoredProcedure\", connection);\n        try\n        {\n            connection.Open();\n            command.ExecuteNonQuery(); // Calling the stored procedure\n        }\n        catch (SqlException exception)\n        {\n            Console.WriteLine(exception.Message);\n        }\n    }\n}\n```\n\nThe exception message might be something like: \"Cannot open server 'myServerAddress' requested by the login. Login failed.\" This can occur if there is an issue with the provided connection string or the authentication information.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert the Actian 4GL code block for performing a SQL `SELECT` query using the following example input:\n```sql\nDEFINE TEMP-TABLE temp_customers SELECT customer_id, first_name, last_name FROM customers;\n```",
        "input": "",
        "output": "```csharp\nusing System.Data; // Assuming you have the necessary namespaces imported\nusing System.Data.SqlClient; // Assuming you have the necessary namespaces imported\n\npublic DataTable ExecuteSelectQuery()\n{\n    string connectionString = \"server=myServerAddress;database=myDataBase;User Id=myUsername;Password=myPassword;\";\n    using (var connection = new SqlConnection(connectionString))\n    {\n        var command = new SqlCommand(\"SELECT customer_id, first_name, last_name FROM customers\", connection);\n        connection.Open();\n        var dataAdapter = new SqlDataAdapter(command);\n        DataTable table = new DataTable();\n        dataAdapter.Fill(table);\n        return table;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Provide a list of at least three best practices for maintaining and scaling C# code when converting from Actian 4GL.",
        "input": "",
        "output": "1. Break large chunks of code into smaller, manageable methods. This will make the code more maintainable and easier to understand.\n2. Use Object-Oriented Programming (OOP) principles such as encapsulation, inheritance, and polymorphism to create modular components that can be reused in your application.\n3. Utilize .NET namespaces to organize your code and make it easier for other developers to find relevant classes and methods. Additionally, consider using dependency injection (DI) patterns for better decoupling and testability of your code.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Provide a concise explanation of the relationship between Actian 4GL's event-driven architecture and C#'s event-handling system. Additionally, discuss potential challenges when converting events from Actian 4GL to C#.",
        "input": "",
        "output": "Actian 4GL uses an event-driven architecture where program events such as button clicks or form changes trigger specific procedures. On the other hand, C# has a more robust event-handling system where you can define custom events and handle them through delegates or event handlers.\n\nChallenges in converting Actian 4GL events to C# may include differences in how events are defined, handled, and propagated between the two systems. For instance, C# uses subscribing to events through delegate assignment, whereas Actian 4GL uses a procedural approach to handle events. To tackle these challenges, you should familiarize yourself with the specific event handling mechanisms used by both platforms and adapt your code accordingly during conversion.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Create a simple Actian 4GL script for finding the sum of numbers in an array. The user should be able to input the array size and elements using input dialogs. Then, the program should display the sum.",
        "input": "(This is the user's input during the execution)\n5\n1,2,3,4,5",
        "output": "```4gl\nDEFINE VAR myArray ARRAY OF INT INITIALIZE SIZE 0;\nDEFINE VAR arraySize AS INT DEFAULT -1;\nDEFINE VAR i AS INT DEFAULT 0;\nDEFINE VAR sum AS INT DEFAULT 0;\n\nINPUT DIALOG \"Enter the number of elements in the array:\";\nINPUT DIALOG \"Input the array elements separated by commas (e.g. 1,2,3):\";\narraySize := VALUE OF INPUT_DIALOG1;\nmyArray := SPLIT(VALUE OF INPUT_DIALOG2, ',');\nFOR i FROM 1 BY 1 UNTIL arraySize + 1 DO\n    sum += myArray[i];\nEND FOR;\nMESSAGE \"The sum of the numbers in the array is: \" + sum;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given an existing Actian 4GL stored procedure that takes input parameters and performs some calculations, rewrite this code as a C# console application. Assume the calculation involves some string manipulation, arithmetic operations, and returning the result to the caller.",
        "input": "Consider a stored procedure called \"SP_CalculatePrice\" which accepts 2 input parameters, \"basePrice\" of type double and \"discountPercentage\" of type integer. The stored procedure calculates the final price as basePrice * (1 - discountPercentage/100) and returns it to the caller. Provide an example of a console application that implements this functionality using C#.",
        "output": "```csharp\nusing System;\n\nnamespace ConsoleCalculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            double basePrice = 100; // user input or from a configuration file\n            int discountPercentage = 5; // user input or from a configuration file\n\n            double finalPrice = CalculatePrice(basePrice, discountPercentage);\n\n            Console.WriteLine($\"The final price with {discountPercentage}% discount is: ${finalPrice:F2}\");\n        }\n\n        static double CalculatePrice(double basePrice, int discountPercentage)\n        {\n            return basePrice * (1 - discountPercentage / 100);\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain the process of converting a loop in Actian 4GL to a equivalent loop structure using C#. Provide an example of how you can handle array manipulation and data iteration between both languages for this task.",
        "input": "Given a loop in Actian 4GL that iterates over an array containing integers, performs some operation on each element, and then updates the elements of another array. Write an equivalent C# loop to achieve the same functionality using a List<int> instead of an array.",
        "output": "You can convert the Actian 4GL loop into a C# foreach loop to iterate over the elements in a List<int>. Here's an example where we initialize two lists, perform some operation on each element in `list1` and update corresponding elements in `list2`.\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace LoopConversion\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var list1 = new List<int> { 1, 2, 3, 4, 5 };\n            var list2 = new List<int>();\n\n            foreach (var num in list1)\n            {\n                int squared = num * num; // some operation on each element\n                list2.Add(squared); // update another array\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Provide an example of a common data structure in Actian 4GL and its C# equivalent, along with their usage for processing a list of orders.",
        "input": "Suppose we have the following Actian 4GL code snippet to process a list of orders:\n\nActian 4GL:\nDEFINE LABEL data-structure AS STANDARD DYNAMIC STRUCTURE WITH ELEMENTS product_id, order_date, quantity;\nDEFINE VARIABLE orders AS DATA-STRUCTURE ARRAY OF data-structure;\nREAD FILE 'orders.txt' INTO orders;\nFOR i FROM 1 TO SIZE(orders) DO;\n    DISPLAY \"Order number: \", i;\n    DISPLAY \"Product ID: \", ORDERS[i].product_id;\n    DISPLAY \"Order Date: \", ORDERS[i].order_date;\n    DISPLAY \"Quantity: \", ORDERS[i].quantity;\nEND FOR;",
        "output": "In C#, you can use List<T> for a dynamic array of objects with properties similar to the data structure in Actian 4GL. Here's an example for processing a list of orders using a custom class named `Order` and a List<Order>:\n\nC#:\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\n\nnamespace OrderProcessing\n{\n    public class Order\n    {\n        public int ProductId { get; set; }\n        public DateTime OrderDate { get; set; }\n        public int Quantity { get; set; }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var orders = new List<Order>();\n            string line;\n            using (StreamReader file = new StreamReader(\"orders.txt\"))\n            {\n                while ((line = file.ReadLine()) != null)\n                {\n                    var parts = line.Split(',');\n                    orders.Add(new Order\n                    {\n                        ProductId = int.Parse(parts[0]),\n                        OrderDate = DateTime.Parse(parts[1]),\n                        Quantity = int.Parse(parts[2])\n                    });\n                }\n            }\n\n            for (int i = 0; i < orders.Count; i++)\n            {\n                Console.WriteLine(\"Order number: \", i + 1);\n                Console.WriteLine(\"Product ID: \", orders[i].ProductId);\n                Console.WriteLine(\"Order Date: \", orders[i].OrderDate.ToShortDateString());\n                Console.WriteLine(\"Quantity: \", orders[i].Quantity);\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Investigate common pitfalls when converting Actian 4GL cursor operations to C#. Discuss some ways to avoid these issues and provide a relevant example that demonstrates effective conversion of a simple cursor loop in 4GL to a corresponding C# foreach loop.",
        "input": "",
        "output": "When converting Actian 4GL cursor loops to C#, common pitfalls may include forgetting to declare and initialize variables or improperly handling exceptions. To mitigate these issues, always declare and initialize all necessary variables beforehand and ensure exception handling is implemented appropriately.\n\nFor example, consider the following simple 4GL cursor loop that updates customer information:\n\n```\nPERFORM updateCustomers() WHEN-EOLS.\n    WHEN INVALID-ROW DO END-PERFORM;\n    CUSTOMER_NAME = FIRST-OF CURSOR.CUSTOMER_NAME.\n    CUSTOMER_ADDRESS = FIRST-OF CURSOR.CUSTOMER_ADDRESS.\n    UPDATE CUSTOMERS SET CUSTOMER_NAME = :CUSTOMER_NAME, CUSTOMER_ADDRESS = :CUSTOMER_ADDRESS WHERE CUSTOMER_ID = CURSOR.CUSTOMER_ID;\nEND-PERFORM.\n```\nHere is the corresponding C# code using a foreach loop:\n```\nusing System.Data;\n...\nvoid updateCustomers(DataSet ds)\n{\n    foreach (DataRow row in ds.Tables[\"CUSTOMERS\"].Rows)\n    {\n        string customerName = row[\"CUSTOMER_NAME\"].ToString();\n        string customerAddress = row[\"CUSTOMER_ADDRESS\"].ToString();\n        try\n        {\n            using var connection = new SqlConnection(connectionString);\n            string updateQuery = \"UPDATE CUSTOMERS SET CUSTOMER_NAME = @custName, CUSTOMER_ADDRESS = @custAddress WHERE CUSTOMER_ID = @custId\";\n            SqlCommand cmd = new SqlCommand(updateQuery, connection);\n            cmd.Parameters.AddWithValue(\"@custName\", customerName);\n            cmd.Parameters.AddWithValue(\"@custAddress\", customerAddress);\n            cmd.Parameters.AddWithValue(\"@custId\", row[\"CUSTOMER_ID\"]);\n            connection.Open();\n            cmd.ExecuteNonQuery();\n            connection.Close();\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Compare the difference in exception handling between Actian 4GL and C#. Discuss how to convert specific types of errors such as null reference, division by zero, or out-of-range array index in Actian 4GL to their equivalent exceptions in C#.",
        "input": "",
        "output": "Actian 4GL handles exceptions using WHEN statements, while C# uses the try-catch blocks for exception handling.\n\nIn C#, null reference errors can be handled by checking objects before calling their methods or accessing properties, as in this example:\n```\nif (myObject != null) myObject.MyMethod();\n```\nDivision by zero errors result in `System.DivideByZeroException` in C# and should ideally be prevented during development through conditional checks, such as checking if the denominator is not equal to 0 before performing division:\n```\nif (denominator != 0) result = numerator / denominator;\n```\nOut-of-range array index errors occur in C# when accessing an element outside of an array's bounds. To avoid these, use the `Array.GetLowerBound` and `Array.GetUpperBound` methods to check the indices before accessing elements:\n```\nfor (int i = Array.GetLowerBound(myArray); i <= Array.GetUpperBound(myArray); i++)\n{\n    int myElement = myArray[i];\n    // do something with myElement...\n}\n```\nIn contrast, Actian 4GL uses WHEN-ERROR and WHEN-OTHERWISE statements for exception handling. To handle null reference errors, you can use the `ISNULL` function to check if a value is null:\n```\nIF ISNULL(myVariable) THEN ... END-IF;\n```\nDivision by zero errors can be handled using conditional checks:\n```\nIF myDenominator <> 0 THEN ... ELSE... END-IF;\n```\nOut-of-range array index errors are typically prevented through index checking when iterating through arrays or accessing elements.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How to handle exceptions while converting Actian 4GL code to C#? Provide an example with comments and code for a specific situation.",
        "input": "```4gl\nIF product_id IS MISSING THEN BEGIN\n    OUTPUT ERROR;\n    HALT;\nEND;\n```",
        "output": "Here's an example of how to handle exceptions in C# when converting the above Actian 4GL code:\n\n```csharp\ntry\n{\n    // Check for missing product_id\n    if (string.IsNullOrEmpty(productId))\n    {\n        throw new Exception(\"Missing product ID\");\n    }\n    // Continue with your logic here\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Error: {ex.Message}\");\n    // Handle the error or log it here\n}\n```\nIn this C# example, we use a try-catch block to handle the exception when product_id is missing. We throw an Exception object with an appropriate message and handle it in the catch block, logging it or displaying an error message.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What are some best practices for naming variables in C#? Provide examples and explain why these names are good choices.",
        "input": "```csharp\nint prodCount;\nstring categoryName;\nDateTime saleDate;\n```",
        "output": "These variable names follow some common best practices for naming variables in C#:\n1. `prodCount`: It uses camelCase with words that have a first letter capitalized and no spaces or underscores. This name clearly indicates the data type (int) and the purpose of the variable (\"count\" refers to counting something).\n2. `categoryName`: This name uses PascalCase, which is similar to camelCase but capitalizes the first letter of each word instead of just the first word. This name again makes it clear that this is a string variable representing the category's name.\n3. `saleDate`: This name uses a descriptive name that clearly indicates the data type (DateTime) and the purpose of the variable (\"date\" refers to a date). In addition, this name uses a more descriptive word than \"timestamp\".\nBy following these naming conventions, your code will be easier to read and maintain for both you and others.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How do you handle nested loops in Actian 4GL, and what's a good practice for implementing a similar construct in C# using nested foreach loops?",
        "input": "Iterate through an array of customer IDs in Actian 4GL, and for each customer ID, search the orders table and display the order details if there are any.",
        "output": "In Actian 4GL, nested loops can be achieved using embedded WHILE or REPEAT blocks. When implementing this in C#, you can use nested `foreach` loops. Here's a C# example that demonstrates iterating through an array of customer IDs and displaying the order details if any are found:\n\nC#:\n```csharp\nint[] customerIds = {123456, 789012};\nvar orders = GetOrders(); // Assuming this method retrieves all orders from the database.\n\nforeach (var id in customerIds)\n{\n    var orderDetails = orders.Where(o => o.CustomerId == id).ToList();\n    if (orderDetails.Any())\n        Console.WriteLine(\"Customer ID: {0}\", id);\n    foreach (var orderDetail in orderDetails)\n        Console.WriteLine(\"\\tOrder ID: {0}, Amount: {1}\", orderDetail.OrderId, orderDetail.Amount);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How can you create a simple Actian 4GL stored procedure that accepts parameters and performs an SQL operation? Provide a sample procedure that fetches the top 5 customers with the highest total amount spent.",
        "input": "",
        "output": "Here's a simple example of a stored procedure in Actian 4GL that accepts two parameters (`startIndex` and `pageSize`) and returns a result set containing the top 5 customers with the highest total amount spent:\n```4gl\nDEFINE PROCEDURE sp_TopCustomers(IN startIndex INTEGER, IN pageSize INTEGER) NO SQL.\n    DECLARE sql VARCHAR(1024).\n    SET sql = \"SELECT * FROM ( SELECT RANK() OVER (ORDER BY totalAmount DESC) AS rank, customerID, totalAmount FROM orders ) WHERE rank <= ? AND rownum <= ?\".\n    EXEC SQL PREPARE stmt FROM sql USING pageSize, startIndex + pageSize - 1;\n    EXEC SQL EXECUTE stmt;\nEND-DEFINE;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Describe a strategy for managing errors and exceptions in the conversion process when moving from Actian to C#.",
        "input": "Here is an example of an error that might occur during the conversion process: \"Invalid character encountered.\"",
        "output": "In your conversion process, you should catch and handle exceptions to manage potential issues such as syntax errors, type mismatches, or unsupported features in C#. You can use try-catch blocks for this purpose:\n```csharp\ntry\n{\n    // Your 4GL code conversion logic here\n}\ncatch (Exception ex)\n{\n    Console.WriteLine(\"An error occurred during the conversion process. Error message: \" + ex.Message);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "In Actian 4GL, how do you loop through arrays? Write a simple example that calculates the sum of all elements in an array.",
        "input": "DECLARE integerArray[5] LIKE [1, 2, 3, 4, 5];",
        "output": "To loop through arrays and calculate their sum in Actian 4GL:\n\n```4gl\nDECLARE i AS INTEGER DEFAULT 1;\nDECLARE total AS INTEGER ZERO;\nDEFINE ARRAY integerArray[5] LIKE [1, 2, 3, 4, 5];\nLOOP UNTIL i > 5;\n    total += array[i];\n    ADD 1 TO i;\nEND LOOP;\nOUTPUT total;\n```\nIn this Actian 4GL example, we declare a variable `total` to store the sum of all elements in the array. We also use a loop with an index `i` and increment it until it reaches the last element in the array (array[5]). Inside the loop, we add the current element to the `total`.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this Actian 4GL cursor example for processing multiple rows into C# using a foreach loop. The cursor retrieves customer_id and total_sales from the customers table.",
        "input": "DECLARE customerCursor;\nOPEN customerCursor FOR SELECT customer_id, total_sales FROM customers;\nREAD CUSTOMERCURSOR;\nWHILE NOT EOF(customerCursor) DO;\n    WRITE customer_id: , total_sales: ;\n    ADVANCE customerCursor;\nEND WHILE;\nCLOSE customerCursor;",
        "output": "```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT customer_id, total_sales FROM customers\", connection))\n    {\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            if (reader.HasRows)\n            {\n                Console.WriteLine(\"Customer ID\\tTotal Sales\");\n                while (reader.Read())\n                {\n                    int customerId = (int)reader[\"customer_id\"];\n                    decimal totalSales = (decimal)reader[\"total_sales\"];\n                    Console.WriteLine($\"{customerId}\\t{totalSales}\");\n                }\n            }\n        }\n    }\n}\n```\nIn this C# example, we use a foreach loop to iterate through the rows returned by the SQL query. We also display the results in a console table-like format and print out the customer_id and total_sales columns.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Create a C# method that generates an Actian 4GL-compatible string representation for a DateTime object. The output should follow the DD-MON-YYYY format (e.g., '01-JAN-2022')",
        "input": "DateTime inputDate = new DateTime(2022, 1, 1);",
        "output": "string ConvertDotNetDateToActian4GL(DateTime dateTime)\n{\n    string[] dateParts = dateTime.ToString(\"dd-MMM-yyyy\").Split(' ');\n    return String.Join(\"-\", dateParts);\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given a function written in Actian 4GL that takes an array as input and returns its minimum value, convert the code to C# using the .NET Framework library's methods.",
        "input": "Here's an example of a function named `minValue` defined in Actian 4GL which accepts an array of integers as input and returns its minimum value:\n```4gl\nDEFINE FUNCTION minValue(ARR ARRAY OF INTEGER VALUE) AS RETURN (MINIMUM(ARR)).\n```\nAssuming the `minimum()` function returns the smallest item in the array.",
        "output": "```csharp\npublic static int MinValue(int[] inputArray)\n{\n    return inputArray.Min(); // The Min method is available on generic collections.\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write C# code to implement an Actian 4GL subroutine that calculates the factorial of a number. Explain any differences in syntax between both languages.",
        "input": "Here's a subroutine named `calculateFactorial` defined in Actian 4GL:\n```4gl\nSUBROUTINE calculateFactorial(NUMBER value) RETURNS (NUMBER result).\n    DEFINE VAR num AS 1;\n    DO WHILE num <= value;\n        result = result * num;\n        num = num + 1;\n    END;\nEND;\n```",
        "output": "In C#, you can use a for loop to calculate the factorial of a number:\n\n```csharp\npublic static long Factorial(long n)\n{\n    if (n <= 0 || n > Int64.MaxValue / (Int64.MaxValue - 1)) // To prevent overflow error\n        throw new ArgumentOutOfRangeException(nameof(n), $\"Factorial calculation is not supported for {n}\");\n\n    long result = 1;\n    for (long i = 2; i <= n; i++)\n        result *= i;\n\n    return result;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Provide an example of how a cursor can be closed in C# using the `using` statement. Include the code snippet when possible.",
        "input": "Consider a cursor called \"myCursor\".",
        "output": "```csharp\n// Opening the cursor\nusing (var myCursor = new Odbc.OdbcCommand(\"SELECT * FROM MyTable\", connection))\n{\n    // Perform some operations using the cursor...\n\n    // Close the cursor when done, the disposable object will be automatically disposed of.\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Describe the process of implementing a loop in C# to iterate through an array and perform a specific operation on each element (e.g., incrementing the value by 1). Provide at least one code example for clarity.",
        "input": "Consider an array called \"arr\" with integers: `{32, -19, 65, -48, 47, 0, 8}`. Write a code snippet to increment each element in the array by 10.",
        "output": "To iterate through the provided array and increment each value by 10, you can use a for loop:\n\n```csharp\nint[] arr = { 32, -19, 65, -48, 47, 0, 8 };\n\n// Loop through each element in the array.\nfor (int i = 0; i < arr.Length; ++i)\n{\n    // Increment the current value by 10.\n    arr[i] += 10;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Describe how to convert Actian 4GL database manipulation code into ADO.NET code in C#, using an example of an update statement.",
        "input": "Here's an example of a simple update statement in Actian 4GL:\n```4gl\nDEFINE VAR customerID AS NUMERIC(10).\nDEFINE VAR newAge AS NUMERIC(2).\nUPDATE customer SET age = newAge WHERE id = customerID;\n```",
        "output": "To achieve a similar functionality in C# using ADO.NET, you can use the `OleDbCommand` class:\n```csharp\nstring connectionString = \"Your_Connection_String\";\nusing (var connection = new OleDbConnection(connectionString))\n{\n    string query = \"UPDATE customer SET age = @newAge WHERE id = @customerID\";\n    using (var command = new OleDbCommand(query, connection))\n    {\n        command.Parameters.AddWithValue(\"@customerID\", 123);\n        command.Parameters.AddWithValue(\"@newAge\", 45);\n        connection.Open();\n        int rowsAffected = command.ExecuteNonQuery();\n        Console.WriteLine($\"{rowsAffected} row(s) updated.\");\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "In Actian, when iterating over a list of values using the FOR loop, you can use an IF statement to perform different actions based on the condition of each value. Translate the following Actian code snippet to C#:\n\n```4gl\nLOOP FOR item IN myList DO\n  IF item > 10 THEN\n    PRINT item;\n  ELSEIF item = 5 THEN\n    SKIP LOOP;\n  ELSE\n    SKIP NEXT;\n  END IF;\nEND LOOP;\n```",
        "input": "int[] myList = { 3, 12, 8, 4, 9, 6 };",
        "output": "for (int i = 0; i < myList.Length; ++i)\n{\n    if (myList[i] > 10)\n        Console.WriteLine(myList[i]);\n    else if (myList[i] == 5)\n        continue; // skip this iteration and move on to the next one\n    else\n        -- i; // skip the current item and move on to the next one in the following iteration\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to convert a FOR loop in 4GL to a while loop in C#. Provide an example of converting the following code: FOR i = 1 TO 5 DO BEGIN ... END;",
        "input": "",
        "output": "In C#, you can replace a FOR loop with a while loop as follows:\n\n4GL:\n```\nFOR i = 1 TO 5 DO BEGIN\n    // Code block here\nEND;\n```\nC#:\n```\nint i = 1;\nwhile (i <= 5)\n{\n    // Code block here\n    i++;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this Actian 4GL procedure that inserts multiple records into a table to a C# method: PROCEDURE insert_multiple_orders(p_order_id CHAR(10), p_customer_id CHAR(10), p_item_name CHAR(30), p_quantity INTEGER, ...) LANGUAGE SQL. BEGIN\n  DECLARE v_counter INTEGER DEFAULT 1;\n  REPEAT WHILE v_counter <= :p_count;\n    INSERT INTO orders VALUES (p_order_id || '_' || v_counter, p_customer_id, p_item_name, p_quantity);\n    SET v_counter = v_counter + 1;\n  UNTIL v_counter > :p_count END REPEAT; END PROCEDURE.",
        "input": "",
        "output": "In C#, you can use a for loop to insert multiple records into a table. Here's an example of converting the given procedure:\n\n4GL:\n```\nPROCEDURE insert_multiple_orders(p_order_id CHAR(10), p_customer_id CHAR(10), p_item_name CHAR(30), p_quantity INTEGER, ...) LANGUAGE SQL. BEGIN\n  DECLARE v_counter INTEGER DEFAULT 1;\n  REPEAT WHILE v_counter <= :p_count;\n    INSERT INTO orders VALUES (p_order_id || '_' || v_counter, p_customer_id, p_item_name, p_quantity);\n    SET v_counter = v_counter + 1;\n  UNTIL v_counter > :p_count END REPEAT; END PROCEDURE.\n```\n\nC#:\n\n```csharp\npublic void InsertMultipleOrders(string orderId, string customerId, string itemName, int quantity, int count)\n{\n    using (var connection = new SqlConnection(\"YourConnectionString\"))\n    {\n        connection.Open();\n\n        var sqlCommand = new SqlCommand(\"INSERT INTO orders VALUES (@OrderId, @CustomerId, @ItemName, @Quantity)\", connection);\n\n        for (int i = 1; i <= count; i++)\n        {\n            sqlCommand.Parameters.AddWithValue(\"@OrderId\", orderId + \"_\" + i);\n            sqlCommand.Parameters.AddWithValue(\"@CustomerId\", customerId);\n            sqlCommand.Parameters.AddWithValue(\"@ItemName\", itemName);\n            sqlCommand.Parameters.AddWithValue(\"@Quantity\", quantity);\n            sqlCommand.ExecuteNonQuery();\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Create a sample Actian 4GL program that takes a string input from the user and converts it to uppercase. The user should be able to input a sentence or a word using an input dialog.",
        "input": "(This is the user's input during the execution)\nHello, World!",
        "output": "```4gl\nDEFINE VAR userInput AS STRING;\nINPUT DIALOG \"Please enter your text:\";\nuserInput := VALUE OF INPUT_DIALOG1;\nMESSAGE TO UPPERCASE(userInput);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Translate this C# function into a 4GL function that returns the factorial of a given number. In C#, the code is: int Factorial(int n) { if (n == 0) return 1; return n * Factorial(n - 1); }",
        "input": "",
        "output": "```4gl\nDEFINE FUNCTION factorial(p_number AS INT RETURNS LONG.\n    IF p_number = 0 THEN\n        RETURN 1;\n    END IF;\n    RETURN p_number * factorial(p_number - 1);\nEND DEFINE;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Consider two variables `totalAmount` (initialized as decimal) and `taxRate` (initialized as a decimal or float depending on your preference). Write a function in Actian 4GL that calculates the total tax amount for an invoice based on the subtotal and tax rate provided.",
        "input": "DECLARE totalAmount AS DECIMAL (18,2) DEFAULT 500.00;\nDECLARE taxRate AS DECIMAL (6,4) DEFAULT 0.13;",
        "output": "To create a function that calculates the tax amount based on subtotal and tax rate in Actian 4GL:\n\n```4gl\nDEFINE FUNCTION CalculateTaxAmount(totalAmount AS DECIMAL (18,2), taxRate AS DECIMAL (6,4)) RETURNING decimal.\nBEGIN\n    LEAVE taxAmount AS (totalAmount * taxRate);\nEND;\n```\nIn this Actian 4GL function example, we declare two input parameters: `totalAmount` and `taxRate`. Inside the function's body, we define a new variable `taxAmount` and calculate its value by multiplying the `totalAmount` by the `taxRate`. The `LEAVE` keyword is used to make this calculated value accessible from outside the function.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to convert an Actian 4GL procedure that generates a PDF report using the PDF_FILE function into a C# program using the iTextSharp library.",
        "input": "```4gl\nPDF_FILE PDF-Output-file;\n\nOPEN FILE 'C:\\Temp\\example.pdf' AS PDF-Output-file;\n\nDEFINE TEMPORARY TABLE temp_table (product_name STRING, description STRING);\nSELECT product_name, description FROM products ORDER BY product_name;\n\nFOR EACH product IN temp_table DO\n    WRITE TO PDF-Output-file : product_name + \" - \" + description + \"\\n\";\nEND-DO;\n\nCLOSE FILE PDF-Output-file;\n```",
        "output": "First, install the iTextSharp library by adding a NuGet package to your C# project. Next, create a new method that generates a PDF report using the iTextSharp classes:\n\n```csharp\nusing System.Collections.Generic;\nusing iTextSharp.text;\nusing iTextSharp.text.pdf;\n...\npublic void GeneratePDFReport(List<Product> products)\n{\n    Document doc = new Document();\n    PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(\"C:\\\\Temp\\\\example.pdf\", FileMode.Create));\n    doc.Open();\n\n    for (int i = 0; i < products.Count; i++)\n    {\n        Paragraph paragraph = new Paragraph($\"{products[i].ProductName} - {products[i].Description}\\n\");\n        doc.Add(paragraph);\n    }\n\n    doc.Close();\n}\n```\n\nIn your main application, create an instance of the `Product` class to represent each product and populate a list with the necessary data, then call the `GeneratePDFReport` method:\n\n```csharp\nList<Product> products = new List<Product>();\nproducts.Add(new Product { ProductName = \"Sample Product 1\", Description = \"A description for sample product 1\" });\n// Add more products as needed...\n\nGeneratePDFReport(products);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Discuss the process of converting a stored procedure in Actian 4GL that calculates the average price for each category from the 'products' table into an equivalent SQL query.",
        "input": "",
        "output": "To convert this Actian 4GL stored procedure to an equivalent SQL query, follow these steps:\n\n1. Create a subquery to group the products by their categories and sum up the product prices for each category.\n2. Use an aggregate function (AVG) to calculate the average price for each category.\n3. Perform the required calculations using the SQL syntax. The final query should look like this:\n\n```sql\nSELECT Category, AVG(Price) AS AveragePrice\nFROM products\nGROUP BY Category;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "In Actian 4GL, you can create functions to perform business logic within your application. Provide a C# equivalent to the following example: An Actian 4GL function calculates sales tax based on the price and a tax rate provided as parameters. In the example below, we want to calculate taxes for the item with $100.00 and a tax rate of 8%.",
        "input": "Create a C# method that takes an amount and tax rate as inputs and returns the tax amount by calculating the product of the amount and the tax rate.\n\n```4gl\nDEFINE FUNCTION CalculateTax (Price, TaxRate) RETURNS Currency:\n  CALC SalesTax = Price * TaxRate;\nRETURN SalesTax;\n\nCALC SalesAmount = 100 * CalculateTax(100, 8);\n```",
        "output": "Here's a C# method equivalent to the above example.\n\n```csharp\npublic static decimal CalculateTax(decimal amount, decimal taxRate) => amount * taxRate;\n\npublic static void Main()\n{\n    var tax = CalculateTax(100, 0.08m); // Note that the tax rate is a float in C# (8% as a decimal fraction).\n    Console.WriteLine($\"Sales Amount: {100 + tax}\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Actian 4GL supports multiple record handling using loops and subroutines. Transform the following Actian 4GL loop structure into C# LINQ extension methods for performing batch operations on arrays of items.",
        "input": "Assume that you have an array of integers with the following content: [1, 2, 3, 4, 5]. Find all even numbers from the input array and calculate their sum.\n\nIn Actian 4GL, this could be achieved by a loop as shown below:\n\n```4gl\nDEFINE VAR i AS INTEGER NO-UNDO;\n\nDO FOR EACH index = 1 BY 1 UNTIL LENGTH OF myArray:\n  IF MOD(myArray[index], 2) = 0 THEN\n    ADD myEvenNumbers TO myArray[index];\n  END IF;\nEND DO;\n\nDEFINE VAR sum AS SUM OF myEvenNumbers;\n```",
        "output": "In C#, you can use LINQ extension methods to perform the desired operation. First, let's define an array of integers and create an extension method that filters out even numbers:\n\n```csharp\nint[] myArray = { 1, 2, 3, 4, 5 };\npublic static int[] FilterEven(this int[] array) => array.Where(n => n % 2 == 0).ToArray();\n```\n\nNow use the extension method to get a new array of even numbers and then calculate its sum:\n\n```csharp\nint[] evenNumbers = myArray.FilterEven();\nvar sum = evenNumbers.Sum();\nConsole.WriteLine(sum); // Outputs: 6\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Can you provide an example of a C# method that accepts a parameter of type `Employee[]`, calculates the total average age, and returns the result?",
        "input": "```csharp\nEmployee[] employees = new Employee[] {\n    new Employee {Name = \"Alice\", Age = 30},\n    // ... additional employee records ...\n};\n```",
        "output": "```csharp\npublic double CalculateTotalAverageAge(Employee[] employees)\n{\n    if (employees.Length == 0) return -1; // Indicate that there are no records for the calculation.\n    int totalAge = 0;\n    foreach (var employee in employees)\n    {\n        totalAge += employee.Age;\n    }\n    return totalAge / employees.Length; // The average age is calculated by dividing the total age of all employees by the number of employees.\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Provide a C# method that takes an array of strings for employee names and returns a dictionary where keys are departments with associated values representing the count of employees in each department. Assume the data comes from a database table named 'employees' containing the columns 'name' (string) and 'department' (string).",
        "input": "```csharp\nstring[] employeeNames = { \"Alice Smith\", \"Bob Johnson IT\", \"Charlie Marketing\", \"David HR\" };\n```",
        "output": "```csharp\npublic Dictionary<string, int> CountEmployeesByDepartment(IEnumerable<string> employeeNames)\n{\n    var employees = employeeNames.Select(name => name.Split(' ')).Where(parts => parts.Length >= 2).ToList();\n    var result = new Dictionary<string, int>();\n    foreach (var emp in employees)\n    {\n        string department = emp[1];\n        if (!result.ContainsKey(department))\n            result.Add(department, 0); // Add a default value of zero to the dictionary for the first employee in each department.\n\n        result[department]++; // Increment the count of employees for that specific department.\n    }\n\n    return result; // Return the resulting dictionary containing counts of employees by department.\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What are some best practices when converting Actian 4GL code to C#, and how can you minimize errors during the process?",
        "input": "In this example, I have a loop that iterates through an array in Actian 4GL. How do I convert it into its C# equivalent? Here's my current 4GL code:\nDO i = 1 TO arr_length\n   IF arr[i] > threshold THEN\n      // Do something when the value is greater than the threshold\n   END\nEND;",
        "output": "In your example, the Actian 4GL DO loop iterates through an array using the `i` counter variable and a range based on `arr_length`. Here's how you can convert it into C#:\n\nC#:\nfor (int i = 0; i < arr.Length; i++)\n{\n    if (arr[i] > threshold)\n    {\n        // Do something when the value is greater than the threshold\n    }\n}\n\nTo minimize errors, follow these best practices:\n1. Make sure to understand the business requirements and logic of the Actian 4GL code you are converting.\n2. Familiarize yourself with C# programming language syntax and idioms.\n3. Use proper error handling techniques in your code to handle exceptions gracefully.\n4. Test your converted code thoroughly for correctness and performance.\n5. Consult the documentation and any available resources on the Actian 4GL-to-C# conversion process if needed.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How can you convert complex conditional statements using IF-THEN-ELSE constructs in Actian 4GL to their C# equivalents?",
        "input": "Here's an example of a conditional statement with multiple nested IF-THEN-ELSE blocks:\nIF x = 1 THEN\n   IF y = \"A\" OR z > 5 THEN\n      result = \"Condition 1\"\n   ELSE IF y = \"B\" AND z < 3 THEN\n      result = \"Condition 2\"\n   ELSE IF x = 0 THEN\n      result = \"Condition 3\"\n   END\nELSE\n   result = \"Default condition\"\nEND",
        "output": "In your example, the Actian 4GL code contains multiple nested IF-THEN-ELSE blocks with logical operators. Here's how you can convert it into C# using `if` statements with proper logic:\n\nC#:\n```\nstring result;\nif (x == 1)\n{\n    if (y == \"A\" || z > 5)\n    {\n        result = \"Condition 1\";\n    }\n    else if (y == \"B\" && z < 3)\n    {\n        result = \"Condition 2\";\n    }\n    else if (x == 0)\n    {\n        result = \"Condition 3\";\n    }\n}\nelse\n{\n    result = \"Default condition\";\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_g",
        "task_description": "Learn about converting Actian 4GL code for OpenROAD to C#.",
        "document": null
    }
]
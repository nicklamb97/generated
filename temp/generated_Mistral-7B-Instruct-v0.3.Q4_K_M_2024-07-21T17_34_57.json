[
    {
        "instruction": "Translate the following Actian OpenROAD 4GL code block to C#. Respond with C# code: SELECT emp_id, COUNT(*) FROM employees GROUP BY emp_id;",
        "input": "",
        "output": "Here's the equivalent C# code:\n```\nstring query = \"SELECT emp_id, COUNT(*) FROM employees GROUP BY emp_id\";\nusing (SqlConnection conn = new SqlConnection(connectionString))\n{\n    SqlCommand cmd = new SqlCommand(query, conn);\n    conn.Open();\n    SqlDataReader reader = cmd.ExecuteReader();\n    while (reader.Read())\n    {\n        Console.WriteLine(\"emp_id: \" + reader[0].ToString() + \", Count: \" + reader[1].ToString());\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Explain how you would go about converting a nested loop structure in Actian OpenROAD 4GL to its equivalent C# code. Provide a detailed step-by-step approach to the conversion process.",
        "input": "Here is an example of a nested loop structure in Actian OpenROAD 4GL:\n```\nFOR i = 1 TO 5\n    FOR j = 1 TO 10\n        DISPLAY \"i: \" + i + \", j: \" + j;\n    END FOR\nEND FOR\n```",
        "output": "To convert the given nested loop structure from Actian OpenROAD 4GL to C#, follow these steps:\n1. Replace the `FOR` statement in both loops with `for`.\n2. Initialize your counter variables inside the brackets of the `for` loop.\n3. Remove the semicolons at the end of each line within the nested loop structure.\n4. Replace `DISPLAY` with `Console.WriteLine()`.\n5. Update the C# code as follows:\n```\nfor (int i = 1; i <= 5; i++)\n{\n    for (int j = 1; j <= 10; j++)\n    {\n        Console.WriteLine(\"i: \" + i + \", j: \" + j);\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Transform the given Actian OpenROAD 4GL code that performs a conditional operation based on a user input into C#. The Actian code uses the `IF... ELSE...` structure and prompts the user with 'Enter a number:'.",
        "input": "```\nREAD number;\n\nIF number <= 10 THEN\n    DISPLAY \"Number is less than or equal to 10.\";\nELSE IF number > 20 THEN\n    DISPLAY \"Number is greater than 20.\";\nELSE\n    DISPLAY \"Number is between 11 and 20 inclusive.\";\nEND IF;\n```",
        "output": "Here's the equivalent C# code:\n```\nConsole.Write(\"Enter a number: \");\nint userInput = int.Parse(Console.ReadLine());\nif (userInput <= 10)\n{\n    Console.WriteLine(\"Number is less than or equal to 10.\");\n}\nelse if (userInput > 20)\n{\n    Console.WriteLine(\"Number is greater than 20.\");\n}\nelse\n{\n    Console.WriteLine(\"Number is between 11 and 20 inclusive.\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Given the following Actian OpenROAD 4GL code snippet, refactor it to C# so that it reads a list of numbers from user input and performs calculations using LINQ. Specifically, calculate the average of all the provided numbers.",
        "input": "```\nREAD numbers;\nnumberList = SPLIT(numbers, ',');\ntotal = 0;\n\nFOR i = 1 TO COUNT(numberList) - 1\n    total = total + numberList[i];\nEND FOR;\n\nDISPLAY \"The average of the entered numbers is: \" + (total / COUNT(numberList));\n```",
        "output": "In C#, you can create a console application that accepts user input as a comma-separated list of numbers and calculates the average using LINQ. Here's the refactored code:\n```\nusing System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.Write(\"Enter a comma-separated list of numbers: \");\n        string input = Console.ReadLine();\n\n        int[] numberList = input.Split(',')\n            .Select(int.Parse)\n            .ToArray();\n\n        double average = numberList.Average();\n        Console.WriteLine($\"The average of the entered numbers is: {average}\");\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Find and explain the differences between error handling methods in Actian OpenROAD 4GL and C#. Discuss how you would convert a specific example of an Actian OpenROAD 4GL error handling code snippet to its equivalent C# code, using try-catch blocks.",
        "input": "Here is an example of error handling in Actian OpenROAD 4GL:\n```\nON ERROR GOTO ErrorHandler;\n    /* Your code here */\n    DISPLAY \"Successful execution.\";\n    STOP RUN;\nErrorHandler:\n    DISPLAY \"An error occurred.\";\n    /* Handle the error here */\nEND ON ERROR;\n```",
        "output": "In Actian OpenROAD 4GL, error handling is done using `ON ERROR GOTO` statements. In C#, you use try-catch blocks to handle errors. To convert the given error handling code snippet from Actian OpenROAD 4GL to C#:\n1. Replace the `ON ERROR GOTO` statement with a `try-catch` block.\n2. Move all the code that can potentially throw an exception inside the `try` block.\n3. Define custom error handling within the `catch` block using custom exception classes or built-in .NET Framework exceptions.\n4. Update the C# code as follows:\n```\ntry\n{\n    /* Your code here */\n    Console.WriteLine(\"Successful execution.\");\n}\ncatch (Exception ex)\n{\n    Console.WriteLine(\"An error occurred: \" + ex.Message);\n    // Handle the error here\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Translate the following Actian OpenROAD 4GL code to C#. Respond with C# code: LOOP FOR i = 1 TO 5 DO IF (i MOD 2) = 0 THEN DISPLAY 'Even'; ELSE DISPLAY 'Odd'; END-IF; END-LOOP;",
        "input": "",
        "output": "Here's the equivalent C# code:\n```\nfor (int i = 1; i <= 5; i++)\n{\n    if (i % 2 == 0)\n    {\n        Console.WriteLine(\"Even\");\n    }\n    else\n    {\n        Console.WriteLine(\"Odd\");\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Translate a simple Actian OpenROAD 4GL SQL query to C# LINQ query. Given an example, convert the following OpenROAD 4GL SQL query to its equivalent C# LINQ query:\nSELECT SUM(SALARY) FROM EMPLOYEE WHERE DEPARTMENT_ID = 'IT';",
        "input": "The Employee and Department tables are defined in the model as follows:\n```\nCREATE TABLE EMPLOYEE (\n    ID INT PRIMARY KEY,\n    NAME VARCHAR(25),\n    SALARY FLOAT,\n    DEPARTMENT_ID VARCHAR(10)\n);\n\nCREATE TABLE DEPARTMENT (\n    ID VARCHAR(10) PRIMARY KEY,\n    NAME VARCHAR(50)\n);\n```",
        "output": "Here's the equivalent C# LINQ query using Entity Framework Core:\n\nAssuming that `EmployeeContext` is your DbContext, `employees` is a list of `Employee`, and `departmentId` is the ID of the IT department:\n```\nusing (var db = new EmployeeContext())\n{\n    var result = db.Employees.Where(e => e.DEPARTMENT_ID == \"IT\").Sum(e => e.SALARY);\n    Console.WriteLine(\"The sum of salaries for employees in the IT department is: \" + result);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Given a C# class containing multiple methods, identify which method would most likely correspond to an Actian OpenROAD 4GL stored procedure and rewrite the C# code for that specific method as if it were an Actian OpenROAD 4GL stored procedure. Use SQL statements and pseudo-code to create your solution.",
        "input": "Here's a C# class with several methods:\n```csharp\npublic class MyClass\n{\n    public void InsertEmployee(int empId, string name)\n    {\n        // Code for inserting employee data into the database.\n        Console.WriteLine($\"Inserting new employee: {empId} - {name}\");\n    }\n\n    public void UpdateEmployee(int empId, string newName)\n    {\n        // Code for updating an existing employee's name in the database.\n        Console.WriteLine($\"Updating employee with ID: {empId} - New Name: {newName}\");\n    }\n\n    public void DeleteEmployee(int empId)\n    {\n        // Code for deleting an employee from the database with a given ID.\n        Console.WriteLine($\"Deleting employee with ID: {empId}\");\n    }\n\n    public int GetEmployeeCount()\n    {\n        // Code for retrieving the number of employees in the database.\n        return 5;\n    }\n}\n```",
        "output": "Assuming the `InsertEmployee` method corresponds to an Actian OpenROAD 4GL stored procedure, you can write the equivalent 4GL code as follows (using pseudo-code):\n```\nCREATE PROCEDURE Insert_Employee(IN pEmpId INTEGER, IN pName STRING)\nBEGIN\n    DECLARE localEmpId INTEGER;\n\n    -- Code for inserting employee data into the database.\n    SQLINSERT employees SET emp_id = pEmpId, name = pName;\nEND;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Given a table in Actian OpenROAD 4GL containing information about books and their authors (book_title, author_name, publisher), write an SQL query that retrieves all the books written by a specific author (John Smith) and sorts them in ascending order by title.",
        "input": "```\nCREATE TABLE Books (\n    book_id INTEGER,\n    book_title STRING,\n    author_name STRING,\n    publisher STRING\n);\nINSERT INTO Books VALUES(1, \"The Catcher in the Rye\", \"John Smith\", \"Penguin Random House\");\nINSERT INTO Books VALUES(2, \"To Kill a Mockingbird\", \"Harper Lee\", \"Harcourt Brace Jovanovich\");\nINSERT INTO Books VALUES(3, \"The Great Gatsby\", \"F. Scott Fitzgerald\", \"Scribner\");\nINSERT INTO Books VALUES(4, \"Pride and Prejudice\", \"Jane Austen\", \"Penguin Classics\");\n```",
        "output": "To retrieve all the books written by John Smith and sort them in ascending order by title, you can use the following SQL query:\n```sql\nSELECT book_title FROM Books WHERE author_name = 'John Smith' ORDER BY book_title ASC;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Given a list of numbers stored in an Actian OpenROAD 4GL variable, write a function to find the maximum number from the list and return it as a single integer value.",
        "input": "numbers = (12, 35, 8, 9, 27);",
        "output": "In Actian OpenROAD 4GL, you can use the MAX function to find the maximum number in a list. Here's an example:\n```\nDEFINE FUNCTION FIND_MAX(numbers AS INTEGER LIST) AS max_value INTEGER.\n    SET max_value = MAX(numbers);\nEND DEFINE;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Provide an explanation about how to convert an Actian OpenROAD 4GL loop that iterates over an array of integers and calculates the sum into C# code. Please include a sample input for Actian OpenROAD 4GL and the expected equivalent C# code.",
        "input": "```\nDECLARE i INTEGER;\nDECLARE total INTEGER;\n\nSET total = 0;\n\nFOR EACH row IN ARRAY_OF_INTEGERS DO\n    SET total = total + ROW;\nEND FOR;\n```",
        "output": "Here's an explanation of the conversion and sample code in C#:\nThe loop in Actian OpenROAD 4GL iterates over each element in `ARRAY_OF_INTEGERS` array. In C#, you can use a `for` loop to achieve the same functionality. The variable `i` is used for iteration index and `total` stores the sum of elements.\n```csharp\nint[] arrayOfIntegers = {1, 2, 3, 4, 5}; // Sample input\nint total = 0;\nfor (int i = 0; i < arrayOfIntegers.Length; i++)\n{\n    total += arrayOfIntegers[i];\n}\nConsole.WriteLine($\"The sum is: {total}\");\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Refactor the following Actian OpenROAD 4GL code to reduce repetition: IF EMPLOYEE_COUNT > 0 THEN DO SOMETHING ELSE DO NOTHING; IF MANAGER_COUNT > 0 THEN DO SOMETHING ELSE DO NOTHING; IF DEPARTMENT_COUNT > 0 THEN DO SOMETHING ELSE DO NOTHING.",
        "input": "",
        "output": "Here's a refactored version of the given Actian OpenROAD 4GL code to reduce repetition:\n```\nIF (EMPLOYEE_COUNT > 0 OR MANAGER_COUNT > 0 OR DEPARTMENT_COUNT > 0) THEN DO SOMETHING ELSE DO NOTHING;\n```\nThis version checks if any of the counts are greater than zero before executing the code block.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Create a simple Actian OpenROAD 4GL stored procedure that accepts an input parameter (employeeId) and returns the employee's name from the EMPLOYEE table.",
        "input": "The Employee table is defined as follows:\n```\nCREATE TABLE EMPLOYEE (\n    ID INT PRIMARY KEY,\n    NAME VARCHAR(25),\n    DEPARTMENT_ID VARCHAR(10)\n);\n```",
        "output": "Here's a simple Actian OpenROAD 4GL stored procedure to get an employee's name from the EMPLOYEE table:\n```\nDEFINE PROCEDURE GET_EMPLOYEE_NAME (IN employeeId VARCHAR(10))\n    RETURNING VARCHAR(25) AS result;\nBEGIN\n    SELECT NAME INTO :result FROM EMPLOYEE WHERE ID = employeeId;\nEND DEFINE;\n```\nThe stored procedure accepts an input parameter `employeeId` and returns the matching employee's name in the `result` variable. You can call this procedure with a specific employee ID to get their name like this:\n```\nCALL GET_EMPLOYEE_NAME('12345');\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Assume that the Actian OpenROAD 4GL code sorts an array of strings in ascending order using the bubble sort algorithm. Write C# code to implement the same functionality.",
        "input": "",
        "output": "Here's C# code to implement the bubble sort algorithm:\n```\npublic static void BubbleSort(string[] arr)\n{\n    for (int pass = 1; pass < arr.Length; pass++)\n    {\n        for (int i = 0; i < arr.Length - pass; i++)\n        {\n            if (arr[i].CompareTo(arr[i + 1]) > 0)\n            {\n                string temp = arr[i];\n                arr[i] = arr[i + 1];\n                arr[i + 1] = temp;\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Translate and explain the purpose of the following Actian OpenROAD 4GL code: UPDATE sales SET total = total + @amount WHERE order_id = @orderId;",
        "input": "",
        "output": "The given Actian OpenROAD 4GL code updates the \"total\" value in the \"sales\" table for a specific row (identified by \"order_id\") with an increment of \"@amount\". In other words, it increases the total amount associated with that order by the provided amount.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Provide an example of searching for a specific record from the \"employees\" table using Actian OpenROAD 4GL. Respond with sample code.",
        "input": "Assume we want to find the employee whose first name is John and last name is Doe.",
        "output": "Here's a sample search operation in Actian OpenROAD 4GL for finding an employee with the given names:\n```\nSELECT * FROM employees WHERE first_name = 'John' AND last_name = 'Doe';\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Translate the following Actian OpenROAD 4GL code block to C#. Respond with C# code: IF emp_salary > 5000 THEN DO Display emp_name END DO;",
        "input": "",
        "output": "Here's the equivalent C# code:\n```\nstring query = \"SELECT emp_name FROM employees WHERE emp_salary > @empSalary\";\nusing (SqlConnection conn = new SqlConnection(connectionString))\n{\n    SqlCommand cmd = new SqlCommand(query, conn);\n    cmd.Parameters.AddWithValue(\"@empSalary\", 5000);\n    conn.Open();\n    SqlDataReader reader = cmd.ExecuteReader();\n    while (reader.Read())\n    {\n        string empName = reader[\"emp_name\"].ToString();\n        Console.WriteLine(empName);\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Given an Actian OpenROAD 4GL function that calculates the total number of employees based on their employment status (Full-time, Part-time), rewrite it in C#. Respond with C# code:",
        "input": "```\nFUNCTION countEmpTotal(emp_status) RETURNS INTEGER;\nBEGIN\n  IF emp_status = \"Full-time\" THEN\n    RETURN countEmpByStatus(\"Full-time\");\n  ELSEIF emp_status = \"Part-time\" THEN\n    RETURN countEmpByStatus(\"Part-time\");\n  END IF;\nEND;\n```",
        "output": "Here's the equivalent C# function:\n```csharp\nint CountEmployeeTotal(string empStatus)\n{\n    if (empStatus == \"Full-time\")\n        return CountEmployeesByStatus(\"Full-time\");\n    else if (empStatus == \"Part-time\")\n        return CountEmployeesByStatus(\"Part-time\");\n    // Handle invalid input, for example throw an exception or return a default value like 0.\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to convert a simple Actian OpenROAD 4GL cursor loop into C# using the `using` statement and ADO.NET. Provide an example with data.",
        "input": "In this example, we have a cursor named 'emp_cursor' that retrieves employee details from a database:\n```\nDEFINE CURSOR emp_cursor AS SELECT emp_id, emp_name FROM employees;\nOPEN emp_cursor;\nWHILE FETCH emp_cursor DO\n  Write-Line ( \"ID:\", emp_id );\n  Write-Line ( \"Name:\", emp_name );\nEND WHILE;\nCLOSE emp_cursor;\n```",
        "output": "Here's the C# code that achieves the same functionality using a `using` statement and ADO.NET:\n```\nstring connectionString = \"Data Source=server;Initial Catalog=dbName;User ID=user;Password=password\";\nusing (SqlConnection conn = new SqlConnection(connectionString))\n{\n    string query = \"SELECT emp_id, emp_name FROM employees\";\n    using (SqlCommand cmd = new SqlCommand(query, conn))\n    {\n        conn.Open();\n        using (SqlDataReader reader = cmd.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int id = Convert.ToInt32(reader[\"emp_id\"]);\n                string name = reader[\"emp_name\"].ToString();\n                Console.WriteLine(\"ID: \" + id);\n                Console.WriteLine(\"Name: \" + name);\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "In Actian OpenROAD 4GL, how do you check if a given string is a valid email address? Provide an example of code in Actian OpenROAD 4GL.",
        "input": "string email = \"test@example.com\"",
        "output": "Here's an example of Actian OpenROAD 4GL code to validate an email address:\n```\nDEFINE VAR strEmail AS CHARACTER LENGTH 100 NOT NULL INITALLY \"\";\nIF REGEXP_MATCH(strEmail, \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$\") THEN\n  MESSAGE \"The email is valid.\";\nELSE\n  MESSAGE \"The email is not valid.\";\nEND IF;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# method to find the maximum element in a given array of integers using Actian OpenROAD 4GL's equivalent functions. Assume that you have the MAXIMUM function available in C#.",
        "input": "int[] arr = {1, 2, 3, 4, 5};",
        "output": "Here's the C# code to find the maximum element using the built-in `MAXIMUM` function:\n```\nint maxElement = MAXIMUM(arr);\nConsole.WriteLine(\"The maximum element is: \" + maxElement);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Create a method in C# to perform a case-insensitive search for a specific string within a multi-line text (book content).",
        "input": "```\npublic static bool SearchInText(string text, string searchString)\n{\n    // Your implementation here\n}\n\nconst string bookContent = @\"The sun shone, having no rhythm, above impassive mountains. The sands were vast, wide, and flat. They stretched in all directions and the great dunes that once had caught the eye like ocean waves lay lifeless in the harsh glare.\";\n\nbool result = SearchInText(bookContent, \"sun\");\n```",
        "output": "To create a method that performs a case-insensitive search for a specific string within a multi-line text, you can use the following implementation:\n```csharp\npublic static bool SearchInText(string text, string searchString)\n{\n    return text.ToLower().Contains(searchString.ToLower());\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Translate the following Actian OpenROAD 4GL code to C#. Respond with C# code: IF employee.emp_age >= 65 AND employee.emp_status = \"retired\" THEN DISPLAY \"The employee is eligible for retirement\"; ELSE DISPLAY \"The employee is not eligible for retirement\"; END IF;",
        "input": "Assume that there is an employee object named \"emp\" and it has the properties 'emp_age' with the value of 67 and 'emp_status' with the value of \"retired\".",
        "output": "Here's the equivalent C# code:\n```\nif (emp.emp_age >= 65 && emp.emp_status == \"retired\")\n{\n    Console.WriteLine(\"The employee is eligible for retirement\");\n}\nelse\n{\n    Console.WriteLine(\"The employee is not eligible for retirement\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Find a suitable Actian OpenROAD 4GL function to calculate the sum of all salaries in the EMPLOYEE table.",
        "input": "The EMPLOYEE table contains a column `SALARY` with numeric values.",
        "output": "Here's an example Actian OpenROAD 4GL function that calculates the total sum of salaries for the EMPLOYEE table:\n```\nDEFINE FUNCTION CALC_TOTAL_SALARIES()\n    RETURNING DECIMAL(15,2);\nBEGIN\n    DECLARE totalSalary DECIMAL(15,2);\n    SELECT SUM(SALARY) INTO :totalSalary FROM EMPLOYEE;\n    RETURN totalSalary;\nEND DEFINE;\n```\nThis function calculates the sum of salaries in the EMPLOYEE table and returns the total as a DECIMAL value. You can call this function to get the calculated total like this:\n```\nSELECT CALC_TOTAL_SALARIES();\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# method that accepts an SQL query and performs the operation using ADO.NET. The method should return the number of affected rows.",
        "input": "",
        "output": "Here's a simple C# method to perform an SQL query with ADO.NET, accepting the connection string and the query as parameters:\n```\nint ExecuteQueryAndReturnAffectedRows(string connString, string sql)\n{\n    int rowsAffected = 0;\n\n    using (SqlConnection conn = new SqlConnection(connString))\n    {\n        conn.Open();\n        SqlCommand cmd = new SqlCommand(sql, conn);\n        rowsAffected = cmd.ExecuteNonQuery();\n    }\n\n    return rowsAffected;\n}\n```\nYou can call this method with an SQL query that performs a DELETE or UPDATE operation and it will return the number of affected rows. For example, to delete a specific employee record:\n```\nint numEmployeesDeleted = ExecuteQueryAndReturnAffectedRows(connectionString, \"DELETE FROM employees WHERE emp_id = 1234;\");\nConsole.WriteLine(\"Number of employees deleted: {0}\", numEmployeesDeleted);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Find a suitable Actian OpenROAD 4GL function that takes two parameters, one is an array of employee IDs and the other is an array of their corresponding salary values. The function should return an array containing the total salaries for each employee specified in the input arrays.",
        "input": "The employee IDs are stored in the `employeeIds` variable as a list of integers, and the respective salary values are stored in the `salaryValues` variable as a corresponding list. The size of both lists is expected to be equal.",
        "output": "Here's an example Actian OpenROAD 4GL function that takes two input arrays (employee IDs and their corresponding salaries) and returns an array containing the total salaries for each employee specified in the input arrays:\n```\nDEFINE FUNCTION GET_TOTAL_SALARIES(empIds ARRAY INT, salValues ARRAY DECIMAL(15,2))\n    RETURNING ARRAY DECIMAL(15,2);\nBEGIN\n    DECLARE totalSalaries ARRAY DECIMAL(15,2);\n    LOOP AT empIds INTO :empId;\n        FIND EMPLOYEE WHERE ID = :empId;\n        IF FOUND THEN SELECT SUM(SALARY) INTO :currentTotal FROM CURRENT OF EMPLOYEE;\n            APEND :currentTotal TO totalSalaries;\n        END IF;\n    END LOOP;\n    RETURN totalSalaries;\nEND DEFINE;\n```\nYou can call this function and pass the input arrays as follows:\n```\nSELECT GET_TOTAL_SALARIES(ARRAY([1, 2, 3]), ARRAY([5000.00, 6000.00, 7000.00]));\n```\nThis function takes the input arrays and iterates through them to calculate the total salary for each employee using the current row in EMPLOYEE table, appending the result to a new array before moving onto the next ID. Finally, it returns an array containing the total salaries for the specified employees.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Translate the following Actian OpenROAD 4GL code to C# and make it print the average of all numbers in a given array:\n\n```\nDEFINE FUNCTION AVG(numbers ARRAY DECIMAL(15,2)) RETURNING DECIMAL(15,2); BEGIN DECLARE total DECIMAL(15,2) = 0.00; LOOP AT numbers INTO :n; ADD total := total + n; END-LOOP; DIVIDE total BY LENGTH(numbers); RETURN total; END DEFINE; SELECT AVG(ARRAY([1.00, 3.56, 8.90, 2.12, 7.48]));\n```",
        "input": "",
        "output": "Here's the equivalent C# code to calculate and print the average of all numbers in a given array:\n```\npublic static void PrintAverage(decimal[] numbers)\n{\n    decimal total = 0;\n    foreach (decimal number in numbers)\n    {\n        total += number;\n    }\n    decimal average = total / numbers.Length;\n    Console.WriteLine(\"The average of the given numbers is: \" + average);\n}\n\n// You can call the method and pass a sample array as follows:\ndecimal[] inputArray = new decimal[5] { 1.00m, 3.56m, 8.90m, 2.12m, 7.48m };\nPrintAverage(inputArray);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write C# code to sort a given array of integers using Actian OpenROAD 4GL's bubble sort algorithm (but in C#).",
        "input": "",
        "output": "Here's an example implementation of the bubble sort algorithm in C#:\n```\nvoid BubbleSort(int[] numbers)\n{\n    int n = numbers.Length;\n\n    for (int i = 0; i < n - 1; i++)\n    {\n        for (int j = 0; j < n - i - 1; j++)\n        {\n            if (numbers[j] > numbers[j + 1])\n            {\n                // Swap numbers[j+1] and numbers[j]\n                int temp = numbers[j];\n                numbers[j] = numbers[j + 1];\n                numbers[j + 1] = temp;\n            }\n        }\n    }\n}\n```\nYou can call the function with a sample array like so:\n```\nint[] unsortedArray = new int[] { 3, 5, 2, 9, 7 };\nBubbleSort(unsortedArray); // The sorted array is [2, 3, 5, 7, 9]\nConsole.WriteLine(string.Join(\", \", unsortedArray));\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Explain the differences between using a stored procedure and executing a raw SQL query in C# when working with databases.",
        "input": "",
        "output": "While both stored procedures and raw SQL queries allow you to interact with a database, they have some key differences. A stored procedure is a precompiled, parameterized database object that encapsulates one or more Transact-SQL statements. It can include logic for error handling and transaction control, making it more efficient and secure compared to executing multiple raw SQL queries separately. On the other hand, using a raw SQL query involves explicitly writing out each SQL statement for a specific task, which may be less efficient and potentially prone to security risks if not properly parameterized.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# method that accepts two parameters representing a first name and last name, and returns a formatted string with the person's full name using title case for each word. Respond with C# code:",
        "input": "string firstName = \"john\";\nstring lastName = \"doe\";",
        "output": "```\npublic static string FormatName(string firstName, string lastName)\n{\n    return Char.ToUpper(firstName[0]) + firstName.Substring(1).ToLower() + \" \" + Char.ToUpper(lastName[0]) + lastName.Substring(1).ToLower();\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Describe how to implement a loop in C# that iterates over an array of strings and counts the frequency of each unique word within the array.",
        "input": "The input is a list of words stored in the `inputWords` variable, as follows:\n```\nstring[] inputWords = new string[] { \"apple\", \"banana\", \"orange\", \"apple\", \"lemon\", \"banana\" };\n```",
        "output": "Here's an example C# code to implement the loop:\n```\nDictionary<string, int> wordFrequency = new Dictionary<string, int>();\nforeach (var word in inputWords)\n{\n    if (!wordFrequency.ContainsKey(word))\n        wordFrequency[word] = 1; // First occurrence of a word\n    else\n        wordFrequency[word]++;   // Subsequent occurrences of a word\n}\n```\nIn this code, we use a `Dictionary<string, int>` to store the frequency of each unique word in the input array. We loop through the array using a foreach loop, checking whether the current word is already present in the dictionary (using `ContainsKey` method). If it's the first occurrence, we add the word along with its count (1) to the dictionary. For subsequent occurrences, we simply increment the count of that specific word by 1 using the `[]` operator.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Explain the main differences between Actian OpenROAD 4GL and C# programming languages in terms of syntax, advantages, and disadvantages.",
        "input": "",
        "output": "Actian OpenROAD 4GL is a proprietary language for database application development that allows developers to create applications through declarative programming, while C# is a high-level, object-oriented programming language developed by Microsoft.\n\nHere are some main differences:\n1. Syntax: Actian OpenROAD 4GL uses English-like statements and SQL for queries, whereas C# uses C-style syntax with curly braces and semicolons.\n2. Structure: Actian OpenROAD 4GL is focused on application development using a combination of procedural and declarative constructs, while C# follows an object-oriented approach with classes, objects, and inheritance.\n3. Performance: C# generally provides better performance due to its low-level language characteristics compared to Actian OpenROAD 4GL's high-level, declarative nature.\n4. Platform compatibility: C# offers superior cross-platform compatibility since it can run on various platforms such as Windows, macOS, Linux, and even mobile devices through Mono and Xamarin. Actian OpenROAD 4GL is primarily designed for IBM DB2 environments and may not have seamless support for other databases or operating systems.\n5. Libraries: C# has a vast ecosystem of open-source libraries such as ASP.NET, Unity, and XNA that cater to different needs like web development, game development, and scientific computing. Actian OpenROAD 4GL has fewer third-party resources available for extended functionality.\n6. Learning curve: C# has a steeper learning curve due to its more complex syntax and object-oriented structure compared to the relatively simpler English-like statements in Actian OpenROAD 4GL.\n7. Maturity: C# is an established programming language with over two decades of history, while Actian OpenROAD 4GL has been around for less time and might not have as many resources or community support compared to C#.\n8. Legacy systems: For businesses running on Actian OpenROAD-based legacy systems, upgrading to a more modern programming language like C# may be costly due to the need for refactoring existing applications and retraining staff.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Provide a C# code snippet that converts a date in the Actian OpenROAD 4GL \"dd/MM/yyyy\" format into a DateTime object in C#. Respond with C# code and explain the logic for your solution.",
        "input": "string dateString = \"01/01/2000\";",
        "output": "```csharp\nDateTime dateTimeObject;\nif (DateTime.TryParseExact(dateString, \"dd/MM/yyyy\", null, DateTimeStyles.None, out dateTimeObject))\n{\n    Console.WriteLine($\"Date converted successfully: {dateTimeObject}\");\n}\nelse\n{\n    Console.WriteLine(\"Invalid input format or date.\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Suppose there is a database table `employee_info` in Actian OpenROAD that contains columns for employee ID, first name, last name, and employment status. Write a C# LINQ query to filter this table by employment status and return the full names of all employees with \"Part-time\" status.",
        "input": "DataTable employeeInfo = GetEmployeeInfoFromDatabase();",
        "output": "```csharp\nvar partTimeEmployees = employeeInfo.AsEnumerable()\n    .Where(row => row.Field<string>(\"employment_status\") == \"Part-time\")\n    .Select(row => $\"{row.Field<string>(\"first_name\")} {row.Field<string>(\"last_name\")}\");\nforeach (var employee in partTimeEmployees)\n{\n    Console.WriteLine($\"Employee: {employee}\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write C# code to create a method that calculates the total price for items in a shopping cart given their quantities and prices. Use the following Actian OpenROAD 4GL example: COMPUTE totalPrice = price1 * quantity1 + price2 * quantity2;",
        "input": "double[] prices = {50, 30};\nint[] quantities = {3, 2};",
        "output": "```csharp\npublic double CalculateTotalPrice(double[] prices, int[] quantities)\n{\n    double totalPrice = 0.0;\n    for (int i = 0; i < prices.Length; ++i)\n    {\n        totalPrice += prices[i] * quantities[i];\n    }\n    return totalPrice;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Translate the following Actian OpenROAD 4GL code to C#: LOOP WHILE count > 0 DO IF array_size - 1 >= lastIndex THEN REMOVE FROM ARRAY elements[lastIndex] END IF; DECREMENT count; END LOOP.",
        "input": "",
        "output": "Here's the equivalent C# code:\n```csharp\nint count = <someInitialCount>; // Set the initial value of the counter\nArray array = <yourArrayInstance>; // Define your array here\n\nwhile (count > 0)\n{\n    int lastIndex = array.Length - 1;\n    if (lastIndex >= 0)\n    {\n        Array.RemoveAt(array, lastIndex);\n    }\n    count--;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Identify common pitfalls when converting Actian OpenROAD 4GL code to C# and explain them.",
        "input": "",
        "output": "Some common pitfalls when converting Actian OpenROAD 4GL code to C# are:\n1. Failing to handle exceptions properly: In Actian OpenROAD 4GL, you might have used ON-ERROR statements or specific error handling constructs, but in C#, proper exception handling is crucial for a robust and maintainable program.\n2. Mapping data types: Different programming languages use different data types for various purposes. For example, OpenROAD uses DECIMAL(15,2) as a decimal number, while C# uses decimal or double depending on the precision needed. Make sure to map these data types accurately during conversion.\n3. Understanding control structures: OpenROAD and C# have different syntax for control structures like loops, conditionals, and subroutines. Be aware of these differences and rewrite your code accordingly.\n4. Optimizing performance: C# is a statically typed language, while OpenROAD is dynamically typed. This difference can impact the performance of your converted code, so be mindful of potential bottlenecks and optimize as needed.\n5. Handling memory management: In OpenROAD, memory allocation is managed by the system. However, in C#, developers have to handle memory management using techniques like garbage collection or manual disposal of objects to avoid memory leaks.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Research and explain the concept of data types in Actian OpenROAD 4GL and C#, with a focus on scalar (simple) data types. Compare and contrast the similarities and differences between these simple data types in both languages. Provide examples of equivalent data type declarations and manipulations in each language using the following sample variable names: intAO4GL for Actian OpenROAD 4GL and intCSharp for C#.",
        "input": "",
        "output": "In Actian OpenROAD 4GL, scalar data types include Character (CHAR), Integer (INTEGER), Decimal (DECIMAL), Real (FLOAT), Date (DATE), Time (TIME), Timestamp (DATETIME) and Boolean (BOOLEAN). Each type represents a specific category of values.\n\nIn C#, the equivalent simple data types are: Char, Int32 (integer), Decimal, Double (float), DateTime, TimeSpan, and bool, which all follow similar naming conventions but may have different default sizes and ranges compared to Actian OpenROAD 4GL counterparts.\n\nHere's how you would declare and manipulate the sample variables for integer data type in each language:\n- In Actian OpenROAD 4GL:\n```\nDECLARE intAO4GL INTEGER;\nSET intAO4GL = 123;\nDISPLAY intAO4GL;\n```\n- In C#:\n```csharp\nint intCSharp = 123; // Declare and initialize the variable\nConsole.WriteLine(intCSharp); // Display the value of the variable\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Discuss the process of reading user input in Actian OpenROAD 4GL and C#, focusing on command-line arguments for console applications. Provide a code snippet for each language that demonstrates reading command-line arguments from the main method.",
        "input": "",
        "output": "In Actian OpenROAD 4GL, you can read user input using the `READ` statement in a console application. However, there's no support for reading command-line arguments directly as a standard feature. To pass command-line arguments to an Actian OpenROAD 4GL program, you may have to use external scripts or create custom solutions.\n\nIn C#, command-line arguments can be accessed from the `args` array in the `Main` method of a console application:\n```csharp\nusing System;\n\nnamespace ConsoleApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            if (args.Length > 0)\n            {\n                Console.WriteLine(\"Argument received: \" + args[0]);\n            }\n            else\n            {\n                Console.WriteLine(\"No argument provided.\");\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Convert the following C# code snippet to Actian OpenROAD 4GL:\n```\nstring[] names = { \"John\", \"Sarah\", \"Michael\" };\nforeach (string name in names)\n{\n    Console.WriteLine(name);\n}\n```",
        "input": "",
        "output": "Here's the equivalent Actian OpenROAD 4GL code:\n```\nDEFINE VAR strNames AS TABLE OF CHARACTER LENGTH 20;\nstrNames = (\"John\", \"Sarah\", \"Michael\");\nFOR EACH strName IN strNames DO\n    DISPLAY strName;\nEND FOR;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Actian OpenROAD 4GL lacks a native way to implement functions. In C#, if you have a function that calculates the factorial of a number, what would be a workaround in Actian OpenROAD 4GL?",
        "input": "",
        "output": "In Actian OpenROAD 4GL, you can define a user-defined subroutine (UDS) to mimic the behavior of functions. Here's an example UDS for calculating a factorial:\n```\nDEFINE SUB FACTORIAL(n INTEGER) RETURNS INTEGER NO SQL;\n  DECLARE fact INTEGER DEFAULT 1;\n  IF n = 0 THEN\n    RETURN 1;\n  ELSE\n    WHILE n > 1 DO\n      fact = fact * n;\n      n = n - 1;\n    END WHILE;\n  END IF;\n  RETURN fact;\nEND SUB FACTORIAL;\n```\nThen you can call the UDS like this:\n```\nDEFINE VAR result AS INTEGER DEFAULT 0;\nresult = FACTORIAL(5);\nMESSAGE \"The factorial of 5 is \" + result;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write a function for converting an Actian OpenROAD 4GL SQL statement into its equivalent C# code using ADO.NET. Consider the following 4GL SQL: `SQLDELETE employee_info WHERE employee_id = :empId`.",
        "input": "string empId = \"12345\";\nDataTable employeeInfo = new DataTable();",
        "output": "```csharp\npublic void DeleteEmployeeById(string empId)\n{\n    string connectionString = \"<connection_string>\";\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        SqlCommand command = new SqlCommand(\"DELETE FROM employee_info WHERE employee_id = @empId\", connection);\n        command.Parameters.AddWithValue(\"@empId\", empId);\n        int rowsAffected = command.ExecuteNonQuery();\n        Console.WriteLine($\"Rows affected: {rowsAffected}\");\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Translate the following Actian OpenROAD 4GL code to C#, which reads data from an SQL table named \"orders\" and stores it in a list of custom Order objects. Assume each row contains id, customer_id, order_date, total_price and product columns.",
        "input": "DECLARE cursor c1;\nSELECT * FROM orders INTO c1;\nWHILE NOT AT END OF c1 DO BEGIN\n\tLET customerId = FIELD(c1,'customer_id');\n\tLET orderDate = FIELD(c1, 'order_date');\n\tLET totalPrice = FIELD(c1, 'total_price');\nEND;",
        "output": "```csharp\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\npublic class Order\n{\n    public int Id { get; set; }\n    public int CustomerId { get; set; }\n    public DateTime OrderDate { get; set; }\n    public decimal TotalPrice { get; set; }\n}\npublic List<Order> ReadOrders()\n{\n    var orders = new List<Order>();\n    using (var connection = new SqlConnection(\"your_connection_string\"))\n    {\n        connection.Open();\n        using (var command = new SqlCommand(\"SELECT * FROM orders\", connection))\n        {\n            var reader = command.ExecuteReader();\n            while (reader.Read())\n            {\n                orders.Add(new Order()\n                {\n                    Id = reader.GetInt32(0),\n                    CustomerId = reader.GetInt32(1),\n                    OrderDate = reader.GetDateTime(2),\n                    TotalPrice = reader.GetDecimal(3)\n                });\n            }\n        }\n    }\n    return orders;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write C# code to implement the sorting functionality for an array of strings that contains words and sorts them alphabetically using the bubble sort algorithm. Use the following Actian OpenROAD 4GL example as a reference: SORT data ASCENDING by column2 in table1;",
        "input": "string[] words = {\"Apple\", \"Banana\", \"Carrot\", \"Date\"};",
        "output": "```csharp\npublic void BubbleSort(string[] words)\n{\n    var n = words.Length;\n    for (int i = 0; i < n - 1; ++i)\n    {\n        for (int j = 0; j < n - i - 1; ++j)\n        {\n            if (words[j].CompareTo(words[j + 1]) > 0)\n            {\n                var temp = words[j];\n                words[j] = words[j + 1];\n                words[j + 1] = temp;\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Provide a real-life example of how an Actian OpenROAD 4GL program and its equivalent C# code can be used to perform similar tasks, focusing on the implementation of a simple inventory management system.",
        "input": "Suppose there is a warehouse that stores various items such as books, electronics, and toys. The warehouse has a database containing information about each item's name, quantity in stock, and its unit price. Developers have created an Actian OpenROAD 4GL program to manage the inventory system, while we want to rewrite it using C# to improve its maintainability and scalability.",
        "output": "In the inventory management system, there are several common tasks like adding new items, checking item availability, updating stock quantity, and generating reports. Here's a high-level comparison of how the same functionality can be achieved in both Actian OpenROAD 4GL and C#:\n\n1. Adding an item to the inventory system:\n   - Actian OpenROAD 4GL: INSERT new_item (name, quantity, price) VALUES ('Book', 20, 50);\n   - C#:\n     ```\n     public void AddItem(string name, int quantity, decimal price)\n     {\n         // Code to add the item to the database using an ORM like Entity Framework or Dapper\n     }\n     ```\n\n2. Checking item availability:\n   - Actian OpenROAD 4GL: SELECT quantity FROM items WHERE name = 'Book';\n   - C#:\n     ```\n     public int CheckItemAvailability(string name)\n     {\n         // Code to retrieve the current stock from the database using an ORM like Entity Framework or Dapper and return the result\n     }\n     ```\n\n3. Updating item quantity when a sale is made:\n   - Actian OpenROAD 4GL: UPDATE items SET quantity = quantity - 1 WHERE name = 'Book';\n   - C#:\n     ```\n     public void UpdateItemQuantity(string name)\n     {\n         // Code to update the stock in the database using an ORM like Entity Framework or Dapper and then return the updated stock amount\n     }\n     ```\n\n4. Generating reports on inventory levels:\n   - Actian OpenROAD 4GL: REPORT items_report (SELECT name, quantity FROM items WHERE quantity <= 10);\n   - C#:\n     ```\n     public void GenerateLowStockReport()\n     {\n         // Code to generate a report on items with low stock levels using LINQ and data binding in .NET\n     }\n     ```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# function to convert the given Actian OpenROAD 4GL code block to C#. The function will accept an integer variable 'emp_salary' and display a message 'Employee with high salary.' if emp_salary is greater than or equal to 50000; otherwise, it should return 'Employee with low salary.'",
        "input": "<noinput>\n```\nDEFINE FUNCTION get_employee_salary_info (emp_salary INTEGER) RETURNS CHARACTER VARYING NO-UNDO.\n    IF emp_salary >= 50000 THEN DO Display 'Employee with high salary.' END DO ELSE Display 'Employee with low salary.' END IF;\nEND DEFINE;\n```",
        "output": "```\npublic string GetEmployeeSalaryInfo(int empSalary)\n{\n    if (empSalary >= 50000)\n        return \"Employee with high salary.\";\n    else\n        return \"Employee with low salary.\";\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Create a simple C# console application that reads an employee's name and calculates the employee's commission based on the employee's sales. The commission is calculated by multiplying the sales amount by 0.1 (10%) if sales are greater than or equal to $50,000; otherwise, it should be a flat rate of $200. Prompt the user for their name and sales amount in the application and display the commission calculation.",
        "input": "John Doe\n70000",
        "output": "John Doe's commission: 7000",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Create a method in C# that converts a given date in Actian OpenROAD's `DATE` format to the .NET's `DateTime` object. For example, \"01-MAR-2023\" should return 2023-03-01 00:00:00.",
        "input": "string dateStr = \"01-MAR-2023\";",
        "output": "```csharp\npublic static DateTime DateToDateTime(string dateString)\n{\n    string[] parts = dateString.Split('-');\n    int day = Convert.ToInt32(parts[0]);\n    int month = (int)Enum.Parse(typeof(System.Globalization.CultureInfo + \"CalendarType\"), parts[1], true);\n    int year = Convert.ToInt32(parts[2]);\n    return new DateTime(year, month, day);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Translate the following Actian OpenROAD loop to its equivalent C# for loop. The loop initializes a variable `i`, loops through the numbers array (1 to n), performs some calculation based on the index of the current number, and stores the result in an array `results`.\n```\nDEFINE VARIABLE i AS INTEGER = 1;\nDECLARE results ARRAY DECIMAL(15,2) = ARRAY();\nLOOP UNTIL i > n;\n    ADD results[i] = (i * i + 3) / n * 10.56;\n    ADD i += 1;\nEND-LOOP;\n```",
        "input": "int n = 5;\ndecimal[] numbers = new decimal[n];\ndecimal[] results = new decimal[n];",
        "output": "```csharp\nfor (int i = 1; i <= n; i++)\n{\n    results[i - 1] = ((i * i + 3) / n) * 10.56m;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Convert this Actian OpenROAD 4GL code to C#: SELECT INTO NEW VARIABLE \"output\" FROM <someTableName> WHERE condition1 OR condition2.",
        "input": "",
        "output": "```csharp\n// Assuming \"someTableName\" is a class representing your database table and you have defined the necessary properties and methods to query the data.\n\nList<OutputType> output = new List<OutputType>(); // Define an empty list to store the query results\nusing (var connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (var command = new SqlCommand(\"SELECT * FROM \" + someTableName + \" WHERE condition1 OR condition2\", connection))\n    {\n        using (var reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                output.Add(new OutputType\n                {\n                    // Initialize your class properties here based on the query columns.\n                    Property1 = reader[0].ToString(),\n                    Property2 = reader[1].ToString(),\n                    // Add more properties as needed\n                });\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Modify the given C# code to sort the elements of an array in descending order using quicksort.",
        "input": "```csharp\nint[] arr = {1,5,2,6,3,7}; // Sample array data\narr = QuickSort(arr, 0, arr.Length - 1);\n```",
        "output": "Here's the updated code for sorting an array in descending order using quicksort:\n```csharp\nint[] QuickSort(int[] arr, int low, int high)\n{\n    if (low < high)\n    {\n        int pivotIndex = Partition(arr, low, high);\n\n        QuickSort(arr, low, pivotIndex - 1); // Sort elements smaller than the pivot\n        QuickSort(arr, pivotIndex + 1, high); // Sort elements greater than or equal to the pivot\n    }\n    return arr;\n}\n\nint Partition(int[] arr, int low, int high)\n{\n    int pivot = arr[high];\n    int i = (low - 1);\n    for (int j = low; j <= high - 1; j++)\n    {\n        if (arr[j] < pivot)\n        {\n            i++;\n            Swap(ref arr[i], ref arr[j]); // Swap elements around the pivot index\n        }\n    }\n    Swap(ref arr[i + 1], ref arr[high]); // Swap the pivot with its final position\n    return (i + 1);\n}\n\nvoid Swap<T>(ref T a, ref T b)\n{\n    T temp = a;\n    a = b;\n    b = temp;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Determine how to convert a user-defined function (UDF) in Actian OpenROAD 4GL that calculates the average of an array into an equivalent C# method. Use this example as reference: DEFINE FUNCTION AVG_ARRAY(A ARRAY OF INTEGER). RETURN (SUM(A)/COUNT(A)).",
        "input": "int[] numbers = {1, 2, 3, 4};",
        "output": "```csharp\npublic double AvgArray(int[] numbers)\n{\n    var sum = 0;\n    foreach (var number in numbers)\n    {\n        sum += number;\n    }\n\n    return (double)sum / numbers.Length;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Identify and provide an example of how to convert a cursor-based query in Actian OpenROAD 4GL into a LINQ query in C# for the same dataset. The dataset should include a table named \"employees\" with columns \"ID\", \"Name\", and \"Salary\".",
        "input": "SELECT * FROM employees WHERE Salary > 5000;",
        "output": "```csharp\nvar employees = from emp in dbContext.Employees\n                where emp.Salary > 5000\n                select new { ID = emp.ID, Name = emp.Name, Salary = emp.Salary };\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# code snippet that demonstrates a simple search functionality to retrieve an employee record using the EmpName property from the \"employees\" table. Respond with C# code.",
        "input": "",
        "output": "```csharp\nusing System;\nusing System.Data.SqlClient;\npublic Employee FindEmployeeByName(string empName)\n{\n    Employee employee = null;\n    string connectionString = \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword\";\n    using (SqlConnection conn = new SqlConnection(connectionString))\n    {\n        SqlCommand cmd = new SqlCommand($\"SELECT * FROM employees WHERE emp_name = '{empName}'\", conn);\n        conn.Open();\n        SqlDataReader reader = cmd.ExecuteReader();\n        if (reader.Read())\n        {\n            employee = new Employee\n            {\n                EmpId = Convert.ToInt32(reader[\"emp_id\"]),\n                EmpName = reader[\"emp_name\"].ToString(),\n                EmpSalary = Convert.ToDecimal(reader[\"emp_salary\"])\n            };\n        }\n    }\n    return employee;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# function that accepts an Actian OpenROAD 4GL resultset (as a string), parses it into a 2D array, and returns the number of rows and columns in the resultset.",
        "input": "```\nRESULTSET rs;\nDECLARE i INTEGER DEFAULT 1;\nDECLARE j INTEGER DEFAULT 1;\nOPEN rs FOR SQL 'SELECT * FROM Books';\nDO WHILE NOT EOF(rs);\n    IF i > 1 THEN WRITE SKIP1; END IF;\n    PRINT rs.fieldname[i].value AS book_id, rs.fieldname[j].value AS book_title;\n    i = i + 1; j = (mod(i,4) + 1);\n    IF EOF(rs) THEN EXIT; END IF;\nEND DO;\nCLOSE rs;\n```",
        "output": "To write a C# function that accepts an Actian OpenROAD 4GL resultset (as a string), parses it into a 2D array, and returns the number of rows and columns in the resultset, follow this approach:\n\nFirst, define helper methods to split the input string by newline and delimited fields:\n```csharp\nstring[] lines = input.Split('\\n');\nstring[] headers = lines[0].Split(' ');\nint columnCount = headers.Length;\nList<string[]> rows = new List<string[]>();\n```\nThen, iterate through the rest of the lines and process each row:\n```csharp\nfor (int i = 1; i < lines.Length - 1; i++)\n{\n    string[] rowData = lines[i].Split(' ');\n    rows.Add(rowData);\n}\n```\nFinally, create a 2D array and return the number of rows and columns:\n```csharp\nstring[,,] resultSetArray = new string[rows.Count, columnCount, rowData.Length];\nfor (int i = 0; i < rows.Count; i++)\n{\n    Array.Copy(rows[i], resultSetArray[i], rowData.Length);\n}\nreturn new Tuple<int, int>(resultSetArray.GetLength(0), resultSetArray.GetLength(1));\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Convert the Actian OpenROAD code that retrieves all rows from the `product_info` table into C# code using ADO.NET to achieve the same functionality.",
        "input": "SELECT * FROM product_info;",
        "output": "```csharp\nusing System.Data.SqlClient;\n// ...\nstring connectionString = \"YourConnectionString\";\nSqlConnection connection = new SqlConnection(connectionString);\nstring commandText = @\"SELECT * FROM product_info\";\nSqlCommand command = new SqlCommand(commandText, connection);\nSqlDataReader reader;\ntry\n{\n    connection.Open();\n    reader = command.ExecuteReader();\n    while (reader.Read())\n    {\n        Console.WriteLine($\"ID: {reader.GetInt32(0)}, Name: {reader.GetString(1)}, Price: {reader.GetDecimal(2)}\");\n    }\n}\nfinally\n{\n    if (connection != null)\n        connection.Close();\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Implement a C# function to calculate the total cost of items in a shopping cart from Actian OpenROAD, given their names and quantities. Use an existing function `GetItemCost(string itemName)` that returns the cost of an item with a given name as a decimal value (e.g., 10.5).",
        "input": "Dictionary<string, int> itemsAndQuantities = new Dictionary<string, int>() { { \"Bread\", 4 }, { \"Milk\", 2 } };",
        "output": "```csharp\ndecimal totalCost;\ntotalCost = itemsAndQuantities.Sum(item => item.Value * GetItemCost(item.Key));\nConsole.WriteLine($\"Total cost: {totalCost}\");\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Describe the process of defining a custom function in Actian OpenROAD 4GL and C#, providing examples for both languages. Use simple functions that accept a single argument.",
        "input": "Create a custom function that calculates the factorial of a given number using Actian OpenROAD 4GL and C#.",
        "output": "In Actian OpenROAD 4GL, you can create a custom user-defined function (UDF) as follows:\n```\nDEFINE FUNCTION fact_4gl(n INTEGER) RETURNS INTEGER NO SQL\nBEGIN\n    IF n <= 1 THEN\n        RETURN 1;\n    ELSE\n        RETURN n * fact_4gl(n - 1);\n    END IF;\nEND DEFINE;\n```\nIn C#, a custom function can be defined using the following example:\n```csharp\npublic int Fact(int num)\n{\n    if (num <= 1)\n        return 1;\n    else\n        return num * Fact(num - 1);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Explain the concept of error handling in Actian OpenROAD 4GL and C#, providing examples for both languages to demonstrate try-catch blocks and exception types. Focus on handling exceptions that occur during database operations.",
        "input": "Handle SQL exceptions when reading data from a table named \"users\" in Actian OpenROAD 4GL and C# using the `SqlException` class. Assume the table is empty, and an error occurs when trying to read it.",
        "output": "In Actian OpenROAD 4GL, you can handle SQL exceptions using a `TRY-CATCH` block as follows:\n```\nDECLARE EXCEPTION sqlError;\nBEGIN TRY\n    DECLARE cursor c1;\n    SELECT * FROM users INTO c1;\nEND TRY BEGIN CATCH sqlError WHEN SQLSTATE = '45000' THEN\n        WRITE \"The users table is empty.\";\nEND CATCH;\n```\nIn C#, you can handle SQL exceptions using the `try-catch` block and the `SqlException` class:\n```csharp\nusing System.Data;\nusing System.Data.SqlClient;\npublic void ReadUsers(string connectionString)\n{\n    try\n    {\n        using (var connection = new SqlConnection(connectionString))\n        {\n            var command = new SqlCommand(\"SELECT * FROM users\", connection);\n            connection.Open();\n            var reader = command.ExecuteReader();\n            // Your code to process the data...\n        }\n    }\n    catch (SqlException ex)\n    {\n        Console.WriteLine(\"An error occurred: \" + ex.Message);\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Convert an Actian OpenROAD 4GL loop that iterates through a collection and performs an operation on each item into C# code. The Actian code uses the `FOR EACH` loop structure, and the operation involves reading the item and updating a variable based on its value.",
        "input": "```\nREAD items;\nFOR EACH item IN items:\n    READ itemValue;\n    IF itemValue > 50 THEN\n        total += itemValue;\n    END IF;\nEND FOR;\nDISPLAY total;\n```",
        "output": "Here's the equivalent C# code for iterating through a collection and updating a variable based on each item's value:\n```\nList<int> items = new List<int> { 15, 30, 20, 45, 60 };\nint total = 0;\nforeach (var item in items)\n{\n    if (item > 50)\n        total += item;\n}\nConsole.WriteLine(total);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write C# code to implement a simple sorting algorithm for an array of integers. The Actian OpenROAD 4GL code uses the `SORT` function for sorting arrays. Choose the Bubble Sort algorithm for this task and provide explanations for the code written.",
        "input": "",
        "output": "Bubble Sort is a simple sorting algorithm that repeatedly swaps adjacent elements if they are in the wrong order. Here's a C# implementation of the bubble sort algorithm:\n```\nvoid BubbleSort(int[] arr)\n{\n    int n = arr.Length;\n    for (int i = 0; i < n - 1; ++i) // outer loop runs through all elements except the last one\n        for (int j = 0; j < n - i - 1; ++j) // inner loop compares adjacent elements and swaps them if necessary\n            if (arr[j] > arr[j + 1])\n                Swap(ref arr[j], ref arr[j + 1]);\n}\nvoid Swap(ref int a, ref int b)\n{\n    int temp = a;\n    a = b;\n    b = temp;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Translate the following Actian OpenROAD 4GL code to C#: SELECT DISTINCT column_name FROM table_name WHERE some_column = value;",
        "input": "SELECT DISTINCT customer_name FROM customers WHERE customer_id = 'C100';",
        "output": "Here's the equivalent C# code:\n```csharp\nusing System.Data;\nusing System.Data.SqlClient;\n\nstring connectionString = \"<yourConnectionString>\";\n\nstring query = \"SELECT DISTINCT customer_name FROM customers WHERE customer_id = 'C100'\";\n\nList<string> distinctCustomers = new List<string>();\n\n// Create the SQLCommand object and set its properties.\nSqlConnection connection = new SqlConnection(connectionString);\nSqlCommand command = new SqlCommand(query, connection);\n\n// Open the connection, execute the query, and process results.\nconnection.Open();\nusing (var reader = command.ExecuteReader())\n{\n    while (reader.Read())\n    {\n        distinctCustomers.Add(reader[\"customer_name\"].ToString());\n    }\n}\n\n// Print the list of distinct customers.\nforeach (string customer in distinctCustomers)\n{\n    Console.WriteLine(customer);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Translate the following Actian OpenROAD 4GL code to C#: SELECT COUNT(*) FROM table_name;",
        "input": "",
        "output": "Here's the equivalent C# code:\n```csharp\nusing System.Data;\nusing System.Data.SqlClient;\n\nstring connectionString = \"<yourConnectionString>\";\n\nstring query = \"SELECT COUNT(*) FROM customers\"; // Change this to your desired table name\n\nint count = 0;\n\n// Create the SQLCommand object and set its properties.\nSqlConnection connection = new SqlConnection(connectionString);\nSqlCommand command = new SqlCommand(query, connection);\n\n// Open the connection, execute the query, and process results.\nconnection.Open();\nusing (var reader = command.ExecuteReader())\n{\n    if (reader.Read())\n    {\n        count = int.Parse(reader[0].ToString()); // The first column in the result always contains the count.\n    }\n}\n\nConsole.WriteLine(\"The number of records in the table is: \" + count);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "What is the purpose of a constructor in C#, and provide an example of creating a class with a custom constructor?",
        "input": "",
        "output": "A constructor in C# is a special method used to create objects by initializing their state. It's called automatically when a new object of the class is created. Here is an example of creating a class named `Person` with a custom constructor:\n\n```csharp\npublic class Person\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n\n    // Custom constructor\n    public Person(string firstName, string lastName)\n    {\n        this.FirstName = firstName;\n        this.LastName = lastName;\n    }\n}\n```\nIn the example above, we created a class `Person` with two properties: `FirstName` and `LastName`. We also defined a custom constructor that takes in two parameters, initializing the values of these properties upon object creation.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# method to calculate the Fibonacci sequence up to an input number `n`. Use recursion for implementing this method and respond with C# code.",
        "input": "int n = 10;",
        "output": "```csharp\npublic static int CalculateFibonacci(int n)\n{\n    if (n <= 1) return n;\n\n    return CalculateFibonacci(n - 1) + CalculateFibonacci(n - 2);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Suppose we have a loop in Actian OpenROAD 4GL that iterates over an array and calculates the sum of elements. Convert this Actian OpenROAD 4GL code snippet into a C# method. Use this example as reference: LOOP THRU A. SET SUM TO SUM + A[I]. ENDLOOP.",
        "input": "int[] numbers = {1, 2, 3};\nint sum = 0;",
        "output": "```csharp\npublic int CalculateSum(int[] numbers)\n{\n    var sum = 0;\n    foreach (var number in numbers)\n    {\n        sum += number;\n    }\n\n    return sum;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Given a C# class with an overloaded operator, write equivalent Actian OpenROAD 4GL code to create the same functionality using user-defined functions. Use this example as reference: public static MyClass operator +(MyClass lhs, MyClass rhs) { ... }",
        "input": "```csharp\npublic class MyClass\n{\n    public int Value;\n\n    public static MyClass operator +(MyClass lhs, MyClass rhs)\n    {\n        var result = new MyClass();\n        result.Value = lhs.Value + rhs.Value;\n        return result;\n    }\n}\n```",
        "output": "```4gl\nDEFINE FUNCTION ADD_MY_CLASS(P1 MY_CLASS, P2 MY_CLASS) RETURNING MY_CLASS RESULT AS LHS.\n    DEFINE VARIABLE RESULT AS NEW MY_CLASS.\n\n    SET RESULT.VALUE = P1.VALUE + P2.VALUE.\n\n    RETURN RESULT.\nENDDEFINE.\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Create a C# method to calculate the average salary of employees in the 'employees' table, given the column names: 'emp_id', 'emp_name', and 'emp_salary'. The method should return a decimal representing the average salary.",
        "input": "Assume that you already have a `connectionString` variable containing the database connection string.",
        "output": "Here's a C# method to calculate the average salary of employees in the 'employees' table:\n```\npublic static decimal CalculateAverageSalary(string connectionString)\n{\n    using (SqlConnection conn = new SqlConnection(connectionString))\n    {\n        string query = \"SELECT AVG(emp_salary) FROM employees\";\n        SqlCommand cmd = new SqlCommand(query, conn);\n        conn.Open();\n        decimal averageSalary = Convert.ToDecimal(cmd.ExecuteScalar());\n        return averageSalary;\n    }\n}\n```\nYou can call this method and pass the connection string to get the average salary for all employees in the database table 'employees'.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Convert an Actian OpenROAD 4GL looping construct to equivalent C# code. Suppose we have a loop that iterates through each row of a cursor and performs some operation on the columns \"column1\", \"column2\", and \"column3\".",
        "input": "Suppose we are working with a cursor named cursorName and the following code is in Actian OpenROAD 4GL:\n```sql\nOPEN cursorName FOR select column1, column2, column3 from employees;\nREAD NEXT IN cursorName;\nWHILE NOT EOF IN cursorName DO\n  -- Perform some operation with the fetched data\n  PERFORM SOME_OPERATION(cursorName.column1, cursorName.column2, cursorName.column3);\n  READ NEXT IN cursorName;\nEND WHILE;\nCLOSE cursorName;\n```",
        "output": "<|assistant|>\nThe equivalent C# code for the given Actian OpenROAD 4GL looping construct is as follows:\n\n```csharp\nusing System.Data;\nusing System.Data.Odbc;\n// ... Replace this with appropriate connection string for your database\nstring connStr = \"Your Connection String\";\nODBCConnection conn = new ODBCConnection(connStr);\nODBCCommand cmd = new ODBCCommand(\"SELECT column1, column2, column3 FROM employees\", conn);\nconn.Open();\nODBCDataReader reader = cmd.ExecuteReader();\nwhile (reader.Read())\n{\n    SOME_OPERATION(reader[\"column1\"], reader[\"column2\"], reader[\"column3\"]);\n}\nreader.Close();\nconn.Close();\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Convert a simple Actian OpenROAD 4GL conditional statement to C# code. Suppose we want to compare two variables \"variable1\" and \"variable2\" in Actian OpenROAD 4GL and display a message accordingly.",
        "input": "Assume variable1 and variable2 contain integer values. In Actian OpenROAD 4GL:\n```sql\nIF variable1 > variable2 THEN\n  DISPLAY 'Variable 1 is greater';\nELSE\n  DISPLAY 'Variable 2 is greater';\nEND IF;\n```",
        "output": "<|assistant|>\nThe equivalent C# code for the given Actian OpenROAD 4GL conditional statement is as follows:\n```csharp\nif (variable1 > variable2)\n{\n    Console.WriteLine(\"Variable 1 is greater\");\n}\nelse\n{\n    Console.WriteLine(\"Variable 2 is greater\");\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Convert this Actian OpenROAD 4GL code to C#: READ a single record from the EMPLOYEES table, sort it in ascending order by employee's salary and display all records.",
        "input": "```\nREAD FIRST a RECORD FROM EMPLOYEES ORDER BY SALARY ASC;\nDISPLAY EMPLOYEES.EMP_ID, EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME, EMPLOYEES.SALARY;\n```",
        "output": "Here's the equivalent C# code using LINQ:\n```csharp\nusing System;\nusing System.Linq;\nusing MySql.Data.MySqlClient;\n// Assuming you have a connection to your database\n\nvar employees = new MySqlCommand(\"SELECT EMP_ID, FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEES ORDER BY SALARY ASC\", connection);\nusing (var reader = employees.ExecuteReader())\n{\n    while (reader.Read())\n    {\n        int empId = reader.GetInt32(0);\n        string firstName = reader.GetString(1);\n        string lastName = reader.GetString(2);\n        decimal salary = reader.GetDecimal(3);\n\n        Console.WriteLine($\"{empId} - {firstName} {lastName} - {salary}\");\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write C# code that performs a loop to calculate the factorial of a number using recursion. The user should input the value of n (1 to 20).",
        "input": "```\nusing System;\n\nnamespace FactorialCalculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.Write(\"Enter a number between 1 and 20: \");\n            int n = Convert.ToInt32(Console.ReadLine());\n            Console.WriteLine($\"The factorial of {n} is {Factorial(n)}\");\n        }\n\n        static long Factorial(int n)\n        {\n            // Your implementation here\n        }\n    }\n}\n```",
        "output": "To perform a loop and calculate the factorial of a number using recursion in C#, you can use the following code:\n```csharp\nstatic long Factorial(int n)\n{\n    if (n <= 1) return 1;\n\n    return n * Factorial(n - 1);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Assuming you have a `Departments` table and a `Employees` table in a SQL database, where the Employees table has a foreign key relationship with the Departments table. The Employee table has columns: emp_id (Primary Key), emp_name, emp_salary, and dep_id (Foreign Key). Write a C# method that updates the department of an employee with the specified ID using SQL parameters.",
        "input": "The employee with id 12345 belongs to the Marketing department. The connection string for the database is: \"Server=servername;Database=databaseName;User Id=username;Password=password;\"",
        "output": "Here's a C# method that updates an employee's department using SQL parameters:\n```\nusing System.Data;\npublic void UpdateEmployeeDepartment(int empId, int newDeptId)\n{\n    string query = \"UPDATE employees SET dep_id = @newDeptId WHERE emp_id = @empId\";\n    using (SqlConnection conn = new SqlConnection(connectionString))\n    {\n        SqlCommand cmd = new SqlCommand(query, conn);\n        cmd.Parameters.AddWithValue(\"@empId\", empId);\n        cmd.Parameters.AddWithValue(\"@newDeptId\", newDeptId);\n        conn.Open();\n        cmd.ExecuteNonQuery();\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# method that takes a connection string and an employee object, inserts the employee into the `Employees` table, and returns the ID of the inserted row. The Employee object has properties `EmpName`, `Salary`, and `DeptID`.",
        "input": "The employee to be inserted is named \"John Doe\", has a salary of 70000, and belongs to the IT department (DeptID=1). The connection string for the database is: \"Server=servername;Database=databaseName;User Id=username;Password=password;\"",
        "output": "Here's a C# method that takes a connection string and an employee object, inserts the employee into the `Employees` table, and returns the ID of the inserted row:\n```\nusing System.Data;\npublic int InsertEmployee(Employee emp, string connectionString)\n{\n    using (SqlConnection conn = new SqlConnection(connectionString))\n    {\n        conn.Open();\n        string query = \"INSERT INTO employees (emp_name, emp_salary, dep_id) VALUES (@empName, @empSalary, @depId); SELECT SCOPE_IDENTITY()\";\n        using (SqlCommand cmd = new SqlCommand(query, conn))\n        {\n            cmd.Parameters.AddWithValue(\"@empName\", emp.EmpName);\n            cmd.Parameters.AddWithValue(\"@empSalary\", emp.Salary);\n            cmd.Parameters.AddWithValue(\"@depId\", emp.DeptID);\n            return Convert.ToInt32(cmd.ExecuteScalar());\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# function that accepts an array of integers and finds the sum of all even numbers in the array. Assume the input is not null or empty.",
        "input": "Consider the following integer array: [1, 2, 3, 4, 5, 6, 7].",
        "output": "```csharp\npublic static int SumOfEvenNumbers(int[] numbers)\n{\n    int sum = 0;\n    foreach (var number in numbers)\n    {\n        if (number % 2 == 0)\n        {\n            sum += number;\n        }\n    }\n    return sum;\n}\n```\nYou can call the function with the input array to get the sum of even numbers:\n```csharp\nint[] inputNumbers = new int[] { 1, 2, 3, 4, 5, 6, 7 };\nConsole.WriteLine(SumOfEvenNumbers(inputNumbers)); // Output: 12\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write a simple Actian OpenROAD 4GL script that reads a line from the STDIN (standard input), performs case conversion, and displays the result. For example, if the user enters \"Hello\", the script should display \"HELLO\".",
        "input": "",
        "output": "Assuming STDIN contains input data:\n```\nDEFINE VARIABLE line AS CHAR(1024);\nREAD line FROM STDIN;\nWRITE TO STDOUT UPPER(line);\n```\nYou can test the script by running it and entering a string, such as \"hello\" on the command line:\n```bash\n$ actian4gl <filename>.4gl <<< \"hello\"\nHELLO\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Convert this Actian OpenROAD 4GL code to C#: Write a simple script to read data from two different tables, combine them using a JOIN, and display all records.",
        "input": "```\nJOIN ORDER BY EMPLOYEES.EMP_ID, DEPARTMENTS.DEPT_ID;\nDISPLAY EMPLOYEES.EMP_ID, EMPLOYEES.FIRST_NAME, EMPLOYEES.LAST_NAME, DEPARTMENTS.DEPT_NAME;\n```",
        "output": "Here's the equivalent C# code using LINQ:\n```csharp\nusing System;\nusing System.Linq;\nusing MySql.Data.MySqlClient;\n// Assuming you have a connection to your database\n\nvar employees = new MySqlCommand(\"SELECT EMPLOYEES.*\", connection);\nvar departments = new MySqlCommand(\"SELECT DEPARTMENTS.*\", connection);\n\nusing (var readerEmployee = employees.ExecuteReader())\n{\n    var employeeRecords = employeeRecords = readerEmployee.Cast<MySqlDataRecord>().ToList();\n\n    using (var readerDepartment = departments.ExecuteReader())\n    {\n        var departmentRecords = departmentRecords = readerDepartment.Cast<MySqlDataRecord>().ToList();\n\n        // Perform a join on EMP_ID and DEPT_ID\n        var combinedRecords = from er in employeeRecords\n            join dr in departmentRecords on er.GetInt32(0) equals dr.GetInt32(14) // Assuming both tables have EMP_ID in the first column and DEPT_ID in the 15th column\n            select new { EmployeeId = er.GetInt32(0), FirstName = er.GetString(1), LastName = er.GetString(2), DepartmentName = dr.GetString(0) };\n\n        foreach (var record in combinedRecords)\n        {\n            Console.WriteLine($\"{record.EmployeeId} - {record.FirstName} {record.LastName} - {record.DepartmentName}\");\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Provide examples of common Actian OpenROAD 4GL control structures that have corresponding equivalents in C#. Explain the differences in syntax between the two languages.",
        "input": "",
        "output": "Actian OpenROAD 4GL has several control structures that have corresponding equivalents in C#, including loops and conditional statements. Here are a few examples:\n- Loops (FOR): The `FOR` loop in Actian OpenROAD 4GL is similar to the `for` loop in C#. However, in Actian OpenROAD 4GL, you typically need to initialize your counter variable outside of the loop and use the `END FOR` statement at the end. Here's an example:\n```\nFOR i = 1 TO 5\n   // Your code here\nEND FOR\n```\nThe equivalent C# code would look like this:\n```csharp\nfor (int i = 1; i <= 5; i++)\n{\n   // Your code here\n}\n```\n- Conditional statements (IF/ELSE): Both Actian OpenROAD 4GL and C# use the IF/ELSE construct to make decisions based on certain conditions. In Actian OpenROAD 4GL, you use `IF ... THEN ... ELSE`. In C#, you use `if` and `else`. Here's an example:\n```\nIF condition_1 THEN\n   // Code for when condition_1 is true\nELSE IF condition_2 THEN\n   // Code for when both condition_1 and condition_2 are false, but condition_2 is true\nELSE\n   // Code for when neither condition_1 nor condition_2 is true\nEND IF;\n```\nThe equivalent C# code would look like this:\n```csharp\nif (condition_1)\n{\n    // Code for when condition_1 is true\n}\nelse if (condition_2)\n{\n    // Code for when both condition_1 and condition_2 are false, but condition_2 is true\n}\nelse\n{\n    // Code for when neither condition_1 nor condition_2 is true\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to convert Actian OpenROAD 4GL cursor-based code that performs multiple UPDATE and DELETE operations into C#, providing sample Actian OpenROAD 4GL code and expected equivalent C# code.",
        "input": "```\nDECLARE cur_update CURSOR FOR SELECT employee_id FROM employees WHERE department = 'HR';\n\nOPEN cur_update;\n\nWHILE CURSOR FETCH NEXT ROW FROM cur_update DO\n    UPDATE employees SET salary = 5000 WHERE employee_id = CURRENT_ROW.employee_id AND department = 'HR' AND gender = 'F';\n    DELETE departments WHERE department_id = (SELECT department_id FROM departments WHERE department = 'HR' AND manager_id = CURRENT_ROW.employee_id);\nEND WHILE;\n\nCLOSE cur_update;\n```",
        "output": "In this example, the Actian OpenROAD 4GL cursor-based code updates employees' salaries to 5000 in the HR department and deletes departments where the manager_id matches the employee_id of the current row. To implement this functionality in C#, you can use ADO.NET objects (SqlConnection, SqlCommand, and SqlDataReader) to execute SQL queries instead of cursors:\n```csharp\nstring connectionString = @\"Your Database Connection String\"; // Replace with your connection string.\nusing (SqlConnection conn = new SqlConnection(connectionString))\n{\n    conn.Open();\n    string query1 = \"UPDATE employees SET salary = 5000 WHERE employee_id IN (SELECT employee_id FROM employees WHERE department = 'HR') AND gender = 'F'\";\n    using (SqlCommand cmd1 = new SqlCommand(query1, conn))\n    {\n        cmd1.ExecuteNonQuery();\n    }\n    string query2 = \"DELETE FROM departments WHERE manager_id IN (SELECT employee_id FROM employees WHERE department = 'HR')\";\n    using (SqlCommand cmd2 = new SqlCommand(query2, conn))\n    {\n        cmd2.ExecuteNonQuery();\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Develop a C# method that accepts an Actian OpenROAD 4GL-style array of records with columns \"employee_id\", \"name\", and \"salary\" as its parameters and returns the total salary of employees within a specific department.",
        "input": "```\nDECLARE employee_array ARRAY OF RECORD WITH (employee_id INTEGER, name STRING, salary FLOAT);\nSET employee_array = SELECT employee_id, name, salary FROM employees WHERE department = 'IT';\n```",
        "output": "Here's a C# method that accepts the Actian OpenROAD 4GL-style array of records and calculates the total salary for employees in the given department:\n```csharp\npublic static decimal CalculateTotalSalary(RecordSet employeeArray, string department)\n{\n    int rowCount = employeeArray.RecordCount;\n    decimal total = 0m;\n\n    for (int i = 1; i <= rowCount; ++i)\n    {\n        Record currentRow = employeeArray[i];\n\n        if ((string)currentRow[\"department\"] == department)\n        {\n            total += Convert.ToDecimal((string)currentRow[\"salary\"], System.Globalization.CultureInfo.InvariantCulture);\n        }\n    }\n\n    return total;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Describe the concept of recursion and its significance in Actian OpenROAD 4GL and C#, providing examples for both languages demonstrating the factorial function implementation using a recursive approach.",
        "input": "Compute the factorial of a number n where n is input as an integer variable \"input\" in both Actian OpenROAD 4GL and C# using recursion. Assume n is less than 10.",
        "output": "In Actian OpenROAD 4GL, you can define a recursive function for computing the factorial of a number as follows:\n```4gl\nDEFINE FUNCTION FACTORIAL(P1 INTEGER) RETURNING INTEGER RESULT AS FACT.\n    IF P1 = 0 THEN SET RESULT = 1; ELSE SET RESULT = P1 * FACTORIAL(P1-1).\nENDDEFINE.\n```\nIn C#, you can implement the factorial function using recursion:\n```csharp\npublic static int Factorial(int n)\n{\n    if (n <= 0) return 1;\n    else return n * Factorial(n - 1);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Provide a general guide for converting exception handling Actian OpenROAD code into equivalent C# code with try-catch blocks.",
        "input": "",
        "output": "Here is a guide to convert Actian OpenROAD exception handling code into C#:\n1. Identify the types of exceptions being handled in Actian OpenROAD.\n2. In C#, declare appropriate exception variables for each type at the beginning of the method or block you want to handle the exceptions. For example:\n```csharp\nSqlException sqlEx;\nOutOfMemoryException outOfMem;\n```\n3. Wrap the code that could potentially throw exceptions within a `try` block.\n4. Add specific `catch` blocks for each exception type declared, and perform appropriate actions when an exception occurs. For example:\n```csharp\ntry\n{\n    // Your code here\n}\ncatch (SqlException ex)\n{\n    Console.WriteLine(ex.Message);\n}\ncatch (OutOfMemoryException ex)\n{\n    Console.WriteLine(ex.Message);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Provide an example of how to convert Actian OpenROAD code that implements a stored procedure into C# method with similar functionality using ADO.NET.",
        "input": "CREATE PROCEDURE sp_getProductsByCategory (in p_category_id INT)\nBEGIN\n    SELECT * FROM product_info WHERE category_id = p_category_id;\nEND;",
        "output": "```csharp\nusing System.Data.SqlClient;\n// ...\npublic void GetProductsByCategory(int categoryId)\n{\n    string connectionString = \"YourConnectionString\";\n    SqlConnection connection = new SqlConnection(connectionString);\n    string commandText = @\"EXEC sp_getProductsByCategory @p_category_id\";\n    SqlCommand command = new SqlCommand(commandText, connection);\n    command.Parameters.AddWithValue(\"@p_category_id\", categoryId);\n\n    try\n    {\n        connection.Open();\n        SqlDataReader reader = command.ExecuteReader();\n        while (reader.Read())\n        {\n            Console.WriteLine($\"ID: {reader.GetInt32(0)}, Name: {reader.GetString(1)}, Price: {reader.GetDecimal(2)}\");\n        }\n    }\n    finally\n    {\n        if (connection != null)\n            connection.Close();\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "What are some best practices for optimizing performance while converting Actian OpenROAD 4GL code to C#? Provide some practical examples.",
        "input": "Here is a simple example of an OpenROAD 4GL code that retrieves data from a table:\n```\nSELECT FROM emp_table WHERE department = 'IT' AND salary > 5000;\n```",
        "output": "To optimize the given code while converting it to C#, follow these best practices for performance optimization:\n1. Use parametrized queries to prevent SQL injection attacks and improve query execution speed. Here\u2019s an example of using parametrized queries in C#:\n```\nstring connectionString = \"Data Source=your_server;Initial Catalog=your_database;User ID=your_username;Password=your_password;\";\nSqlConnection connection = new SqlConnection(connectionString);\nstring query = @\"SELECT FROM emp_table WHERE department = @department AND salary > @salary\";\nSqlCommand command = new SqlCommand(query, connection);\ncommand.Parameters.AddWithValue(\"@department\", \"IT\");\ncommand.Parameters.AddWithValue(\"@salary\", 5000);\nconnection.Open();\nSqlDataReader reader = command.ExecuteReader();\n```\n2. Use stored procedures to encapsulate complex queries and improve execution speed, especially when working with larger datasets. Here\u2019s an example of using a stored procedure in C#:\n```\nstring connectionString = \"Data Source=your_server;Initial Catalog=your_database;User ID=your_username;Password=your_password;\";\nSqlConnection connection = new SqlConnection(connectionString);\nstring procName = \"GetEmployeesByDepartmentAndSalary\";\nSqlCommand command = new SqlCommand(procName, connection);\ncommand.CommandType = CommandType.StoredProcedure;\ncommand.Parameters.AddWithValue(\"@department\", \"IT\");\ncommand.Parameters.AddWithValue(\"@salary\", 5000);\nconnection.Open();\nSqlDataReader reader = command.ExecuteReader();\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Identify potential issues or differences in handling errors and exceptions when converting Actian OpenROAD 4GL code to C#. Provide examples of how these differences can be addressed in the converted C# code.",
        "input": "Here's an example of error handling in OpenROAD 4GL:\n```\nON ERROR GOTO error_handler;\n...\nerror_handler:\n    MESSAGE \"Error occurred during processing.\";\n```",
        "output": "When converting the given error handling code from Actian OpenROAD 4GL to C#, you'll need to address these differences:\n1. Instead of `ON ERROR GOTO`, use a try-catch block to handle exceptions in C#.\n2. Use specific exception types when catching exceptions in C# (e.g., `System.Data.SqlClient.SqlException`). Here\u2019s an example of error handling in C#:\n```\ntry\n{\n    // Your code here...\n}\ncatch (SqlException ex)\n{\n    Console.WriteLine(\"Error occurred during processing. Error details: \" + ex.Message);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Explain the concept of a constructor in C# and show its usage when converting an Actian OpenROAD 4GL record structure into a custom class. Provide an example for a \"Person\" class with properties for first name, last name, and age.",
        "input": "",
        "output": "In C#, a constructor is a special method that is used to initialize objects of a specific class when they are created. The constructor is called automatically when you use the `new` keyword to create an instance of a class. In your case, while converting Actian OpenROAD 4GL record structures into custom classes in C#, you can define a constructor to map and set properties accordingly.\n\nHere's an example \"Person\" class with a constructor that takes first name, last name, and age as arguments:\n```csharp\npublic class Person\n{\n    public string FirstName { get; private set; }\n    public string LastName { get; private set; }\n    public int Age { get; private set; }\n\n    public Person(string firstName, string lastName, int age)\n    {\n        this.FirstName = firstName;\n        this.LastName = lastName;\n        this.Age = age;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Offer a comparison between Actian OpenROAD 4GL and C# regarding error handling, focusing on exceptions and exception handling mechanisms for each language. Provide examples of code in both languages to demonstrate exception handling.",
        "input": "",
        "output": "In Actian OpenROAD 4GL, errors can be handled using the `ON ERROR` statement or by testing return codes from system functions. For example, consider a file read operation:\n```\nOPEN FILE my_file FOR INPUT;\nIF NOT EXISTS(my_file) THEN\n    WRITE 'Error: File not found';\n    STOP;\nEND IF;\n...\nCLOSE my_file;\n```\nIn C#, errors are typically handled using exceptions. Exceptions represent exceptional conditions during program execution and can be caught to handle errors gracefully. Here's an example of exception handling in a file read operation:\n```csharp\ntry\n{\n    using (FileStream fs = new FileStream(\"my_file\", FileMode.Open))\n    {\n        // Your code here...\n    }\n}\ncatch (Exception ex)\n{\n    Console.WriteLine(\"Error: \" + ex.Message);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Given an Actian OpenROAD 4GL function to calculate the average salary in the EMPLOYEE table with `SALARY` column, convert it into C# code. Provide an appropriate input for OpenROAD 4GL and C# code examples.",
        "input": "```\nDEFINE FUNCTION AVG_EMPLOYEE_SALARIES()\n    RETURNING DECIMAL(15,2);\nBEGIN\n    DECLARE sumSalary DECIMAL(15,2);\n    DECLARE countEmployee INTEGER;\n    SET sumSalary = 0;\n    SET countEmployee = 0;\n    SELECT COUNT(*) FROM EMPLOYEE INTO :countEmployee;\n    FOR EACH row IN (SELECT * FROM EMPLOYEE) DO\n        SET sumSalary = sumSalary + ROW.SALARY;\n        SET countEmployee = countEmployee + 1;\n    END FOR;\n    RETURN SUM(sumSalary)/countEmployee;\nEND DEFINE;\n```",
        "output": "Here's the equivalent C# code for calculating the average salary in the EMPLOYEE table:\n```csharp\nusing System.Linq;\npublic static decimal AverageSalary(List<Employee> employees)\n{\n    return (decimal)(employees.Sum(e => e.Salary) / employees.Count());\n}\n```\nIn the example, we have a `List<Employee>` containing the `SALARY` of each employee. The code calculates the average salary by summing all salaries and dividing by the total number of employees (`employees.Count()`) in the list.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Given an Actian OpenROAD 4GL function with multiple IF-THEN statements, identify the logic behind it and write its equivalent C# method using conditional structures (if, else if, else). Provide a sample input for testing.",
        "input": "```\nDEFINE FUNCTION ageGroup(i AGE INTEGER) AS BEGIN\n    IF i < 13 THEN\n        RETURN 'Child';\n    ELSEIF i BETWEEN 13 AND 17 THEN\n        RETURN 'Teenager';\n    ELSE\n        RETURN 'Adult';\n    END;\nEND DEFINE;\n```",
        "output": "Here is the equivalent C# method:\n```csharp\npublic string AgeGroup(int age)\n{\n    if (age < 13) return \"Child\";\n    else if (age >= 13 && age <= 17) return \"Teenager\";\n    return \"Adult\";\n}\n\n// Test the function\nConsole.WriteLine(AgeGroup(12)); // Child\nConsole.WriteLine(AgeGroup(18)); // Adult\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Given an Actian OpenROAD 4GL procedure that updates employee records, modify it to create a new employee record if one doesn't exist and update the existing one. Provide sample code for both scenarios (insert and update).",
        "input": "```\nDEFINE PROCEDURE updateEmployee(e EMPLOYEE_T) AS BEGIN\n    UPDATE employees SET emp_name = e.emp_name, emp_salary = e.emp_salary WHERE emp_id = e.emp_id;\nEND DEFINE;\n```",
        "output": "Here's the modified C# method that performs both insert and update operations:\n```csharp\npublic void UpdateEmployee(int id, string name, decimal salary)\n{\n    string connectionString = \"YourConnectionString\";\n    SqlConnection conn = new SqlConnection(connectionString);\n\n    SqlCommand cmd;\n    if (id == 0 || string.IsNullOrEmpty(name))\n    {\n        // Insert a new employee record\n        cmd = new SqlCommand(@\"INSERT INTO employees (emp_name, emp_salary) VALUES (@name, @salary)\", conn);\n    }\n    else\n    {\n        // Update an existing employee record\n        cmd = new SqlCommand($@\"UPDATE employees SET emp_name = @name, emp_salary = @salary WHERE emp_id = @id\", conn);\n    }\n\n    cmd.Parameters.AddWithValue(\"@id\", id ?? (object)DBNull.Value);\n    cmd.Parameters.AddWithValue(\"@name\", name);\n    cmd.Parameters.AddWithValue(\"@salary\", salary);\n\n    try\n    {\n        conn.Open();\n        cmd.ExecuteNonQuery();\n    }\n    finally\n    {\n        if (conn != null)\n            conn.Close();\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "How can you perform a simple delete operation on a single row in Actian OpenROAD 4GL using C# code? Provide a sample DELETE statement and its equivalent C# code.",
        "input": "",
        "output": "Here's a sample DELETE statement: DELETE FROM employees WHERE emp_id = 1234;\nAnd here's the equivalent C# code:\n```\nstring query = \"DELETE FROM employees WHERE emp_id = @empId\";\nusing (SqlConnection conn = new SqlConnection(connectionString))\n{\n    SqlCommand cmd = new SqlCommand(query, conn);\n    cmd.Parameters.AddWithValue(\"@empId\", 1234);\n    conn.Open();\n    cmd.ExecuteNonQuery();\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to handle errors in Actian OpenROAD 4GL when converting the code to C#, and provide examples of common error types.",
        "input": "Suppose you are working on a function that fetches data from an external API and it occasionally fails due to network issues or incorrect API key usage. How would you handle this in Actian OpenROAD 4GL and C#?",
        "output": "In both Actian OpenROAD 4GL and C#, error handling is essential when dealing with code that interacts with external systems like APIs. In the context of your function fetching data from an external API, you might encounter errors such as network issues, incorrect API key usage, or invalid responses. Here's how to handle these errors in both languages:\n\n** Actian OpenROAD 4GL\n1. Define error handling routines using the ON EXCEPTION block.\n2. In the ON EXCEPTION block, use the GET DIAGNOSTICS command to get detailed information about the exception and store it for further processing or logging.\n3. Perform appropriate actions based on the type of error, such as retrying the operation after a delay, logging the error, or providing user feedback.\n** C#\n1. Use try-catch blocks to handle exceptions in your code.\n2. Inside the catch block, perform error handling actions like retrying the operation, logging the error, or providing user feedback based on the type of exception thrown.\n3. To handle network issues, you can use the HttpClient class with a Timeout property for requests and retry logic if needed. For incorrect API key usage, consider using a configuration file to store the API keys and validate them at runtime.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Provide an example of how to convert Actian OpenROAD 4GL database operations (SQL statements) into their corresponding C# equivalents.",
        "input": "Assuming you have the following SQL query in Actian OpenROAD 4GL for inserting a new record into a table called 'Employees':\n```\nINSERT INTO Employees(Name, Age, Department) VALUES('John Doe', 35, 'IT');\n```",
        "output": "To perform the equivalent operation in C#, you would use an Object Relational Mapper (ORM) like Entity Framework Core. Here's an example:\n\nFirst, create a model class for the Employees table:\n```\npublic class Employee\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public int Age { get; set; }\n    public string Department { get; set; }\n}\n```\nNext, configure the Entity Framework Core context:\n```\npublic class AppDbContext : DbContext\n{\n    public DbSet<Employee> Employees { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder options) =>\n        options.UseSqlServer(@\"Data Source=(localdb)\\mssqllocaldb;Database=myDatabase;Integrated Security=True\");\n}\n```\nThen, use the Entity Framework Core context to insert a new employee:\n```csharp\nusing (var context = new AppDbContext())\n{\n    var newEmployee = new Employee { Name = \"John Doe\", Age = 35, Department = \"IT\" };\n    context.Employees.Add(newEmployee);\n    context.SaveChanges();\n}\n```\nThis code creates a new instance of the `Employee` class, sets its properties to the desired values, adds it to the `Employees` DbSet, and saves the changes to the database.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write C# code that generates a random password based on user input for length and complexity level (simple or strong). The simple password contains lowercase letters, uppercase letters, numbers, and special characters without any repeating character. The strong password includes all of the above as well as repeated characters and different types of symbols.",
        "input": "int minLength = 8;\nstring complexityLevel = \"strong\";",
        "output": "Here's a sample C# code that generates a password based on the given parameters:\n```\npublic static string GeneratePassword(int minLength, string complexityLevel)\n{\n    Random rand = new Random();\n    char[] allowedSimpleChars = { 'a', 'b', 'c', ..., 'z', 'A', 'B', 'C', ..., '9', '0', '@', '#', '$' };\n    char[] allowedStrongChars = { 'a', 'b', 'c', ..., 'z', 'A', 'B', 'C', ..., '9', '0', '@', '#', '$', '%', '&', '*', '+', '-', '_', '~' };\n\n    StringBuilder password = new StringBuilder();\n\n    if (complexityLevel.ToLower() == \"simple\")\n    {\n        for (int i = 0; i < minLength; i++)\n        {\n            char c = allowedSimpleChars[rand.Next(allowedSimpleChars.Length)];\n            password.Append(c);\n\n            if (password.ToString().Contains(c.ToString()))\n            {\n                i--; // to avoid duplicate character in the simple password\n            }\n        }\n    }\n    else if (complexityLevel.ToLower() == \"strong\")\n    {\n        for (int i = 0; i < minLength; i++)\n        {\n            char c = allowedStrongChars[rand.Next(allowedStrongChars.Length)];\n            password.Append(c);\n        }\n    }\n\n    return password.ToString();\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# function that takes in two parameters - a string and an int - and returns the number of vowels in the string, disregarding case.",
        "input": "string inputString = \"aBcDeFgHiJkLmNoPqRsTuVwXyZ\";\nint count = 5; // for testing purposes",
        "output": "```\npublic static int CountVowels(string text)\n{\n    string vowels = \"aeiouAEIOU\";\n    int count = 0;\n\n    foreach (char c in text)\n    {\n        if (vowels.Contains(c))\n        {\n            count++;\n        }\n    }\n\n    return count;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Compare the similarities and differences between Actian OpenROAD 4GL's data types (such as CHAR, INTEGER, REAL, etc.) and C#'s basic data types like int, char, string, decimal, etc., with examples in both languages.",
        "input": "",
        "output": "Actian OpenROAD 4GL has a set of predefined data types including CHAR, INTEGER, REAL, DATE, TIMESTAMP, and more, while C# includes int (integer), char (single character), string (text), decimal (decimal numbers), etc. In both languages, some data types represent similar types, such as integer-like data types:\n```\nActian OpenROAD 4GL: INTEGER\nC#: int\n```\nHowever, C# supports more sophisticated data types like DateTime for dates and time, while Actian OpenROAD has separate DATE and TIMESTAMP data types. Some examples:\n```\nActian OpenROAD 4GL: DATE\nC#: DateTime\n\nActian OpenROAD 4GL: TIMESTAMP\nC#: DateTime (with specific TimeSpan value)\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "In Actian OpenROAD 4GL, it's possible to handle exceptions using the ON-ERROR block. In C#, how would you catch exceptions with a specific error message?",
        "input": "",
        "output": "In C#, you can use a try-catch block to handle exceptions. To catch exceptions with a specific error message, use a catch block and specify the exception type:\n```\ntry\n{\n    // your code that may throw an exception\n}\ncatch (Exception ex)\n{\n    Console.WriteLine(\"Error message: \" + ex.Message);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "When working with collections in Actian OpenROAD 4GL, it's common to use the FOR-EACH loop to iterate through elements. How can you iterate over arrays in C# and print out each element?",
        "input": "",
        "output": "In C#, you can use a for loop or the foreach loop to iterate over arrays:\n\nWith a for loop:\n```\nint[] numbers = { 1, 2, 3, 4, 5 };\nfor (int i = 0; i < numbers.Length; i++)\n{\n    Console.WriteLine(numbers[i]);\n}\n```\nWith a foreach loop:\n```\nint[] numbers = { 1, 2, 3, 4, 5 };\nforeach (int number in numbers)\n{\n    Console.WriteLine(number);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "In Actian OpenROAD 4GL, you can create a function that accepts arguments. Transform the following 4GL code into a C# method with an equivalent functionality:\n```4gl\nDEFINE FUNCTION myFunction(a AS INTEGER, b AS DECIMAL) RETURNING INTEGER NO-CACHE.\n   LET result = a * b;\n   RETURN result;\nEND DEFINE FUNCTION.\n```",
        "input": "",
        "output": "In C#:\n```csharp\npublic static int MyFunction(int a, decimal b)\n{\n    return a * (int)b;\n}\n```\nYou can call the method with example values, e.g., `MyFunction(2, 3m);` which returns `6`.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# function that accepts an SQL query as input and outputs the result in a form that can be easily processed or visualized.",
        "input": "",
        "output": "You could create a reusable C# function that accepts an SQL query as input, executes it using ADO.NET Data Provider for SQL Server, returns the data as a DataTable, and optionally applies some transformation (like filtering or sorting) based on user requirements:\n```csharp\nDataTable ExecuteQueryAndGetDataTable(string connString, string sql, Func<DataRow, bool> filter = null, Func<DataRow, object[]> transform = null)\n{\n    DataTable dt = new DataTable();\n\n    using (SqlConnection conn = new SqlConnection(connString))\n    {\n        conn.Open();\n        SqlCommand cmd = new SqlCommand(sql, conn);\n        var da = new SqlDataAdapter(cmd);\n        da.Fill(dt);\n    }\n\n    if (filter != null)\n    {\n        dt.DefaultView.RowFilter = string.Format(\"[0].{1}\", typeof(DataRow).FullName, filter.Method.Name);\n        dt = dt.DefaultView.ToTable();\n    }\n\n    if (transform != null)\n    {\n        Action<DataRow> action = row =>\n        {\n            object[] transformedValues = transform(row);\n            for (int i = 0; i < transformedValues.Length; ++i)\n                dt.Columns[i].SetColumnName(transformedValues[i].ToString());\n        };\n        dt.AsEnumerable().ForEach(action);\n    }\n\n    return dt;\n}\n```\nThis function allows you to easily retrieve data from the database, apply some filters or transformations, and get a DataTable as output. Here's an example usage:\n```csharp\n// Assume this function gets the connection string from configuration\nstring connectionString = GetConnectionString();\n\nDataTable employeesOver30SortedBySalary = ExecuteQueryAndGetDataTable(connectionString, \"SELECT * FROM Employees WHERE Age > 30 ORDER BY Salary DESC\",\n    row => (int)row[\"Age\"] > 40,\n    row => new object[] { row[\"Name\"], row[\"Department\"], (decimal)row[\"Salary\"] });\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_code_conversion",
        "task_description": "Learn about converting Actian OpenROAD 4GL code to C#.",
        "document": null
    }
]
[
    {
        "instruction": "Write code to define a global procedure that opens a database connection in Actian 4GL OpenROAD Global Procedures.",
        "input": "The database name is \"myDatabase\" and the user name and password are both \"password\".",
        "output": "Here's an example of a procedure that opens a database connection:\n```\nprocedure open_db_conn(database = char, user_name = char, passwd = char) as boolean;\nbegin\n    declare db_handle integer;\n\n    if not is_open('myDatabase', db_handle) then\n        connect to 'myDatabase' using user 'user_name' password 'passwd';\n    end if;\nend;\n```\nYou can call this procedure with the appropriate database name, username, and password as parameters.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write code in Actian 4GL OpenROAD Global Procedures to perform a simple SELECT query on a specific table from a connected database.",
        "input": "The table is \"employees\" and the columns of interest are employee_id, first_name, last_name, and salary.",
        "output": "Here's an example of performing a SELECT query with filtering:\n```\nprocedure select_employee_data(database = char, user_name = char, passwd = char) as cursor;\nbegin\n    declare employee_cursor cursor for select employee_id, first_name, last_name, salary from employees where salary > 50000;\nend;\n```\nThis example assumes that the 'employees' table exists in a connected database. You can call this procedure and fetch rows using the FetchNext function or iterate over it in a loop.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Explain how to define local variables inside a procedure in Actian 4GL OpenROAD Global Procedures with an example.",
        "input": "Inside a procedure called 'calculate_total', there are two integer variables needed: 'item_price' and 'quantity'.",
        "output": "You can define local variables inside a procedure like this:\n```\nprocedure calculate_total =\ndeclare\n    item_price = integer;\n    quantity = integer;\nbegin\n    -- Procedure body\nend\n```\nIn this example, 'item_price' and 'quantity' are local to the 'calculate_total' procedure.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write code demonstrating passing arguments to a user-defined function in Actian 4GL OpenROAD Global Procedures.",
        "input": "Create a user-defined function called 'find_maximum' that finds the maximum value of two integers passed as arguments.",
        "output": "Here's how to pass arguments to a user-defined function:\n```\nfunction find_maximum(num1 = integer, num2 = integer) = integer;\nbegin\n    if (num1 > num2) then\n        return num1;\n    else\n        return num2;\n    end;\nend;\n\n-- Usage\nresult = find_maximum(num1 = 15, num2 = 20);\nmessage 'Maximum is: ' || char(result);\n```\nIn this example, the function 'find_maximum' takes two integers as arguments and returns the maximum value.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Implement error handling in Actian 4GL OpenROAD Global Procedures using ON-ERROR GOTO.",
        "input": "Procedure `process_file` that reads data from a text file and performs some operations on the data. The input file should be located in the directory 'data'. If an I/O error occurs, display an error message and return.\n```\nprocedure process_file(filename = string) = void;\nbegin\n    open-for-input in filename as file_handle;\n        -- perform operations on data from the file using file_handle\n        ...\n    close file_handle;\nend;\n```",
        "output": "Here's an example with error handling added:\n```\nprocedure process_file(filename = string) = void;\nbegin\n    open-for-input in filename as file_handle on-error goto error_handler;\n        -- perform operations on data from the file using file_handle\n        ...\n    close file_handle;\n    exit;\n\nerror_handler:\n    display \"I/O Error occurred while opening or reading file: \", filename;\nend;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write a global procedure in Actian 4GL OpenROAD to sort an array of integers using the bubble sort algorithm.",
        "input": "Array `arr_of_numbers` contains 10 elements (indexed from 1 to 10) and values as follows: [8, 5, 2, 9, 6, 3, 7, 4, 1, 10].\n```\ndeclare variable arr_of_numbers as array of integers with size 10;\n```",
        "output": "Here's the bubble sort algorithm implemented in Actian 4GL OpenROAD:\n```\nprocedure bubble_sort(arr = array of integers, size = integer) = void;\nbegin\n    declare variable i = 1 to size - 1;\n        -- Perform comparison and swapping for each element up to the second last index (size-1).\n    for all i do begin\n        if arr[i] > arr[i+1] then begin\n            -- Swap elements at positions i and i+1.\n            set temp = arr[i];\n            arr[i] = arr[i+1];\n            arr[i+1] = temp;\n        end if;\n    end for all;\nend;\n\n-- Usage with example input array\ndeclare variable arr_of_numbers as array of integers with size 10: [8, 5, 2, 9, 6, 3, 7, 4, 1, 10];\nbubble_sort(arr = arr_of_numbers);\n-- Output of the sorted array: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write an Actian 4GL OpenROAD Global Procedure to calculate the sum of elements in an array.",
        "input": "```\ndeclare\n    my_array = table of integer;\nbegin\n    initialize my_array;\n    append -1, 2, 3, 4, 5 to my_array;\n    message 'Sum of array: ' || sum(my_array);\nend;\n```",
        "output": "Here's a global procedure that calculates the sum of an array's elements:\n```\nprocedure calculate_sum_of_array =\ndeclare\n    input_array = table of integer;\n    sum_total = integer;\nbegin\n    for each a in input_array loop\n        sum_total = sum_total + a;\n    end for;\n    message 'Sum of array: ' || sum_total;\nend;\n```\nYou can call it with the example provided array like this:\n```\ndeclare\n    my_array = table of integer;\nbegin\n    initialize my_array;\n    append -1, 2, 3, 4, 5 to my_array;\n    calculate_sum_of_array(my_array);\nend;\n```\nThis calls the 'calculate_sum_of_array' procedure with a given input array and displays the sum.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write an Actian 4GL OpenROAD Global Procedure that takes two parameters, performs an operation on them and returns the result.",
        "input": "```\ndeclare\n    x = 5;\n    y = 10;\nbegin\n    message 'Result: ' || (x * y);\nend;\n```",
        "output": "Here's a global procedure that takes two parameters, performs multiplication and returns the result:\n```\nprocedure multiply_two_numbers =\ndeclare\n    x = integer;\n    y = integer;\n    product = integer;\nbegin\n    x = argument(1);\n    y = argument(2);\n    product = x * y;\n    return product;\nend;\n```\nYou can call it with the example provided values like this:\n```\ndeclare\n    result = multiply_two_numbers(5, 10);\nbegin\n    message 'Result: ' || char(result);\nend;\n```\nThis calls the 'multiply_two_numbers' procedure and displays the multiplication result.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write code to create a loop that executes a SQL statement multiple times in Actian 4GL OpenROAD Global Procedures.",
        "input": "The SQL statement is \"UPDATE myTable SET column1 = 'new_value' WHERE id = 1\" and you want the loop to run 3 times.",
        "output": "Here's an example of a loop that executes a SQL statement multiple times:\n```\nfor i = 1 to 3 do;\n    execute immediate \"UPDATE myTable SET column1 = 'new_value' WHERE id = :id\";\n        using id = 1;\nend for;\n```\nThis loop will execute the given SQL statement 3 times with the same parameters.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write code to create a cursor in Actian 4GL OpenROAD Global Procedures that fetches all rows from a specified table and iterates through them.",
        "input": "The table name is \"myTable\".",
        "output": "Here's an example of how to create a cursor and fetch all rows from a specified table:\n```\ndeclare myCursor cursor for select * from myTable;\nbegin\n    open myCursor;\n    loop\n        fetch next from myCursor into :column1, :column2, ..., :columnN;\n        if sqlca.sqlcode != 0 then exit when end-of-file;\n        -- process the current row here\n    end loop;\n    close myCursor;\nend;\n```\nThis code creates a cursor called `myCursor`, opens it to fetch all rows from the table `myTable`, and iterates through them by using the FETCH NEXT statement.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write an Actian 4GL OpenROAD Global Procedure that performs an UPDATE operation on a specific record in a table, based on certain conditions.",
        "input": "The table is \"inventory\", the field to be updated is 'quantity' and the condition for updating the record is that the item_id is equal to 102 and the current quantity is less than 50. The new value for 'quantity' should be 100.",
        "output": "Here's an example of performing an UPDATE operation with a condition:\n```\nprocedure update_inventory(database = char, user_name = char, passwd = char) as nodata;\nbegin\n    update inventory set quantity = 100 where item_id = 102 and quantity < 50;\nend;\n```\nThis example assumes that the 'inventory' table exists in a connected database. You can call this procedure to update the record with the item_id of 102, setting its new 'quantity' value to 100 if the current quantity is less than 50.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write an Actian 4GL OpenROAD Global Procedure that performs a DELETE operation on specific records in a table based on certain conditions.",
        "input": "The table is \"customers\" and you want to delete all customers living in 'New York City' who have not made a purchase in the last month.",
        "output": "Here's an example of performing a DELETE operation with a condition:\n```\nprocedure delete_customers(database = char, user_name = char, passwd = char) as nodata;\nbegin\n    delete from customers where city = 'New York City' and last_purchase_date < current-date - 30;\nend;\n```\nThis example assumes that the 'customers' table exists in a connected database with columns such as 'city' and 'last_purchase_date'. The DELETE statement removes all records from customers who live in New York City and haven't made a purchase in the last 30 days. You can call this procedure to execute the deletion operation.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write an Actian 4GL OpenROAD Global Procedure to find the maximum value in a list of integers.",
        "input": "```\ndeclare\n    my_list = table of integer;\nbegin\n    initialize my_list;\n    append 1, 2, 3, 4, 5, 6 to my_list;\n    message 'Maximum value: ' || max_value(my_list);\nend;\n```",
        "output": "Here's a global procedure that finds the maximum value in a list of integers:\n```\nprocedure find_max =\ndeclare\n    input_list = table of integer;\n    max_value = integer;\nbegin\n    for each i in input_list loop\n        if (i > max_value) then\n            max_value = i;\n        end if;\n    end for;\n    message 'Maximum value: ' || max_value;\nend;\n```\nYou can call it with the example provided list like this:\n```\ndeclare\n    my_list = table of integer;\nbegin\n    initialize my_list;\n    append 1, 2, 3, 4, 5, 6 to my_list;\n    find_max(my_list);\nend;\n```\nThis calls the 'find_max' procedure with a given input list and displays the maximum value.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write a global procedure to generate Fibonacci sequence for n number of terms in Actian 4GL OpenROAD Global Procedures.",
        "input": "```\ndeclare\n    n = integer;\nbegin\n    fibonacci_sequence(5);\nend;\n```",
        "output": "Here's an example of a global procedure that generates Fibonacci sequence for n number of terms:\n```\nprocedure fibonacci_sequence(terms as integer) as table of integer;\nbegin\n    declare\n        i = 1,\n        prev_term = 0,\n        current_term = 1;\n        fibonacci_result = table of integer;\n    loop\n        if (i > terms) then\n            exit;\n        end if;\n\n        append prev_term to fibonacci_result;\n        set(prev_term) = current_term;\n        set(current_term) = current_term + i;\n        increment(i);\n    end loop;\nend;\n```\nYou can call it with an input number of terms like this:\n```\ndeclare\n    n = 10;\nbegin\n    fibonacci_sequence(n);\nend;\n```\nThis calls the 'fibonacci_sequence' procedure with a given number of terms and displays the Fibonacci sequence.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Create a global function in Actian 4GL OpenROAD that calculates the average of an array of floating-point numbers.",
        "input": "Array `arr_of_numbers` contains the following floating-point numbers: [3.14, 2.72, 3.58, 2.97].\n```\ndeclare variable arr_of_numbers as array of real with size 4;\n```",
        "output": "Here's a simple implementation for calculating the average of an array in Actian 4GL OpenROAD:\n```\nfunction calculate_average(arr = array of real, size = integer) : real as result;\nbegin\n    declare variable total = 0.00 as real;\n        -- Loop through each element of the input array and add it to the total sum.\n    for all i from 1 to size do begin\n        set total = total + arr[i];\n    end for all;\n    -- Divide the total by the number of elements (size) to find the average.\n    result = total / size;\nend;\n\n-- Usage with example input array\ndeclare variable arr_of_numbers as array of real: [3.14, 2.72, 3.58, 2.97];\nresult = calculate_average(arr = arr_of_numbers);\n-- Output: Result is the average value of the numbers in the provided input array.\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write a global function in Actian 4GL OpenROAD that checks if an input string is a valid email address, using regular expressions.",
        "input": "Input string `email_address = \"example@example.com\"`.",
        "output": "Here's an example of a simple global function in Actian 4GL OpenROAD that checks if an input string matches the pattern of a valid email address:\n```\nfunction is_valid_email(input_string = char) : boolean;\nbegin\n    declare variable regex_pattern = \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\";\n        -- Use a regular expression to check if the input string matches the pattern of a valid email address.\n    result = match(input_string, regex_pattern);\nend;\n\n-- Usage with example input\ndeclare variable email_address = \"example@example.com\";\nif is_valid_email(input_string = email_address) then begin\n    -- The given input is a valid email address. Perform additional actions if needed.\nend else begin\n    -- The given input is not a valid email address. Handle errors or inform the user accordingly.\nend;\n```",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write an Actian 4GL OpenROAD Global Procedure to sort a list of strings in alphabetical order.",
        "input": "```\ndeclare\n    my_list = table of string;\nbegin\n    initialize my_list;\n    append 'apple', 'banana', 'orange', 'grape' to my_list;\n    message 'Sorted list:';\n    sort my_list using ascii_sort_strings;\n    loop while not eof(my_list) do\n        message ' ' || current_row(my_list);\n        next row my_list;\n    end loop;\nend;\n```",
        "output": "Here's a global procedure that sorts a list of strings in alphabetical order:\n```\nprocedure sort_strings =\ndeclare\n    input_list = table of string;\nbegin\n    sort input_list using ascii_sort_strings;\n    loop while not eof(input_list) do\n        message ' ' || current_row(input_list);\n        next row input_list;\n    end loop;\nend;\n```\nYou can call it with the example provided list like this:\n```\ndeclare\n    my_list = table of string;\nbegin\n    initialize my_list;\n    append 'apple', 'banana', 'orange', 'grape' to my_list;\n    sort_strings(my_list);\nend;\n```\nThis calls the 'sort_strings' procedure with a given input list and displays the sorted list.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write an Actian 4GL OpenROAD Global Procedure that checks if a number is within a specified range.",
        "input": "```\ndeclare\n    num = integer;\n    min_value = 5;\n    max_value = 10;\nbegin\n    message 'Number: ' || num;\n    -- check if the given number is within the specified range\nend;\n```",
        "output": "Here's a global procedure that checks if a number is within a specified range:\n```\nprocedure is_in_range =\ndeclare\n    num = integer;\n    min_value = integer;\n    max_value = integer;\n    bool = boolean;\nbegin\n    if (num >= min_value and num <= max_value) then\n        bool = true;\n    else\n        bool = false;\n    end if;\n    message 'Number: ' || num || ', Within Range: ' || bool;\nend;\n```\nYou can call it with the example provided number and range like this:\n```\ndeclare\n    num = integer;\nbegin\n    initialize num;\n    num = 7;\n    is_in_range(num, min_value = 5, max_value = 10);\nend;\n```\nThis calls the 'is_in_range' procedure with a given number and range and displays if the number is within the specified range.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL OpenROAD Global Procedure to update employee salary information based on performance ratings in a given period.",
        "input": "Table name: employees; Performance rating column: rating_1to5; Salary column: salary; Period column: period",
        "output": "Here's an example of a procedure to update employee salaries based on their performance ratings for a specific period:\n```\nprocedure update_salaries =\nbegin\n    declare var emp_id as integer;\n    declare var rating as integer;\n    declare var salary_increment as float;\n\n    -- Update the cursor with employees and their respective performance ratings for the given period\n    declare cursor c_employee_ratings is\n        select employee_id, rating_1to5, period\n        from employees\n        where period = :period;\n\n    -- Open and fetch the first row\n    open c_employee_ratings;\n    fetch next from c_employee_ratings into :emp_id, :rating, ;\n\n    -- Apply salary adjustments based on performance ratings\n    if rating >= 4 then\n        salary_increment = 0.10;\n    elseif rating >= 3 then\n        salary_increment = 0.05;\n    else\n        salary_increment = 0.02;\n    endif;\n\n    -- Update employee salaries\n    update employees\n    set salary = salary + (salary * :salary_increment)\n    where employee_id = :emp_id;\n\n    -- Repeat for the remaining rows in the cursor\n    while not done with c_employee_ratings loop\n        fetch next from c_employee_ratings into :emp_id, :rating, ;\n        update employees\n            set salary = salary + (salary * :salary_increment)\n            where employee_id = :emp_id;\n    endwhile;\nend\n```\nThis procedure calculates salary adjustments based on performance ratings and updates the employee salaries accordingly.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL OpenROAD Global Procedure to fetch employees with a specific role in a given department and return their IDs.",
        "input": "Table name: employees; Role column: role; Department column: dept_name; Required role: \"manager\"; Department name: \"Sales\"",
        "output": "Here's the procedure that fetches employees with the \"manager\" role in the \"Sales\" department and returns their IDs:\n```\nprocedure fetch_manager_ids = returning array of integer;\nbegin\n    declare var managers as array of integer;\n\n    -- Update the cursor with employees in the Sales department who are managers\n    declare cursor c_managers is\n        select employee_id\n        from employees\n        where role = \"manager\" and dept_name = \"Sales\";\n\n    -- Open and fetch the manager IDs into an array\n    open c_managers;\n    fetch all from c_managers into :managers;\n\n    -- Return the manager ID array\n    return managers;\nend\n```\nThis procedure returns an array of IDs for employees in the \"Sales\" department with the \"manager\" role.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL OpenROAD Global Procedure that accepts a customer's phone number, searches for the associated customer account, and returns their name and email address.",
        "input": "Table name: customers; Phone column: phone_number; Customer name column: customer_name; Email column: email_address",
        "output": "Here's a procedure that takes in a customer's phone number, searches for the associated account, and returns their name and email address:\n```\nprocedure find_customer = returning record;\nbegin\n    declare var customer as record of customer_name string, email_address string;\n\n    -- Update the cursor with customers whose phone numbers match the input number\n    declare cursor c_customers is\n        select customer_name, email_address\n        from customers\n        where phone_number = :phone_number;\n\n    -- Open and fetch the first row with a matching phone number\n    open c_customers;\n    if found(c_customers) then\n        fetch first from c_customers into :customer.customer_name, :customer.email_address;\n    endif;\n\n    -- Return the customer record\n    return customer;\nend\n```\nThis procedure returns a record containing the name and email address of a customer with the provided phone number.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write an Actian 4GL OpenROAD Global Procedure to validate user inputs for numerical data between specific bounds.",
        "input": "The input variable is `user_input` and the minimum allowed value is 10 and the maximum allowed value is 50.",
        "output": "```\nprocedure validate_number(input = integer, min = integer, max = integer) as boolean;\nbegin\n    if (input < min or input > max) then\n        return false;\n    else\n        return true;\n    end if;\nend;\n```\nYou can call this function with your given user_input and bounds like this:\n```\ndeclare\n    user_input = 25,\n    min_value = 10,\n    max_value = 50;\nbegin\n    if not validate_number(user_input, min_value, max_value) then\n        message 'Invalid input: the number must be between ' || min_value || ' and ' || max_value;\n    end if;\nend;\n```\nThis checks whether the given user input is within the specified bounds. If it's not, an error message is displayed.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL OpenROAD Global Procedure to compute a simple average of numerical values in a table.",
        "input": "The table name is `my_data` and the column name containing numerical values is `value`.",
        "output": "```\nprocedure compute_average = table(table);\nbegin\n    declare\n        total = 0, count = 0;\n    initialize compute_average;\n\n    for all rows in my_data do begin\n        total = total + current_row('value');\n        count = count + 1;\n    end;\n    message 'Average: ' || (total / count);\nend;\n```\nYou can call this procedure with the example provided table like this:\n```\ndeclare my_data as table of record(value = integer);\ninitialize my_data;\nappend(1, 2, 3) to my_data;\ncompute_average(my_data);\n```\nThis computes and displays the average value of the 'value' column in the example table.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL OpenROAD Global Procedure to sort a given list of employee IDs in ascending order using bubble sort algorithm.",
        "input": "List of employee IDs: [1001, 2002, 3005, 4006, 5008]",
        "output": "Here's an example of a procedure to sort the given list of employee IDs in ascending order using the bubble sort algorithm:\n```\nprocedure bubble_sort(idlist = array of integer) = void;\ndeclare i as integer;\ndeclare j as integer;\ndeclare temp as integer;\n\nbegin\n    -- Loop through the list\n    for i from 1 to length(idlist)-1 loop\n        for j from i+1 to length(idlist) loop\n            -- Compare adjacent elements and swap them if necessary\n            if idlist[i] > idlist[j] then\n                temp = idlist[i];\n                idlist[i] = idlist[j];\n                idlist[j] = temp;\n            endif;\n        endfor;\n    endfor;\nend\n```\nThe input list of employee IDs should be passed as an array:\n```\ndeclare var ids = [1001, 2002, 3005, 4006, 5008];\ncall bubble_sort(ids);\n```\nThe `bubble_sort()` procedure sorts the list in ascending order.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write Actian 4GL OpenROAD Global Procedure to connect and execute an SQL query on a database, retrieve the result, and print it out.",
        "input": "Database name: mydb; Table name: customers; Query: SELECT * FROM customers;",
        "output": "Here's an example of a procedure that connects to the specified database, executes the provided SQL query, retrieves the results, and prints them:\n```\nprocedure print_customers =\nbegin\n    declare var conn as connection;\n    declare var stmt as statement;\n    declare var result as resultset;\n    declare var id as integer;\n    declare var name as string;\n    declare var email as string;\n\n    -- Open the database connection\n    connect to mydb(username=\"<database_user>\", password=\"<database_password>\");\n\n    -- Create a statement object and execute the query\n    create statement stmt from \"SELECT * FROM customers\";\n    execute stmt;\n\n    -- Get the result set and loop through it\n    fetch into :id, :name, :email from stmt into :result;\n    write_line(\"ID: \", :id);\n    write_line(\"Name: \", :name);\n    write_line(\"Email: \", :email);\n\n    -- Repeat for the remaining rows in the result set\n    while not done with result loop\n        fetch next from stmt into :id, :name, :email;\n        write_line(\"ID: \", :id);\n        write_line(\"Name: \", :name);\n        write_line(\"Email: \", :email);\n    endwhile;\nend\n```\nThis procedure retrieves and prints the customer records from the specified table. The database username, password, and other connection details should be replaced with your actual login credentials.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    }
]
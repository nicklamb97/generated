[
    {
        "instruction": "How do you receive the return value from a database procedure in Actian 4GL?",
        "input": "",
        "output": "To receive the return value of a database procedure, you must specify an integer variable in the calling frame or procedure to receive it.\nExample: `returnvalue = integer;`",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "What should I do if the database procedure returns a value and I want to capture it?",
        "input": "",
        "output": "You must specify an integer variable in the calling frame or procedure to receive the return value, like this example:\n```\nreturnvalue = integer;\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "What is a database procedure and why are they often used?",
        "input": "",
        "output": "A *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "Explain with an example how I can pass parameters to a database procedure in OpenROAD.",
        "input": "",
        "output": "You use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For example, if intparam, floatparam, and charparam are integer, float, and varchar variables respectively:\n```\ncallproc mydbprocedure(intparam = 256, floatparam = 3.625, charparam = 'seen any good movies lately');\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "How do you pass parameters to and from database procedures?",
        "input": "",
        "output": "You use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only. In the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256, floatparam = 3.625, charparam = 'seen any good movies lately');\n```\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n```sql\nreturnvalue = integer;\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "In what order should you pass the parameters to a database procedure?",
        "input": "",
        "output": "You can pass the parameters in any order when calling a database procedure. However, it's recommended that you follow the same order as defined in your database procedure for clarity and consistency.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "Provide an example of the syntax for registering a database procedure in OpenROAD Workbench.",
        "input": "",
        "output": "To register a database procedure, you can use a command like the following in the Command Interpreter window:\n\n```sql\nregisterprocedure dbprocedurename CALLABLE;\n```\nReplace \"dbprocedurename\" with the name of your database procedure. The \"CALLABLE\" argument indicates that the registered procedure is callable from a script or 4GL procedure.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "Describe the data type of the value returned by a database procedure.",
        "input": "",
        "output": "The return type for a database procedure can be an integer, float or character depending on the definition of the database procedure and its usage.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "What should I do if a database procedure returns a value?",
        "input": "",
        "output": "You must specify an integer variable in the calling frame or procedure to receive the return value. Here's an example:\n\nreturnvalue = integer;",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "What is the syntax for calling a database procedure with no parameters?",
        "input": "",
        "output": "If the database procedure does not require any parameters, you can call it by using just the procedure name:\n```sql\ncallproc procedurenam;\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "How can you call a database procedure in OpenROAD?",
        "input": "",
        "output": "In OpenROAD, you call database procedures the same way you call 4GL procedures. The syntax for calling a database procedure is: `[integer_variable = ] callproc procedurename [(parameter = expression {, parameter = expression})]`. For example, if the name of your database procedure is mydbprocedure, then the call would look like this: `callproc mydbprocedure;`.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "How can you pass parameters to a database procedure and receive its return value?",
        "input": "",
        "output": "You use parameter names to pass parameters to database procedures just as you do with 4GL procedures. The parameters must be simple variables only. In the calling frame or procedure, you need to specify an integer variable to receive the return value if the procedure has one. Here's an example:\n```sql\nreturnvalue = integer;\nreturnvalue = callproc mydbprocedure(intparam = 256, floatparam = 3.625, charparam = 'seen any good movies lately');\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "How do you register a database procedure in OpenROAD Workbench?",
        "input": "",
        "output": "To register a database procedure in OpenROAD Workbench, specify the name of the database procedure when creating it, and later provide that name during registration. The exact steps may vary depending on the specific OpenROAD version you are using. Please refer to the OpenROAD documentation for more detailed instructions.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "How do I pass multiple parameters to a database procedure in Actian 4GL?",
        "input": "",
        "output": "You use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. Here's an example:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "What is a database procedure in Actian 4GL?",
        "input": "",
        "output": "A database procedure is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "How do you pass parameters to a database procedure?",
        "input": "",
        "output": "You use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order and they must be simple variables only.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "Can you provide an example of how you can pass parameters to a database procedure?",
        "input": "",
        "output": "Yes! Here is an example:\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256, floatparam = 3.625, charparam = 'seen any good movies lately');\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "What is the syntax to call a database procedure in OpenROAD?",
        "input": "",
        "output": "The syntax for calling a database procedure in OpenROAD is:\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\nWhere `procedurename` specifies the name of the stored procedure you are trying to call. Parameters are optional and can be passed in if needed.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "What is the purpose of database procedures in OpenROAD?",
        "input": "",
        "output": "Database procedures in OpenROAD are data-oriented procedures stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. They help increase performance, ensure data integrity, and consistency. Database procedures are often used to perform complex operations such as calculations, transactions, or handling large datasets more efficiently.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "How can you pass multiple parameters to a database procedure in Actian 4GL?",
        "input": "",
        "output": "You can pass multiple parameters to a database procedure by including them in the callproc statement, separated by commas. Here's an example:\n\n```sql\ncallproc mydbprocedure(param1 = value1, param2 = value2);\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "What is the role of a database procedure in Actian 4GL?",
        "input": "",
        "output": "A database procedure in Actian 4GL is a data-oriented procedure stored in the database and executed within the database server. It helps increase performance, ensure data integrity and consistency by providing encapsulation of complex or repetitive operations.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "Explain the purpose of database procedures in Actian 4GL using an appropriate response and examples if possible.",
        "input": "",
        "output": "Database procedures are data-oriented procedures stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. They help increase performance, ensure data integrity, and maintain consistency. For example, you might use a database procedure to perform a complex calculation on a large dataset.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "What is the syntax for calling a database procedure in Actian 4GL?",
        "input": "",
        "output": "The syntax for calling a database procedure is:\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\nReplace `procedurename` with the name you specified when you created the database procedure and provided when you registered it in OpenROAD Workbench. You can also specify parameters within the parentheses if needed, separated by commas. For example:\n```sql\ncallproc mydbprocedure(param1 = value1, param2 = value2);\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "Can you explain the syntax for calling a database procedure in Actian 4GL?",
        "input": "",
        "output": "In OpenROAD, you call database procedures using the same syntax as 4GL procedures. The general syntax is:\n```\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    },
    {
        "instruction": "How are parameters passed to database procedures in Actian 4GL?",
        "input": "",
        "output": "Parameters can be passed to database procedures using the same method as 4GL procedures. You use parameter names and specify them in any order. In addition, parameters for a database procedure must be simple variables only.",
        "taxonomy_path": "knowledge->programming_languages->procedures->calling_procedures->how_call_db_procedures",
        "task_description": "Explain how you call database procedures in Actian 4GL.",
        "document": [
            "# How You Can Call Database Procedures\n\nA *database procedure* is a data-oriented procedure stored in the database and executed within the database server that you can call by name in a script or 4GL procedure. Database procedures are often used to increase performance and help ensure data integrity and consistency.\n\nIn OpenROAD, you call database procedures the same way you call 4GL procedures.\n\n## Syntax\n\nThe syntax for calling a database procedure is:\n\n```sql\n[integer_variable = ] callproc procedurename\n               [(parameter = expression\n               {, parameter = expression})]\n```\n\n### *procedurename*\n\nSpecifies the name you specified when you created the database procedure and that you later provided when you registered the database procedure in OpenROAD Workbench.\n\nIn the following example, the callproc statement calls the database procedure named mydbprocedure:\n\n```sql\ncallproc mydbprocedure;\n```\n\n## How You Can Pass Parameters to and From Database Procedures\n\nYou use parameter names to pass parameters to database procedures just as you do with 4GL procedures. You can pass the parameters in any order. For database procedures, the parameters must be simple variables only.\n\nIn the following example, intparam, floatparam, and charparam are integer, float, and varchar variables, respectively:\n\n```sql\nreturnvalue = callproc mydbprocedure(intparam = 256,\n    floatparam = 3.625,\n    charparam = 'seen any good movies lately');\n```\n\nWhen the procedure returns a value, you must specify an integer variable in the calling frame or procedure to receive the return value, for example:\n\n```sql\nreturnvalue = integer;\n```"
        ]
    }
]
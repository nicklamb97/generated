{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to declare a forward reference for a local procedure in Actian 4GL OpenROAD Local Procedures?", "assistant": "Declare a forward reference like this:\n```\ndeclare\n    calculate_tax = procedure returning float8;\nenddeclare\n```\nThis declares a forward reference for a local procedure that returns a float8 value.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "Write code to define and call a local procedure that calculates a discount in Actian 4GL OpenROAD Local Procedures.", "assistant": "Define and call a discount calculation procedure:\n```\ndeclare\n    calculate_discount = procedure returning float8;\nenddeclare\n\nprocedure calculate_discount(price = float8, discount_rate = float8) =\nbegin\n    return price * (1 - discount_rate);\nend\n\n-- Usage\ndiscounted_price = callproc calculate_discount(price = 100.00, discount_rate = 0.1);\n```\nThis defines a procedure to calculate a discounted price and demonstrates its usage.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that adds tax to a price in Actian 4GL OpenROAD to C#? Respond only in code: procedure addtax(tax=float8, price=float8) = {\n     return (price * tax);\n} ```", "assistant": "```csharp\nprivate double AddTax(double tax, double price)\n{\n    return price * tax;\n}\n\n// Usage\ndouble tax = 0.07;\ndouble price = 100.00;\ndouble result = AddTax(tax, price);\n```\nThis C# method replicates the Actian 4GL procedure that calculates the tax amount.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that calculates a total price after discount to C#? Respond only in code: procedure calculate_total(price=float8, discount_rate=float8) = begin\n    return price * (1 - discount_rate);\nend ```", "assistant": "```csharp\nprivate double CalculateTotal(double price, double discountRate)\n{\n    return price * (1 - discountRate);\n}\n\n// Usage\ndouble price = 200.00;\ndouble discountRate = 0.15;\ndouble totalPrice = CalculateTotal(price, discountRate);\n```\nThis C# method mirrors the Actian 4GL procedure that calculates the total price after applying a discount.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that updates an employee record in Actian 4GL to C#? Respond only in code: procedure update_employee(emp_id=int, new_salary=float8) = begin\n    // Code to update the employee record\nend ```", "assistant": "```csharp\nprivate void UpdateEmployee(int empId, double newSalary)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"UPDATE employees SET salary = @NewSalary WHERE emp_id = @EmpId\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@NewSalary\", newSalary);\n            command.Parameters.AddWithValue(\"@EmpId\", empId);\n            command.ExecuteNonQuery();\n        }\n    }\n}\n```\nThis C# method replicates the Actian 4GL procedure that updates an employee's salary.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that calculates the average salary in Actian 4GL to C#? Respond only in code: procedure calculate_average_salary() = begin\n    // Code to calculate average salary\nend ```", "assistant": "```csharp\nprivate double CalculateAverageSalary()\n{\n    double averageSalary = 0.0;\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"SELECT AVG(salary) FROM employees\",\n            connection))\n        {\n            object result = command.ExecuteScalar();\n            if (result != DBNull.Value)\n            {\n                averageSalary = Convert.ToDouble(result);\n            }\n        }\n    }\n    return averageSalary;\n}\n```\nThis C# method mirrors the Actian 4GL procedure to calculate the average salary.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that retrieves employee details by ID in Actian 4GL to C#? Respond only in code: procedure get_employee_details(emp_id=int) = begin\n    // Code to retrieve employee details\nend ```", "assistant": "```csharp\nprivate void GetEmployeeDetails(int empId)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"SELECT * FROM employees WHERE emp_id = @EmpId\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@EmpId\", empId);\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                if (reader.Read())\n                {\n                    // Process employee details\n                    string name = reader[\"name\"].ToString();\n                    double salary = Convert.ToDouble(reader[\"salary\"]);\n                    // Handle data\n                }\n            }\n        }\n    }\n}\n```\nThis C# method replicates the Actian 4GL procedure for retrieving employee details by ID.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that adds a new product to the inventory in Actian 4GL to C#? Respond only in code: procedure add_product(product_name=string, price=float8) = begin\n    // Code to add a new product\nend ```", "assistant": "```csharp\nprivate void AddProduct(string productName, double price)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"INSERT INTO products (product_name, price) VALUES (@ProductName, @Price)\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@ProductName\", productName);\n            command.Parameters.AddWithValue(\"@Price\", price);\n            command.ExecuteNonQuery();\n        }\n    }\n}\n```\nThis C# method mirrors the Actian 4GL procedure for adding a new product to the inventory.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that calculates the shipping cost based on weight in Actian 4GL to C#? Respond only in code: procedure calculate_shipping_cost(weight=float8) = begin\n    return weight * 5.00; // example rate\nend ```", "assistant": "```csharp\nprivate double CalculateShippingCost(double weight)\n{\n    return weight * 5.00; // example rate\n}\n\n// Usage\ndouble weight = 10.0;\ndouble shippingCost = CalculateShippingCost(weight);\n```\nThis C# method replicates the Actian 4GL procedure for calculating the shipping cost based on weight.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that checks if a product is in stock in Actian 4GL to C#? Respond only in code: procedure is_in_stock(product_id=int) = begin\n    // Code to check stock\nend ```", "assistant": "```csharp\nprivate bool IsInStock(int productId)\n{\n    bool inStock = false;\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"SELECT COUNT(*) FROM inventory WHERE product_id = @ProductId AND quantity > 0\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@ProductId\", productId);\n            int count = (int)command.ExecuteScalar();\n            inStock = count > 0;\n        }\n    }\n    return inStock;\n}\n```\nThis C# method mirrors the Actian 4GL procedure for checking if a product is in stock.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that calculates employee bonus based on performance in Actian 4GL to C#? Respond only in code: procedure calculate_bonus(salary=float8, performance_rating=float8) = begin\n    return salary * performance_rating * 0.1; // example bonus calculation\nend ```", "assistant": "```csharp\nprivate double CalculateBonus(double salary, double performanceRating)\n{\n    return salary * performanceRating * 0.1; // example bonus calculation\n}\n\n// Usage\ndouble salary = 50000.00;\ndouble performanceRating = 0.8;\ndouble bonus = CalculateBonus(salary, performanceRating);\n```\nThis C# method replicates the Actian 4GL procedure for calculating employee bonuses based on performance.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that retrieves orders for a specific customer in Actian 4GL to C#? Respond only in code: procedure get_orders(customer_id=int) = begin\n    // Code to retrieve orders\nend ```", "assistant": "```csharp\nprivate void GetOrders(int customerId)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"SELECT * FROM orders WHERE customer_id = @CustomerId\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@CustomerId\", customerId);\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    // Process orders\n                    int orderId = (int)reader[\"order_id\"];\n                    DateTime orderDate = (DateTime)reader[\"order_date\"];\n                    // Handle data\n                }\n            }\n        }\n    }\n}\n```\nThis C# method mirrors the Actian 4GL procedure for retrieving orders for a specific customer.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that calculates the total inventory value in Actian 4GL to C#? Respond only in code: procedure calculate_inventory_value() = begin\n    // Code to calculate total inventory value\nend ```", "assistant": "```csharp\nprivate double CalculateInventoryValue()\n{\n    double totalValue = 0.0;\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"SELECT SUM(price * quantity) FROM inventory\",\n            connection))\n        {\n            object result = command.ExecuteScalar();\n            if (result != DBNull.Value)\n            {\n                totalValue = Convert.ToDouble(result);\n            }\n        }\n    }\n    return totalValue;\n}\n```\nThis C# method mirrors the Actian 4GL procedure to calculate the total inventory value.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that updates the product price based on a percentage increase in Actian 4GL to C#? Respond only in code: procedure update_product_price(product_id=int, percentage_increase=float8) = begin\n    // Code to update product price\nend ```", "assistant": "```csharp\nprivate void UpdateProductPrice(int productId, double percentageIncrease)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"UPDATE products SET price = price * (1 + @PercentageIncrease) WHERE product_id = @ProductId\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@PercentageIncrease\", percentageIncrease);\n            command.Parameters.AddWithValue(\"@ProductId\", productId);\n            command.ExecuteNonQuery();\n        }\n    }\n}\n```\nThis C# method replicates the Actian 4GL procedure for updating product prices based on a percentage increase.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that calculates the average discount given to customers in Actian 4GL to C#? Respond only in code: procedure calculate_average_discount() = begin\n    return (SELECT AVG(discount) FROM customer_discounts);\nend ```", "assistant": "```csharp\nprivate double CalculateAverageDiscount()\n{\n    double averageDiscount = 0.0;\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"SELECT AVG(discount) FROM customer_discounts\",\n            connection))\n        {\n            object result = command.ExecuteScalar();\n            if (result != DBNull.Value)\n            {\n                averageDiscount = Convert.ToDouble(result);\n            }\n        }\n    }\n    return averageDiscount;\n}\n```\nThis C# method mirrors the Actian 4GL procedure to calculate the average discount given to customers.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that removes a product from the inventory in Actian 4GL to C#? Respond only in code: procedure remove_product(product_id=int) = begin\n    // Code to remove product\nend ```", "assistant": "```csharp\nprivate void RemoveProduct(int productId)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"DELETE FROM products WHERE product_id = @ProductId\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@ProductId\", productId);\n            command.ExecuteNonQuery();\n        }\n    }\n}\n```\nThis C# method mirrors the Actian 4GL procedure for removing a product from the inventory.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that calculates the total revenue generated in Actian 4GL to C#? Respond only in code: procedure calculate_total_revenue() = begin\n    return (SELECT SUM(amount) FROM sales);\nend ```", "assistant": "```csharp\nprivate double CalculateTotalRevenue()\n{\n    double totalRevenue = 0.0;\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"SELECT SUM(amount) FROM sales\",\n            connection))\n        {\n            object result = command.ExecuteScalar();\n            if (result != DBNull.Value)\n            {\n                totalRevenue = Convert.ToDouble(result);\n            }\n        }\n    }\n    return totalRevenue;\n}\n```\nThis C# method mirrors the Actian 4GL procedure to calculate the total revenue generated.\n"}
{"system": "You are an AI language model developed by IBM Research. You are a cautious assistant. You carefully follow instructions. You are helpful and harmless and you follow ethical guidelines and promote positive behavior.", "user": "How to convert a local procedure that updates customer records with a new address in Actian 4GL to C#? Respond only in code: procedure update_customer_address(customer_id=int, new_address=string) = begin\n    // Code to update customer address\nend ```", "assistant": "```csharp\nprivate void UpdateCustomerAddress(int customerId, string newAddress)\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\n            \"UPDATE customers SET address = @NewAddress WHERE customer_id = @CustomerId\",\n            connection))\n        {\n            command.Parameters.AddWithValue(\"@NewAddress\", newAddress);\n            command.Parameters.AddWithValue(\"@CustomerId\", customerId);\n            command.ExecuteNonQuery();\n        }\n    }\n}\n```\nThis C# method replicates the Actian 4GL procedure for updating customer records with a new address.\n"}

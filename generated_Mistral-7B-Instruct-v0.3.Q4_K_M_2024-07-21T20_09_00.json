[
    {
        "instruction": "Suppose there is a column 'balance' in your database table. How would you modify this SELECT statement to return only records with a balance greater than $500?",
        "input": "SELECT customer_id, name, email FROM customers WHERE status = 'Active';",
        "output": "SELECT customer_id, name, email FROM customers WHERE status = 'Active' AND balance > 500;",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Based on the response, write a statement that assigns the value of 125 to a variable named `result` in C#.",
        "input": "In C#, you declare variables using the type keyword followed by the name of the variable. For example: int result;",
        "output": "int result = 125;",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert the following 4GL IF statement into a C# conditional statement that takes in an integer variable `number` as input: IF number < 10 THEN output \"small\"; ELSE output \"large\".",
        "input": "int number = 7;",
        "output": "if (number < 10)\n{\n    Console.WriteLine(\"small\");\n}\nelse\n{\n    Console.WriteLine(\"large\");\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What is the equivalent LINQ query for this 4GL Select statement in C#? Respond only in code: SELECT AVG(price) FROM items WHERE category = 'Electronics';",
        "input": "List<Item> items = new List<Item>()\n{\n    new Item() { Category = \"Electronics\", Price = 100 },\n    new Item() { Category = \"Furniture\", Price = 200 },\n    new Item() { Category = \"Electronics\", Price = 150 },\n};",
        "output": "decimal avgPrice = items.Where(item => item.Category == \"Electronics\").Average(item => item.Price);",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What happens when you encounter a 4GL SELECT statement with aggregate functions, such as COUNT or AVG? How would you convert it to C# for OpenROAD? Please provide an example using the COUNT function.",
        "input": "SELECT COUNT(*) FROM customers WHERE status = 'Active' AND region = 'West';",
        "output": "In C#, you can use the SqlCommand's ExecuteScalar method with the COUNT(*) expression to retrieve the count of records that meet the specified conditions. Here's an example:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT COUNT(*) FROM customers WHERE status = @status AND region = @region\", connection))\n    {\n        command.Parameters.AddWithValue(\"@status\", \"Active\");\n        command.Parameters.AddWithValue(\"@region\", \"West\");\n        int count = (int)command.ExecuteScalar();\n        // Process data\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What happens when you encounter a 4GL SELECT statement that involves JOINs? How would you convert it to C# for OpenROAD? Please provide an example using the INNER JOIN keyword.",
        "input": "SELECT c.customer_id, o.order_id FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id WHERE c.status = 'Active';",
        "output": "In C#, you can use a SqlDataReader with two separate SqlCommand objects for the two tables to execute the INNER JOIN query. Here's an example:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    string customersQuery = \"SELECT customer_id FROM customers WHERE status = @status\";\n    using (SqlCommand customersCommand = new SqlCommand(customersQuery, connection))\n    {\n        customersCommand.Parameters.AddWithValue(\"@status\", \"Active\");\n        SqlDataReader customersReader = customersCommand.ExecuteReader();\n        List<int> customerIds = new List<int>();\n        while (customersReader.Read())\n        {\n            int customerId = (int)customersReader[\"customer_id\"];\n            customerIds.Add(customerId);\n        }\n    }\n    string ordersQuery = \"SELECT order_id FROM orders WHERE customer_id IN (@ids)\";\n    using (SqlCommand ordersCommand = new SqlCommand(ordersQuery, connection))\n    {\n        ordersCommand.Parameters.AddWithValue(\"@ids\", string.Join(\", \", customerIds));\n        SqlDataReader ordersReader = ordersCommand.ExecuteReader();\n        List<int> orderIds = new List<int>();\n        while (ordersReader.Read())\n        {\n            int orderId = (int)ordersReader[\"order_id\"];\n            orderIds.Add(orderId);\n        }\n        // Process data\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Assume we have a `Person` class in C# with the properties `FirstName`, `LastName`, and `Age`. We want to use LINQ (Language Integrated Query) to sort the people based on their age. Given an array of `Person` objects, how do you sort the people using LINQ?",
        "input": "Person[] people = { new Person(\"John\", \"Doe\", 25), new Person(\"Jane\", \"Smith\", 30), new Person(\"Bob\", \"Williams\", 20) };",
        "output": "var sortedPeople = people.OrderBy(p => p.Age);",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to convert a 4GL cursor FOR statement with an embedded SELECT statement into C#. Provide sample code and describe any changes needed in the syntax.",
        "input": "string connectionString = \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=mypassword;\";\nstring query = \"SELECT * FROM orders WHERE order_date > '2023-01-01'\";",
        "output": "In C#, you can use the ADO.NET `SqlCommand` and `SqlDataReader` objects to execute queries and iterate through the results, respectively. Here's how you could convert a 4GL cursor FOR statement with an embedded SELECT statement into C#:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int order_id = (int)reader[\"order_id\"];\n                DateTime order_date = (DateTime)reader[\"order_date\"];\n                // Process each order's data\n            }\n        }\n    }\n}\n```\nThe main changes are that the cursor FOR loop and embedded SELECT statement from the 4GL code are replaced with the ADO.NET `SqlDataReader` object. The `ExecuteReader()` method is called to run the query and iterate through the results.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert the following 4GL WHILE statement that retrieves rows from a cursor into C#: WHILE READ CURSOR myCursor DO ... END-DO",
        "input": "",
        "output": "In this example, I'll assume that `myCursor` is a pre-defined cursor containing the results of a SELECT query. To convert the 4GL WHILE statement into C#, you can use a `foreach` loop to iterate through each row in the `DataTable` associated with the cursor:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    // Assume myCursor is defined and contains query results\n    DataTable dataTable = myCursor.GetDataTable();\n    foreach (DataRow row in dataTable.Rows)\n    {\n        int order_id = (int)row[\"order_id\"];\n        DateTime order_date = (DateTime)row[\"order_date\"];\n        // Process each order's data\n    }\n}\n```\nThe 4GL WHILE statement with the embedded cursor is replaced by a C# `foreach` loop that iterates through the rows in the associated `DataTable`. Each row can be processed using index-based property access.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given the C# code, identify any syntax errors in it and correct them:\n```csharp\nif (number > = 10)\n{\n    Console.WriteLine(\"The number is equal or greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The number is less than 10\");\n}\n```",
        "input": "",
        "output": "if (number >= 10)\n{\n    Console.WriteLine(\"The number is equal or greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The number is less than 10\");\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you handle null or missing values in the data returned by a 4GL SELECT statement while converting it to C#? Provide an example of how you would ensure that your C# code can process such situations gracefully.",
        "input": "",
        "output": "In C#, you can use nullable data types like `int?`, `string?`, or `DateTime?` when interacting with databases to account for missing values or null values in the returned data from a 4GL SELECT statement. Here's an example:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    string query = \"SELECT user_id, username FROM users\";\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        SqlDataReader reader = command.ExecuteReader();\n        while (reader.Read())\n        {\n            int? user_id = reader.IsDBNull(0) ? null : (int?)reader[\"user_id\"];\n            string username = reader.IsDBNull(1) ? null : reader[\"username\"].ToString();\n            // Process data considering missing values\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What are some common issues that developers encounter when converting Actian 4GL SELECT statements to C# for OpenROAD? Provide one issue as an example and suggest a solution.",
        "input": "",
        "output": "A common issue that developers might face is the lack of support for subqueries in standard ADO.NET, which is used by default with OpenROAD when connecting to SQL Server. In such cases, you can either convert the subquery into a JOIN or create a temporary table and perform the query on it. Here's an example using a temporary table:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    string createTempTableQuery = \"CREATE TABLE #temp_table (user_id INT, last_login_date DATETIME)\";\n    string insertIntoTempTableQuery = \"INSERT INTO #temp_table SELECT user_id, last_login_date FROM users WHERE last_login_date > (SELECT MAX(last_login_date) FROM users)\";\n    string selectFromTempTableQuery = \"SELECT user_id FROM #temp_table WHERE last_login_date > @date\";\n    using (SqlCommand createTempTableCommand = new SqlCommand(createTempTableQuery, connection))\n    {\n        createTempTableCommand.ExecuteNonQuery();\n    }\n    using (SqlCommand insertIntoTempTableCommand = new SqlCommand(insertIntoTempTableQuery, connection))\n    {\n        insertIntoTempTableCommand.ExecuteNonQuery();\n    }\n    using (SqlCommand selectFromTempTableCommand = new SqlCommand(selectFromTempTableQuery, connection))\n    {\n        selectFromTempTableCommand.Parameters.AddWithValue(\"@date\", new DateTime(2023, 6, 1));\n        using (SqlDataReader reader = selectFromTempTableCommand.ExecuteReader())\n        {\n            // Process data\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you convert this 4GL Select statement into C#? Respond only in code: SELECT MAX(order_date), SUM(amount) FROM orders GROUP BY customer_id;",
        "input": "",
        "output": "using System;\nusing System.Data;\nusing System.Data.SqlClient;\npublic class SalesSummary\n{\n    public static void Main()\n    {\n        string connectionString = \"your_connection_string\";\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            using (SqlCommand command = new SqlCommand(\"SELECT MAX(order_date), SUM(amount) FROM orders GROUP BY customer_id\", connection))\n            {\n                using (SqlDataReader reader = command.ExecuteReader())\n                {\n                    if (reader.Read())\n                    {\n                        DateTime maxDate = reader.GetDateTime(0);\n                        decimal totalAmount = reader.GetDecimal(1);\n                        Console.WriteLine($\"Max Date: {maxDate}, Total Amount: {totalAmount}\");\n                    }\n                }\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to create a function to convert the SELECT statement in Actian 4GL to C#.",
        "input": "",
        "output": "To convert the SELECT statement from Actian 4GL to C#, you can use a function with parameters for the select clause, FROM clause, WHERE clause, and ORDER BY clause, if applicable. Here is an example of how this function would look like:\n```csharp\npublic void SelectStatement(string selectClause, string fromClause, string whereClause = \"\", string orderByClause = \"\")\n{\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand($\"SELECT {selectClause} FROM {fromClause} {whereClause} {orderByClause}\", connection))\n        {\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    // Process data\n                }\n            }\n        }\n    }\n}\n```\nYou can call the `SelectStatement` function and provide the appropriate parameters for each part of the SQL query. For example:\n```csharp\nstring selectClause = \"task_id, task_name, due_date\";\nstring fromClause = \"tasks\";\nstring whereClause = $\"WHERE assigned_to = '{assignee}'\"; // Assign value to `assignee` variable in your code.\nSelectStatement(selectClause, fromClause, whereClause);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain the differences in using SELECT statements in both Actian 4GL and C#. Provide examples to illustrate each case.",
        "input": "",
        "output": "In Actian 4GL, a SELECT statement is used to retrieve data from a table. The syntax generally follows SQL. For example:\n```\nSELECT student_id, first_name, last_name FROM students WHERE grade_level = 12;\n```\nIn C#, you can use ADO.NET to execute similar queries. You will need a connection object and a command object. Here is an example:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT student_id, first_name, last_name FROM students WHERE grade_level = @grade\", connection))\n    {\n        command.Parameters.AddWithValue(\"@grade\", 12);\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            // Process data\n        }\n    }\n}\n```\nAs you can see, the structure is quite similar but the syntax differs slightly. In C#, you need to explicitly use parameters for security reasons.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to handle missing values in a SELECT statement when converting Actian 4GL code to C#. Provide examples for both cases.",
        "input": "",
        "output": "In Actian 4GL, you can use the ISNULL or COALESCE function to handle missing values. For example:\n```\nSELECT COALESCE(address1, '') AS address FROM customers WHERE country = 'USA';\n```\nIn C#, if a column might have null values, it's best to check for null before using the value. Here is an example:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT address1 FROM customers WHERE country = @country\", connection))\n    {\n        command.Parameters.AddWithValue(\"@country\", \"USA\");\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                string address = reader[\"address1\"] == DBNull.Value ? \"\" : reader[\"address1\"].ToString();\n                // Process data\n            }\n        }\n    }\n}\n```\nIn this example, we check if the value is DBNull.Value before converting it to a string to avoid null reference exceptions.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to use a stored procedure in the context of converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "input": "In our existing application, we have a stored procedure called get_categories that returns all categories with their corresponding id and name. Here's the 4GL code snippet:\n```\nCALL GET_CATEGORIES() NO-LOCK RETURNING category_id, category_name;\n```",
        "output": "To use a stored procedure in C#, you can follow these steps:\n1. Create a `SqlCommand` object for your stored procedure and set its command type to `CommandType.StoredProcedure`.\n2. Add any required parameters as needed. In this case, no parameters are necessary for the get_categories stored procedure.\n3. Execute the command by calling its `ExecuteReader()` method or `ExecuteScalar()` method depending on whether you expect a result set or a single value.\n4. Process the returned data according to your application's requirements.\n\nHere is an example of converting the 4GL code snippet provided:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    using (SqlCommand command = new SqlCommand(\"GET_CATEGORIES\", connection))\n    {\n        command.CommandType = CommandType.StoredProcedure;\n        connection.Open();\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int categoryId = (int)reader[\"category_id\"];\n                string categoryName = reader[\"category_name\"].ToString();\n                // Process data\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this CURSOR declaration from Actian 4GL to C#: Declare a cursor cursor1 As Select project_id, project_name From projects Order By project_id;",
        "input": "In our application, we need to loop through each record of the projects table and fetch the corresponding id and name. Here's our 4GL code:\n```\nDeclare cursor cursor1 As Select project_id, project_name From projects Order By project_id;\nFetch Next At cursor1 Into :project_id, :project_name;\nLoop Until SQLCODE = -1\n    // Do something with project_id and project_name\n    Fetch Next At cursor1 Into :project_id, :project_name;\nEnd Loop;\n```",
        "output": "In C#, you can use a `SqlDataReader` along with the `ExecuteReader()` method to achieve a similar result. Here's an example:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    using (SqlCommand command = new SqlCommand(\"SELECT project_id, project_name FROM projects ORDER BY project_id\", connection))\n    {\n        connection.Open();\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int projectId = (int)reader[\"project_id\"];\n                string projectName = reader[\"project_name\"].ToString();\n                // Do something with project_id and project_name\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What should be done when an error occurs while processing records with the cursor in C#?",
        "input": "Here's the code we are using to process records with a cursor:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT project_id, project_name FROM projects ORDER BY project_id\", connection))\n    {\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int projectId = (int)reader[\"project_id\"];\n                string projectName = reader[\"project_name\"].ToString();\n                // Do something with project_id and project_name\n            }\n        }\n    }\n}\n```",
        "output": "You can use the `SqlException` class to handle errors in C#. Add a `try-catch` block around the code that processes records with the cursor. Here's an example:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    try\n    {\n        connection.Open();\n        using (SqlCommand command = new SqlCommand(\"SELECT project_id, project_name FROM projects ORDER BY project_id\", connection))\n        {\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    int projectId = (int)reader[\"project_id\"];\n                    string projectName = reader[\"project_name\"].ToString();\n                    // Do something with project_id and project_name\n                }\n            }\n        }\n    }\n    catch (SqlException ex)\n    {\n        Console.WriteLine(\"Error reading data: \" + ex.Message);\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How can you handle a situation where a specific row with certain conditions does not exist in the C# code?",
        "input": "We are writing an application that searches for a project based on the project ID and fetches details about it. Here's our code:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT project_id, project_name FROM projects WHERE project_id = @id\", connection))\n    {\n        command.Parameters.AddWithValue(\"@id\", 123);\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            if (reader.HasRows)\n            {\n                reader.Read();\n                int projectId = (int)reader[\"project_id\"];\n                string projectName = reader[\"project_name\"].ToString();\n                // Do something with project_id and project_name\n            }\n            else\n            {\n                Console.WriteLine(\"Project with ID 123 not found.\");\n            }\n        }\n    }\n}\n```",
        "output": "To handle the situation where a specific row does not exist, you can use an `if` statement to check if the `SqlDataReader.HasRows` property is false. If it's false, then the project with the specified ID was not found. Here's the updated code:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT project_id, project_name FROM projects WHERE project_id = @id\", connection))\n    {\n        command.Parameters.AddWithValue(\"@id\", 123);\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            if (!reader.HasRows)\n            {\n                Console.WriteLine(\"Project with ID 123 not found.\");\n                return;\n            }\n            reader.Read();\n            int projectId = (int)reader[\"project_id\"];\n            string projectName = reader[\"project_name\"].ToString();\n            // Do something with project_id and project_name\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "You are provided with a string containing multiple comma-separated IDs, and you want to split the string into an array of integers in C#. How would you do that? Provide an example.",
        "input": "Suppose you have the following string: \"1, 45, 100, 7, 62\".",
        "output": "In C#, you can split the comma-separated ID string using the `Split` method and cast each element to an integer:\n```\nstring[] ids = \"1, 45, 100, 7, 62\".Split(',');\nint[] intIds = Array.ConvertAll(ids, int.Parse);\nConsole.WriteLine(String.Join(\", \", intIds)); // Output: 1, 45, 100, 7, 62\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given an example of a complex query in Actian 4GL, convert it to an equivalent C# code for retrieving the same results.",
        "input": "In our application, we have the following 4GL SELECT statement that performs a complex search on multiple tables based on user input:\n```\nSELECT a.category_id, b.product_name, c.supplier_name, a.price, a.quantity\nFROM categories AS a JOIN products AS b ON a.category_id = b.category_id\nJOIN suppliers AS c ON b.supplier_id = c.supplier_id\nWHERE (a.category_name LIKE '%electronics%' OR b.product_name LIKE '%phone%') AND a.price <= 100 AND b.quantity > 10;\n```",
        "output": "Here is the C# code equivalent to your provided 4GL SELECT statement:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\n        \"SELECT a.category_id, b.product_name, c.supplier_name, a.price, a.quantity \" +\n        \"FROM categories AS a JOIN products AS b ON a.category_id = b.category_id \" +\n        \"JOIN suppliers AS c ON b.supplier_id = c.supplier_id \" +\n        \"WHERE (a.category_name LIKE '%electronics%' OR b.product_name LIKE '%phone%') AND a.price <= 100 AND b.quantity > 10\",\n        connection))\n    {\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int categoryId = (int)reader[\"category_id\"];\n                string productName = reader[\"product_name\"].ToString();\n                string supplierName = reader[\"supplier_name\"].ToString();\n                decimal price = reader.GetDecimal(3); // price column index is 3 since it's the fourth column returned\n                int quantity = (int)reader[4]; // quantity column index is 4 since it's the fifth column returned\n                // Process data\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL code snippet that updates multiple columns in a table to an equivalent C# code:\n```\nUPDATE orders SET order_status = 'shipped' WHERE order_id = <order id>;\n```",
        "input": "Assume the order id is provided as an integer variable named `orderId`.",
        "output": "In C#, you can update the order status for a given order ID with the following code:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string commandText = \"UPDATE orders SET order_status = 'shipped' WHERE order_id = @orderId\";\n    using (SqlCommand command = new SqlCommand(commandText, connection))\n    {\n        command.Parameters.AddWithValue(\"@orderId\", orderId);\n        connection.Open();\n        int affectedRows = command.ExecuteNonQuery();\n        // Handle any exceptions that may occur\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given a scenario where we have a complex IF-THEN statement in Actian 4GL and need to convert it into C#, provide an example for the same.",
        "input": "Consider this Actian 4GL code that calculates the discount based on the quantity of a product purchased:\n```\nIF (quantity > 10) AND (quantity <= 50) THEN\n    discount = 0.10;\nELSE IF (quantity > 50) THEN\n    discount = 0.20;\nELSE\n    discount = 0;\n```",
        "output": "Here's an equivalent C# code to handle the same scenario:\n```\ndecimal discount = 0;\nif (quantity > 10 && quantity <= 50)\n{\n    discount = 0.10m; // using decimal type for floating point numbers with more precision than float in C#\n}\nelse if (quantity > 50)\n{\n    discount = 0.20m;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What should be done if there are multiple columns with the same name in different tables and you want to perform a Join operation between them? Provide an example.",
        "input": "SELECT s.company_name, o.order_id FROM suppliers AS s INNER JOIN orders AS o ON s.supplier_id = o.supplier_id;",
        "output": "If the same column 'supplier_id' exists in both the Suppliers and Orders tables, you should use aliasing to distinguish them: SELECT s.company_name, o.order_id FROM suppliers AS s INNER JOIN orders AS o ON s.supplier_id = o.supplier_id;",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Suppose there is a stored procedure in Actian 4GL that retrieves data and performs some calculations. How can we translate this into a C# method? Provide an example with a simple calculation like adding two numbers.",
        "input": "DECLARE @result INT; EXECUTE myStoredProcedure :a, :b; SET @result = @result + 5; SELECT @result;",
        "output": "using (var connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (var command = new SqlCommand(\"myStoredProcedure\", connection))\n    {\n        command.Parameters.AddWithValue(\"@a\", a);\n        command.Parameters.AddWithValue(\"@b\", b);\n        object result = command.ExecuteScalar();\n        int finalResult = (int)result + 5;\n        Console.WriteLine(finalResult);\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL SQL statement to C#: UPDATE students SET first_name = 'John' WHERE student_id = 123456;",
        "input": "Here is an example student record that we would like to update. It has the following information: student_id (123456), first_name (Jane) and last_name (Doe). We want to change the first name to John.\n```\nUPDATE students SET first_name = 'John' WHERE student_id = 123456;\n```",
        "output": "To update a record in C#, you can use an `SqlCommand` and call its `ExecuteNonQuery()` method:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    using (SqlCommand command = new SqlCommand(\"UPDATE students SET first_name = @firstName WHERE student_id = @studentId\", connection))\n    {\n        command.Parameters.AddWithValue(\"@firstName\", \"John\");\n        command.Parameters.AddWithValue(\"@studentId\", 123456);\n        connection.Open();\n        int rowsAffected = command.ExecuteNonQuery();\n        // Check for success and handle errors as needed\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you convert a SQL aggregate function like COUNT(*) to an equivalent Linq expression in C#? What changes should be made when using LINQ with a list of anonymous types instead of a table or query result?",
        "input": "Here's our current implementation for counting the number of rows:\n```\nint rowCount = (from r in records select r).Count();\n```",
        "output": "To convert the COUNT(*) SQL aggregate function to an equivalent LINQ expression, you can simply call the `Count()` extension method on a queryable collection. Here's an example using a list of anonymous types:\n```\nvar records = new List<object>\n{\n    new { Id = 1, Name = \"John Doe\" },\n    new { Id = 2, Name = \"Jane Doe\" }\n};\nint rowCount = records.Select(r => r).Count(); // Returns 2\n```\nIn the case of LINQ with a list of anonymous types, the type inference automatically infers the anonymous type as the element type of the list. To use aggregate functions like `COUNT()`, you can select an expression for the elements using a lambda expression to explicitly specify the properties used in the query. For example:\n```\nint rowCount = records.Count(r => r != null); // Counts the number of non-null values\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Can you provide an example of a nested SELECT statement in Actian 4GL that needs to be converted to C# for OpenROAD using LINQ?",
        "input": "The following is the original Actian 4GL code:\n```\nSELECT DISTINCT customer_id, supplier_id FROM sales\nWHERE supplier_id IN ( SELECT supplier_id FROM suppliers WHERE country = 'USA' )\nORDER BY sales_date DESC;\n```",
        "output": "You can convert the above nested SELECT statement to C# using LINQ as follows:\n```\nusing System.Collections.Generic;\nusing System.Linq;\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    // Get all suppliers from 'USA'\n    var usaSuppliers = (from supplier in new SupplierDataContext().Suppliers\n                         where supplier.Country == \"USA\"\n                         select supplier.SupplierId).ToList();\n\n    // Get the sales records for those suppliers\n    var salesRecords = from sale in new SalesDataContext().Sales\n                        where usaSuppliers.Contains(sale.SupplierId)\n                        select new { sale.CustomerId, sale.SupplierId };\n\n    // Order the results by sales_date\n    var result = salesRecords.OrderByDescending(r => r.sales_date).Distinct();\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How can you fetch the top 5 customers with the highest total amount spent from the C# code?",
        "input": "Here's the SQL statement we have so far for getting the total amount spent by each customer:\n```\nSELECT SUM(amount) as TotalAmount, customer_id FROM orders GROUP BY customer_id;\n```",
        "output": "To get the top 5 customers with the highest total amount spent, you should use a `TOP` clause with an `ORDER BY` clause. Here's the modified SQL statement:\n```\nSELECT customer_id, SUM(amount) as TotalAmount FROM orders GROUP BY customer_id ORDER BY TotalAmount DESC;\n```\nYou can then fetch the results in your C# code by using the `SqlDataReader` to iterate through the rows and store the top 5 customers:\n```\nusing System;\nusing System.Data;\nusing System.Data.SqlClient;\npublic class SalesSummary\n{\n    public static void Main()\n    {\n        string connectionString = \"your_connection_string\";\n        using (SqlConnection connection = new SqlConnection(connectionString))\n        {\n            connection.Open();\n            using (SqlCommand command = new SqlCommand(\"SELECT customer_id, SUM(amount) as TotalAmount FROM orders GROUP BY customer_id ORDER BY TotalAmount DESC\", connection))\n            {\n                using (SqlDataReader reader = command.ExecuteReader())\n                {\n                    int topCustomersCount = 5;\n                    List<int> topCustomerIds = new List<int>();\n                    decimal totalSpent = 0;\n\n                    while (reader.Read() && topCustomerIds.Count < topCustomersCount)\n                    {\n                        int customerId = reader.GetInt32(0);\n                        decimal totalAmount = reader.GetDecimal(1);\n                        totalSpent += totalAmount;\n                        topCustomerIds.Add(customerId);\n                    }\n\n                    Console.WriteLine(\"Top \" + topCustomersCount + \" customers with the highest total amount spent:\");\n                    for (int i = 0; i < topCustomerIds.Count; i++)\n                    {\n                        int customerId = topCustomerIds[i];\n                        decimal totalAmount = totalSpent * ((decimal)i / topCustomersCount);\n                        Console.WriteLine(customerId + \": \" + totalAmount);\n                    }\n                }\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Assume that there is a table called 'Orders' with columns: order_id, customer_id, product_id, quantity. How would you write C# code to fetch all orders for a specific customer (customer_id = 123)?",
        "input": "",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\n        \"SELECT order_id, customer_id, product_id, quantity FROM Orders WHERE customer_id = @customerId\",\n        connection))\n    {\n        command.Parameters.AddWithValue(\"@customerId\", 123);\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int order_id = (int)reader[\"order_id\"];\n                int customer_id = (int)reader[\"customer_id\"];\n                int product_id = (int)reader[\"product_id\"];\n                int quantity = (int)reader[\"quantity\"];\n                // Process data\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Assume that there is a table called 'Transactions' with columns: transaction_id, account_number, amount, timestamp. How would you write C# code to fetch all transactions for an account (account_number = 123456789) in descending order by the timestamp?",
        "input": "",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\n        \"SELECT transaction_id, account_number, amount, timestamp FROM Transactions WHERE account_number = @accountNumber ORDER BY timestamp DESC\",\n        connection))\n    {\n        command.Parameters.AddWithValue(\"@accountNumber\", 123456789);\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int transaction_id = (int)reader[\"transaction_id\"];\n                int account_number = (int)reader[\"account_number\"];\n                decimal amount = (decimal)reader[\"amount\"];\n                DateTime timestamp = reader[\"timestamp\"].ToDateTime();\n                // Process data\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL code snippet that inserts a new row into a table to an equivalent C# code. For example, if the following 4GL statement inserts a new user with first name \"John\" and last name \"Doe\":\n```\nINSERT INTO users (first_name, last_name) VALUES ('John', 'Doe');\n```\nThe corresponding C# code would look like this:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string commandText = \"INSERT INTO users (first_name, last_name) VALUES (@firstName, @lastName)\";\n    using (SqlCommand command = new SqlCommand(commandText, connection))\n    {\n        command.Parameters.AddWithValue(\"@firstName\", firstName); // Assuming the first name is provided as a variable named firstName\n        command.Parameters.AddWithValue(\"@lastName\", lastName); // Assuming the last name is provided as a variable named lastName\n        connection.Open();\n        int affectedRows = command.ExecuteNonQuery();\n        // Handle any exceptions that may occur\n    }\n}\n```",
        "input": "Assume we have three variables, `categoryName`, `productName`, and `supplierId`, representing the new category name, product name, and supplier ID for a new item to be inserted. The table schema looks like this: items(id, category_name, product_name, supplier_id).",
        "output": "In C#, you can insert a new row into the items table using the provided variables as follows:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string commandText = \"INSERT INTO items (category_name, product_name, supplier_id) VALUES (@categoryName, @productName, @supplierId)\";\n    using (SqlCommand command = new SqlCommand(commandText, connection))\n    {\n        command.Parameters.AddWithValue(\"@categoryName\", categoryName);\n        command.Parameters.AddWithValue(\"@productName\", productName);\n        command.Parameters.AddWithValue(\"@supplierId\", supplierId);\n        connection.Open();\n        int affectedRows = command.ExecuteNonQuery();\n        // Handle any exceptions that may occur\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "When there are multiple records with the same value for a specific column, how can we ensure that only unique values of a specified column are selected from the result? Provide an example.",
        "input": "The following is a SELECT statement in Actian 4GL: SELECT DISTINCT department_id FROM employees;",
        "output": "This particular SELECT statement ensures that only unique values of 'department_id' from the Employees table are selected as the DISTINCT keyword removes duplicate rows.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Can you give an example of a complex subquery in Actian 4GL that requires conversion to C# using LINQ for OpenROAD?",
        "input": "Consider the following SELECT statement in Actian 4GL:\n```\nSELECT e.employee_name, o.order_date\nFROM employees AS e\nJOIN orders AS o ON e.employee_id = o.employee_id\nWHERE EXISTS ( SELECT 1 FROM order_items AS oi WHERE oi.order_id = o.order_id AND oi.quantity > 50 );\n```",
        "output": "Here's how you can convert the complex subquery to C# using LINQ:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n\n    var result = from e in new EmployeesDataContext().Employees\n                 join o in new OrdersDataContext().Orders on e.EmployeeId equals o.EmployeeId into groupedOrders\n                 where groupedOrders.Any(o => groupedOrders.SelectMany(oi => new OrderItemsDataContext().OrderItems).Where(oi => oi.OrderId == o.OrderId && oi.Quantity > 50).Count() > 0)\n                 select new { employee_name = e.EmployeeName, order_date = o.OrderDate };\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you convert this aggregate function in a 4GL SELECT statement to C#? Respond only in code: SELECT AVG(age) as avgAge FROM employees.",
        "input": "",
        "output": "double avgAge;\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT AVG(age) as avgAge FROM employees\", connection))\n    {\n        avgAge = Convert.ToDouble(command.ExecuteScalar());\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Suppose you have a complex query involving multiple tables and multiple conditions. How would you convert this 4GL JOIN statement to C#? Respond only in code: SELECT e.id, o.order_number FROM employees as e INNER JOIN orders as o ON e.employee_id = o.employee_id WHERE e.age > 30 AND o.total_amount > 100;",
        "input": "",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT e.id, o.order_number FROM employees as e INNER JOIN orders as o ON e.employee_id = o.employee_id WHERE e.age > @age AND o.total_amount > @amount\", connection))\n    {\n        command.Parameters.AddWithValue(\"@age\", 31); // Consider age >= 30 for inclusive range\n        command.Parameters.AddWithValue(\"@amount\", 101); // Consider amount <= 100 for exclusive range\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int employeeId = (int)reader[\"id\"];\n                string orderNumber = reader[\"order_number\"].ToString();\n                // Process data\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How do you ensure optimal performance when converting large sets of data from Actian 4GL Select statements into C#? Provide examples or tips on how to minimize the impact on system resources and maintain efficient processing.",
        "input": "",
        "output": "To optimize performance when working with large datasets in C#, consider the following practices:\n1. Use connection pooling to reduce the overhead of creating new database connections repeatedly.\n2. Execute SQL queries as efficiently as possible by minimizing the use of subqueries or multiple JOIN operations, especially in situations involving large datasets.\n3. Implement pagination to process data in smaller chunks instead of loading all data at once. This helps reduce memory usage and improves overall performance.\n4. Use indexes on columns used in WHERE clauses or ORDER BY statements for faster data retrieval.\n5. Use stored procedures to encapsulate frequently used queries, which can improve query execution time by reusing precompiled execution plans.\n6. Limit the number of result columns returned from database queries to only those that are essential for your application's requirements.\n7. Dispose of resources (connections, commands, and data readers) properly using `using` blocks or `IDisposable`.\n8. Use asynchronous programming techniques when working with large datasets to allow other tasks to continue executing while database operations take place.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Suppose you have a list of orders where each order contains an order ID, customer name, product name, quantity, and price. How would you create a LINQ query to get the total sales for a specific customer? Assume that the orders are represented as a List<Order> with Order being a custom class with the specified properties.",
        "input": "```\nList<Order> orders = new List<Order>()\n{\n    new Order() { Id = 1, CustomerName = \"Alice\", ProductName = \"Product A\", Quantity = 3, Price = 10m },\n    new Order() { Id = 2, CustomerName = \"Bob\", ProductName = \"Product B\", Quantity = 5, Price = 15m },\n    new Order() { Id = 3, CustomerName = \"Alice\", ProductName = \"Product C\", Quantity = 2, Price = 7.5m }\n};\n```",
        "output": "```\ndecimal totalSalesForCustomer = orders\n    .Where(o => o.CustomerName == \"Alice\")\n    .Sum(o => o.Quantity * o.Price);\n```\nThis LINQ query filters the `orders` list for orders where the customer name is \"Alice\" using the `Where()` method, and then sums up the product of the quantity and price of each matching order using the `Sum()` extension method to obtain the total sales for the customer.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# function that takes an input parameter `sortExpression`, which is a string containing the name of a column and the sort direction (ASC or DESC), and sorts a DataTable based on this expression. If the sort direction is not provided, assume ASC as the default order. The sorted DataTable should be returned as the output.",
        "input": "```csharp\nDataTable myDataTable = LoadDataFromDb();  // Assume this method loads data from database and returns a DataTable object\nstring sortExpression = \"ORDER_ID DESC\";\n```",
        "output": "```csharp\npublic DataTable SortDataTable(DataTable dataTable, string sortExpression)\n{\n    if (sortExpression == null || string.IsNullOrWhiteSpace(sortExpression))\n        return dataTable.DefaultView.Sort(\"ORDER_ID\", System.Data.SortOrder.Ascending).ToTable();\n\n    DataView dataView = dataTable.DefaultView;\n    string[] columnsAndDirections = sortExpression.Split(' ');\n    if (columnsAndDirections.Length != 2)\n        throw new ArgumentException(\"Invalid sort expression format\");\n\n    string columnName = columnsAndDirections[0];\n    SortOrder sortOrder;\n    switch (columnsAndDirections[1].ToUpper())\n    {\n        case \"ASC\":\n            sortOrder = System.Data.SortOrder.Ascending;\n            break;\n        case \"DESC\":\n            sortOrder = System.Data.SortOrder.Descending;\n            break;\n        default:\n            throw new ArgumentException(\"Invalid sort direction\");\n    }\n    dataView.Sort = columnName + \" \" + sortOrder.ToString();\n    return dataView.ToTable();\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# method that generates an SQL INSERT statement to insert a new row into the `ORDERS` table based on a given set of order details. The input parameter should be a custom `OrderDetails` class object containing the properties `OrderID`, `CustomerID`, `OrderDate`, `TotalAmount`, and `ShippingAddress`. The generated INSERT statement should include placeholders for all input parameters and their corresponding values.",
        "input": "```csharp\npublic class OrderDetails\n{\n    public int OrderID { get; set; }\n    public int CustomerID { get; set; }\n    public DateTime OrderDate { get; set; }\n    public decimal TotalAmount { get; set; }\n    public string ShippingAddress { get; set; }\n}\nOrderDetails newOrder = new OrderDetails()\n{\n    OrderID = 1034,\n    CustomerID = 23,\n    OrderDate = DateTime.Now,\n    TotalAmount = 687.99M,\n    ShippingAddress = \"123 Main Street, Anytown, USA\"\n};\n```",
        "output": "```csharp\npublic string GenerateInsertOrderStatement(OrderDetails orderDetails)\n{\n    return $\"INSERT INTO ORDERS (OrderID, CustomerID, OrderDate, TotalAmount, ShippingAddress)\" +\n           $\"VALUES (@OrderID, @CustomerID, @OrderDate, @TotalAmount, @ShippingAddress)\";\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Show an example of how to convert a subquery within a SELECT statement in Actian 4GL to C# using LINQ, OpenROAD and ADO.NET.",
        "input": "The following is the original Actian 4GL code:\n```\nSELECT order_id FROM orders WHERE total >= ( SELECT AVG(total) FROM orders );\n```",
        "output": "To convert the above subquery within a SELECT statement to C# using LINQ and ADO.NET, you can do it as follows:\n```\nusing System;\nusing System.Linq;\nusing System.Data.SqlClient;\n\npublic static void ConvertSubQuery()\n{\n    string connectionString = @\"Server=(local)\\SQLEXPRESS;Database=OrdersDB;Trusted_Connection=Yes;\";\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        connection.Open();\n        // Create command objects for the inner and outer queries\n        string innerQuery = \"SELECT AVG(total) FROM orders\";\n        SqlCommand innerCmd = new SqlCommand(innerQuery, connection);\n        double avgTotal = (double)innerCmd.ExecuteScalar();\n\n        string outerQuery = \"SELECT order_id FROM orders WHERE total >= @avg_total\";\n        SqlCommand outerCmd = new SqlCommand(outerQuery, connection);\n        outerCmd.Parameters.AddWithValue(\"@avg_total\", avgTotal);\n        using (SqlDataReader reader = outerCmd.ExecuteReader())\n        {\n            // Process results\n            while (reader.Read())\n            {\n                Console.WriteLine(reader[\"order_id\"]);\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Create a table named `Students` in C# using ADO.NET and populate it with some sample student data.",
        "input": "```csharp\nusing System;\nusing System.Data.SqlClient;\n\nnamespace StudentManagement\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var connectionString = \"Your_Connection_String\"; // Replace this with your actual database connection string\n\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n                using (SqlCommand command = new SqlCommand(\"CREATE TABLE Students (student_id INT PRIMARY KEY, first_name NVARCHAR(50), last_name NVARCHAR(50), grade_level INT)\", connection))\n                {\n                    command.ExecuteNonQuery();\n                }\n                using (SqlCommand command = new SqlCommand(\"INSERT INTO Students VALUES (1, 'John', 'Doe', 12);\", connection))\n                {\n                    command.ExecuteNonQuery();\n                }\n                using (SqlCommand command = new SqlCommand(\"INSERT INTO Students VALUES (2, 'Jane', 'Smith', 10);\", connection))\n                {\n                    command.ExecuteNonQuery();\n                }\n            }\n        }\n    }\n}\n```",
        "output": "The provided C# code creates a table named `Students` in the database with three columns: student\\_id (INT), first\\_name (NVARCHAR(50)), last\\_name (NVARCHAR(50)), and grade\\_level (INT). The primary key is set to be student\\_id. It then inserts sample data for two students into the table.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you fetch all rows of a table named `Students` in C# using ADO.NET and process each row?",
        "input": "",
        "output": "Here is an example of fetching all rows from the `Students` table in C#:\n```csharp\nusing System;\nusing System.Data.SqlClient;\n\nnamespace StudentManagement\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var connectionString = \"Your_Connection_String\"; // Replace this with your actual database connection string\n\n            using (SqlConnection connection = new SqlConnection(connectionString))\n            {\n                connection.Open();\n                using (SqlCommand command = new SqlCommand(\"SELECT * FROM Students\", connection))\n                {\n                    using (SqlDataReader reader = command.ExecuteReader())\n                    {\n                        while (reader.Read())\n                        {\n                            int studentId = (int)reader[\"student_id\"];\n                            string firstName = reader[\"first_name\"].ToString();\n                            string lastName = reader[\"last_name\"].ToString();\n                            int gradeLevel = (int)reader[\"grade_level\"];\n                            // Process each row here\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\nIn this example, the code fetches all rows from the `Students` table and processes each row by reading column values using the `SqlDataReader.Read()` method. The processing part is left out because it depends on the actual requirements.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What should be done when a 4GL SELECT statement requires filtering based on multiple conditions or clauses? How can it be converted to C# for OpenROAD? Please provide an example using the WHERE keyword.",
        "input": "SELECT p.product_id, p.product_name FROM products p WHERE (p.category = 'Electronics' AND p.price <= 100) OR (p.category = 'Toys' AND p.price <= 25);",
        "output": "In C#, you can use a `SqlDataReader` with a `SqlCommand` object to execute the filtering query using the `WHERE` keyword. Here's an example:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    string sqlQuery = \"SELECT p.product_id, p.product_name FROM products p WHERE ((p.category = @category1 AND p.price <= @price1) OR (p.category = @category2 AND p.price <= @price2))\";\n    using (SqlCommand command = new SqlCommand(sqlQuery, connection))\n    {\n        command.Parameters.AddWithValue(\"@category1\", \"Electronics\");\n        command.Parameters.AddWithValue(\"@price1\", 100);\n        command.Parameters.AddWithValue(\"@category2\", \"Toys\");\n        command.Parameters.AddWithValue(\"@price2\", 25);\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int productId = (int)reader[\"product_id\"];\n                string productName = reader[\"product_name\"].ToString();\n                // Do something with product_id and product_name\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How should you handle subqueries in 4GL SELECT statements when converting them to C# for OpenROAD? Please provide an example using the subquery.",
        "input": "SELECT c.customer_name FROM customers c WHERE c.id IN (SELECT customer_id FROM orders WHERE total > 100);",
        "output": "In C#, you can use a nested `SqlDataReader` with two separate `SqlCommand` objects to execute the subquery first and then use the result to filter the main query. Here's an example:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    string ordersQuery = \"SELECT customer_id FROM orders WHERE total > 100\";\n    using (SqlCommand ordersCommand = new SqlCommand(ordersQuery, connection))\n    {\n        using (SqlDataReader ordersReader = ordersCommand.ExecuteReader())\n        {\n            List<int> customerIds = new List<int>();\n            while (ordersReader.Read())\n            {\n                int customerId = (int)ordersReader[\"customer_id\"];\n                customerIds.Add(customerId);\n            }\n        }\n    }\n    string customersQuery = \"SELECT c.customer_name FROM customers c WHERE c.id IN (@ids)\";\n    using (SqlCommand customersCommand = new SqlCommand(customersQuery, connection))\n    {\n        customersCommand.Parameters.AddWithValue(\"@ids\", string.Join(\", \", customerIds));\n        using (SqlDataReader reader = customersCommand.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                string customerName = reader[\"customer_name\"].ToString();\n                // Do something with customer_name\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# function that takes in a collection of `Product` objects as input, sorts the collection by price using the Bubble Sort algorithm and returns it. The `Product` class has two properties: `product_id` (int) and `price` (decimal).",
        "input": "Product[] products = new Product[] { new Product(1, 25), new Product(4, 70), new Product(3, 50) };",
        "output": "```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\npublic class Product : IComparable<Product>\n{\n    public int product_id { get; set; }\n    public decimal price { get; set; }\n    public int CompareTo(Product other)\n    {\n        return this.price.CompareTo(other.price);\n    }\n}\npublic static void BubbleSort(List<Product> products)\n{\n    for (int i = 0; i < products.Count - 1; i++)\n    {\n        bool swapped = false;\n        for (int j = 0; j < products.Count - 1 - i; j++)\n        {\n            if (products[j].CompareTo(products[j + 1]) > 0)\n            {\n                Product temp = products[j];\n                products[j] = products[j + 1];\n                products[j + 1] = temp;\n                swapped = true;\n            }\n        }\n        if (!swapped) break;\n    }\n}\nList<Product> sorted_products = new List<Product>(products);\nBubbleSort(sorted_products);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Provide an example for converting a 4GL WHILE loop that performs iterative updates to the `inventory` table using an `index_value`. How can it be implemented in C#?",
        "input": "DECLARE index_value INTEGER;\nWHILE index_value < 10\n   READ index_value FROM inventory;\n   IF quantity_on_hand[index_value] > 0 THEN\n      UPDATE inventory SET quantity_on_hand = (quantity_on_hand[index_value] - 1) WHERE inventory_id = index_value;\n   ELSE\n      PRINT \"Insufficient stock for this item.\";\n   END IF;\nEND WHILE;",
        "output": "In C#, you can use a `for` loop to iterate and perform the updates on the `inventory` table using an SQL command. Here's an example:\n```\nstring connectionString = \"...\"; // Replace with your database connection string\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    int index_value = 0;\n    decimal quantityOnHand;\n    while (index_value < 10)\n    {\n        using (SqlCommand command = new SqlCommand($\"SELECT TOP 1 quantity_on_hand FROM inventory WHERE inventory_id = {index_value}\", connection))\n        {\n            quantityOnHand = Convert.ToDecimal(command.ExecuteScalar());\n            if (quantityOnHand > 0)\n            {\n                using (SqlCommand updateCommand = new SqlCommand($\"UPDATE inventory SET quantity_on_hand = {quantityOnHand - 1} WHERE inventory_id = {index_value}\", connection))\n                {\n                    updateCommand.ExecuteNonQuery();\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"Insufficient stock for this item.\");\n            }\n        }\n        index_value++;\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you handle a condition in C# when the user wants to update a `Person` object if their age is over 18? Assume that the `UpdatePerson()` method takes a `Person` object as an argument.",
        "input": "Person personToUpdate = new Person(\"John\", \"Doe\", 17);",
        "output": "if (personToUpdate.Age > 18)\n{\n    // update code here\n}\nelse\n{\n    Console.WriteLine(\"Error: Person is underage.\");\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How do you find the average of an array in C#? Assume the numbers are stored in a float[] called `myNumbers`.",
        "input": "float[] myNumbers = { 1.5f, 2.7f, 3.9f };",
        "output": "float sum = myNumbers.Sum();\nfloat average = sum / myNumbers.Length;",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert the 4GL DELETE statement to C#: DELETE FROM orders WHERE employee_id = '001' AND order_status = 'Shipped'",
        "input": "In this case, we have a table named \"Orders\" with columns: `order_id`, `employee_id`, `product_id`, `order_date`, and `order_status`. The data we want to remove are orders having the employee ID '001' and status 'Shipped'.",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string query = \"DELETE FROM Orders WHERE employee_id = '001' AND order_status = 'Shipped'\";\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        int rowsAffected = command.ExecuteNonQuery();\n        Console.WriteLine($\"Deleted {rowsAffected} orders.\");\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Transform the 4GL UPDATE statement into C#: UPDATE products SET price = 29.99 WHERE product_id = '001' AND category = 'Electronics'",
        "input": "In this case, we have a table named \"Products\" with columns: `product_id`, `category`, and `price`. The data we want to modify are the products having the ID '001' in the Electronics category.",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string query = \"UPDATE Products SET price = 29.99 WHERE product_id = '001' AND category = 'Electronics'\";\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(query, connection))\n    {\n        int rowsAffected = command.ExecuteNonQuery();\n        Console.WriteLine($\"Modified {rowsAffected} products.\");\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this 4GL SELECT statement that calculates the average price of all items in the `inventory` table, ignoring any null values:\n```vbnet\nLET total_price AS DECIMAL = 0;\nSELECT AVG(price) FROM inventory WHERE price IS NOT NULL;\n```",
        "input": "(optional)\n<noinput>",
        "output": "In C#, you can use the `SqlCommand` and `ExecuteScalar()` method to calculate the average price of all items in the `inventory` table, ignoring any null values:\n\n```csharp\nstring connectionString = \"...\"; // Replace with your database connection string\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT AVG(price) FROM inventory WHERE price IS NOT NULL\", connection))\n    {\n        decimal averagePrice = Convert.ToDecimal(command.ExecuteScalar());\n        // Use the calculated average price here\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Modify this 4GL SELECT statement that sorts the orders by their order_date in descending order:\n```sql\nSELECT * FROM orders ORDER BY order_date DESC;\n```",
        "input": "(optional)\n<noinput>",
        "output": "In C#, you can use the `SqlCommand`, `OrderByDescending()`, and `AsEnumerable()` methods to sort the orders by their `order_date` in descending order:\n\n```csharp\nstring connectionString = \"...\"; // Replace with your database connection string\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT * FROM orders\", connection))\n    {\n        var orderList = command.ExecuteReader()\n            .Cast<SqlDataRecord>() // Cast to IEnumerable<SqlDataRecord> for each row\n            .AsEnumerable() // Create a DataTable-like IEnumerable<DataRow>\n            .OrderByDescending(r => r.GetDateTime(0)) // Sort by order_date in descending order\n            .CopyToDataTable(); // Convert the ordered data to a DataTable for further processing, if needed\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How do you handle column aliases when converting 4GL SELECT statements to C#? Provide an example of a SELECT statement that renames columns using aliases and explains how to achieve it in C#.",
        "input": "SELECT order_id AS OrderID, customer_name AS CustomerName FROM customers c WHERE ...;",
        "output": "In this example, the original 4GL SELECT statement aliases column names as \"OrderID\" for `order_id` and \"CustomerName\" for `customer_name`. To achieve similar results in C#, you can define an anonymous type or use custom properties when querying data from a DataReader.\n\nHere's an example using anonymous types:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string sqlQuery = @\"SELECT order_id AS OrderID, customer_name AS CustomerName FROM customers c WHERE ... \"; // Complete the query with appropriate filters and conditions\n    using (SqlCommand command = new SqlCommand(sqlQuery, connection))\n    {\n        connection.Open();\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                var data = reader.GetValues().Select((value, index) => value switch\n                {\n                    _ => index switch\n                    {\n                        0 => \"OrderID\",\n                        1 => \"CustomerName\",\n                        _ => throw new Exception($\"Unexpected column found: {index}\")\n                }).ToArray();\n                // Process the renamed columns as \"data[0]\" for OrderID and \"data[1]\" for CustomerName\n            }\n        }\n    }\n}\n```\nIn this example, anonymous types are used to create dynamic properties with custom names. The `GetValues()` method gets the data from the DataReader, and an array of values is created using a switch statement to map each value to its corresponding renamed column. The resulting columns can then be accessed by their assigned names in the array.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you use LINQ (Language-Integrated Query) to filter orders with a total cost greater than 1000 in C#?",
        "input": "List<Order> orders = new List<Order>() { /* sample orders data */ };",
        "output": "Here's an example of using LINQ to filter orders with a total cost greater than 1000 in C#:\n```csharp\nvar expensiveOrders = orders.Where(order => order.TotalCost > 1000);\n// Now the 'expensiveOrders' list only contains orders with a total cost greater than 1000.\n```\nIn this example, we use the `Where()` method provided by LINQ to filter orders based on the condition specified in the lambda expression. The lambda expression checks if the `TotalCost` property of each order object is greater than 1000. This results in a new list called `expensiveOrders` that only contains orders with total costs above the threshold.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to create a stored procedure that accepts two parameters, updates the specified columns, and returns the affected row count using C# (SQL Server).",
        "input": "string connectionString = \"Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=mypassword;\";\nstring query = @\"CREATE PROCEDURE UpdateStudentGradeLevel\n\t@student_id INT,\n\t@new_grade_level INT\nAS\nBEGIN\n\tUPDATE Students\n\tSET grade_level = @new_grade_level\n\tWHERE student_id = @student_id;\n\tSELECT @@ROWCOUNT AS affectedRows;\nEND\";",
        "output": "In this example, we create a stored procedure called `UpdateStudentGradeLevel` that accepts two parameters (`@student_id` and `@new_grade_level`) and updates the corresponding `grade_level` in the `Students` table based on the provided student ID. Here's how you could execute this stored procedure using C#:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"UpdateStudentGradeLevel\", connection))\n    {\n        command.CommandType = System.Data.CommandType.StoredProcedure;\n        command.Parameters.AddWithValue(\"@student_id\", studentId);\n        command.Parameters.AddWithValue(\"@new_grade_level\", newGradeLevel);\n        object affectedRows = command.ExecuteScalar(); // This will return the affected row count\n    }\n}\n```\nThe main steps are creating and executing the stored procedure using a `SqlCommand` object, passing the necessary parameters to the stored procedure, and retrieving the affected row count by calling the `ExecuteScalar()` method. Keep in mind that you need to replace `studentId` and `newGradeLevel` with actual values from your code.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Suppose you have a list of products where each product has an ID, name, description, and price. You want to get the lowest-priced item in the list. How would you use LINQ to accomplish this?",
        "input": "```\nList<Product> products = new List<Product>()\n{\n    new Product() { Id = 1, Name = \"Pencil\", Description = \"A graphite writing tool.\", Price = 0.25m },\n    new Product() { Id = 2, Name = \"Eraser\", Description = \"Used for erasing pencil marks.\", Price = 0.3m },\n    new Product() { Id = 3, Name = \"Notebook\", Description = \"A writing tool with ruled paper.\", Price = 1.5m }\n};\n```",
        "output": "```\ndecimal lowestPrice = products\n    .Min(p => p.Price);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you convert this 4GL Select statement into C#? Respond only in code: SELECT customer_id, first_name, last_name FROM customers WHERE state = 'CA';",
        "input": "",
        "output": "using (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\n        \"SELECT customer_id, first_name, last_name FROM customers WHERE state = @state\",\n        connection))\n    {\n        command.Parameters.AddWithValue(\"@state\", \"CA\");\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int customerId = (int)reader[\"customer_id\"];\n                string firstName = reader[\"first_name\"].ToString();\n                string lastName = reader[\"last_name\"].ToString();\n                // Process data\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Suppose there exists a 4GL stored procedure with the following parameters: `@searchTerm` and `@sortColumn`. How would you write a C# method to call this stored procedure and pass parameters, fetching the results and handling exceptions?",
        "input": "The following is an example of a 4GL stored procedure named `SearchProducts` that accepts two input parameters: `@searchTerm` and `@sortColumn`. The stored procedure returns all products where the product name or description contains the specified search term and sorts the returned results based on the specified sort column.\n```4gl\nPROCEDURE SearchProducts(searchTerm STRING, sortColumn VARCHAR)\n    SELECT * FROM products WHERE (name LIKE '%' || searchTerm || '%' OR description LIKE '%' || searchTerm || '%') ORDER BY @sortColumn;\nEND-PROCEDURE.\n```",
        "output": "Here is an example C# method that calls the above 4GL stored procedure, passing in parameters `searchTerm` and `sortColumn`, fetching the results, handling exceptions, and returning the data as a list of products:\n```csharp\npublic List<Product> SearchProducts(string searchTerm, string sortColumn)\n{\n    var result = new List<Product>();\n\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        try\n        {\n            connection.Open();\n\n            using (SqlCommand command = new SqlCommand(\"SearchProducts\", connection))\n            {\n                command.CommandType = CommandType.StoredProcedure;\n                command.Parameters.AddWithValue(\"@searchTerm\", searchTerm);\n                command.Parameters.AddWithValue(\"@sortColumn\", sortColumn);\n\n                using (SqlDataReader reader = command.ExecuteReader())\n                {\n                    while (reader.Read())\n                    {\n                        int productId = (int)reader[\"product_id\"];\n                        string productName = reader[\"product_name\"].ToString();\n                        string description = reader[\"description\"].ToString();\n                        decimal price = (decimal)reader[\"price\"];\n\n                        result.Add(new Product\n                        {\n                            Id = productId,\n                            Name = productName,\n                            Description = description,\n                            Price = price\n                        });\n                    }\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n        }\n    }\n\n    return result;\n}\n```\nThis C# method uses ADO.NET to execute the stored procedure `SearchProducts`, passing in the `searchTerm` and `sortColumn` parameters, handling exceptions, fetching the results as rows, creating a list of `Product` objects, and finally returning the list of products.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "In some situations, you may encounter multiple JOIN conditions in a single SELECT statement. How do you handle this scenario when converting 4GL to C#? Provide an example of such a query with multiple join conditions and explain the necessary modifications for C#.",
        "input": "Consider the following Actian 4GL query with two join conditions:\n```\nSELECT a.item_id, b.category_name, c.supplier_name\nFROM items AS a LEFT JOIN categories AS b ON a.category_id = b.category_id AND b.active = 'Y'\nJOIN suppliers AS c ON a.supplier_id = c.supplier_id;\n```",
        "output": "To convert the given example to C#, you will need to change multiple JOIN conditions into separate JOIN clauses and handle the conditional logic using WHERE clauses as needed. Here's an example:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string sqlQuery = @\"SELECT a.item_id, b.category_name, c.supplier_name \" +\n                        \"FROM items AS a \" +\n                        \"JOIN categories AS b ON a.category_id = b.category_id \" +\n                        \"LEFT JOIN ( SELECT * FROM categories WHERE active = 'Y' ) AS filteredB ON b.category_id = filteredB.category_id \" +\n                        \"JOIN suppliers AS c ON a.supplier_id = c.supplier_id\";\n    using (SqlCommand command = new SqlCommand(sqlQuery, connection))\n    {\n        connection.Open();\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int itemId = reader[\"item_id\"].GetInt32(0);\n                string categoryName = reader[\"category_name\"].GetString(1);\n                string supplierName = reader[\"supplier_name\"].GetString(2);\n                // Process the data\n            }\n        }\n    }\n}\n```\nIn this example, we first separate the multiple join conditions into individual JOIN clauses. We then create a subquery to filter active categories using the \"LEFT JOIN\" clause to ensure all items are returned regardless of the category status. The rest remains similar, and the results can be processed as needed.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Some 4GL SELECT statements use aggregate functions like COUNT(), AVG(), SUM(), or MAX() along with GROUP BY clauses. How do you convert these queries to C#? Provide an example of such a query and the equivalent code in C#.",
        "input": "Here is a simple Actian 4GL query using COUNT(DISTINCT) and GROUP BY:\n```\nSELECT COUNT(DISTINCT b.product_id) AS TotalProducts, SUM(a.quantity) AS TotalQuantity FROM orders AS a JOIN lineitems AS b ON a.order_id = b.order_id GROUP BY a.customer_name;\n```",
        "output": "To convert the given example to C#, you will use aggregate functions along with GROUP BY using LINQ's GroupBy method. Here's an example:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string sqlQuery = @\"SELECT COUNT(DISTINCT b.product_id) AS TotalProducts, SUM(a.quantity) AS TotalQuantity \" +\n                        \"FROM orders AS a JOIN lineitems AS b ON a.order_id = b.order_id \" +\n                        \"GROUP BY a.customer_name\";\n    using (SqlCommand command = new SqlCommand(sqlQuery, connection))\n    {\n        connection.Open();\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int totalProducts = reader[\"TotalProducts\"].GetInt32(0);\n                decimal totalQuantity = reader[\"TotalQuantity\"].GetDecimal(1);\n                // Process the data\n                string customerName = reader[\"customer_name\"]; // In this example, there's no GROUP BY column returned. You might need to modify this depending on the query structure.\n            }\n        }\n    }\n}\n```\nIn this example, we first write the SQL query in C# using string interpolation. Then we execute the query and process the results. In LINQ, we use the `GroupBy()` method to group the results based on a specific column (in this case, `a.customer_name`), which allows us to calculate aggregate functions for each group separately. The rest of the code remains similar.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert the following Actian 4GL SELECT statement to a C# method that retrieves data from the same table:\n\nSELECT COUNT(*) FROM myTable WHERE column1 = 'value1' AND column2 IN ('value2', 'value3');",
        "input": "",
        "output": "using (var connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (var command = new SqlCommand(\"SELECT COUNT(*) FROM myTable WHERE column1 = @column1 AND column2 IN (@column2)\", connection))\n    {\n        command.Parameters.AddWithValue(\"@column1\", \"value1\");\n        StringBuilder builder = new StringBuilder();\n        foreach (string value in new string[] { \"value2\", \"value3\" })\n            builder.AppendFormat(\"'{0}', \", value);\n        command.Parameters.AddWithValue(\"@column2\", builder.ToString().TrimEnd(','));\n        int count = (int)command.ExecuteScalar();\n        Console.WriteLine(count);\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# method that iterates through the records returned by a SELECT statement in Actian 4GL and performs a calculation on each record. The calculation should be a simple summation of a column called total_balance from a table called accounts.",
        "input": "",
        "output": "using (var connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (var command = new SqlCommand(\"SELECT total_balance FROM accounts\", connection))\n    {\n        using (var reader = command.ExecuteReader())\n        {\n            decimal sum = 0;\n            while (reader.Read())\n            {\n                sum += reader[\"total_balance\"] as decimal?;\n            }\n            Console.WriteLine(sum);\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Describe how to convert a 4GL conditional statement, using the IF-THEN-ELSE construct, to C#. Provide sample code with relevant changes in syntax for both the true and false branches of the condition.",
        "input": "If myVariable < 10 Then\n    Print \"myVariable is less than 10\"\nElse\n    Print \"myVariable is greater than or equal to 10\"\nEnd If",
        "output": "In C#, you can use conditional statements like if-else blocks for similar logic. Here's the equivalent code in C#:\n\n```csharp\nif (myVariable < 10)\n{\n    Console.WriteLine(\"myVariable is less than 10\");\n}\nelse\n{\n    Console.WriteLine(\"myVariable is greater than or equal to 10\");\n}\n```\n\nIn this code, the IF statement checks whether `myVariable` is less than 10. If it is, the code inside the first curly braces (`{ }`) will be executed. Otherwise, the code inside the else block will be executed. Note that the Print statement in the original 4GL code has been replaced with Console.WriteLine to output a message in C#.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given a complex SQL query with multiple JOIN statements, filtering conditions, and nested subqueries, what are some steps you would follow to convert it into an equivalent LINQ expression in C#? Provide a step-by-step breakdown.",
        "input": "Here's the original Actian 4GL SELECT statement:\n```sql\nSELECT p.name, o.order_date, oi.item_description\nFROM orders AS o\nJOIN order_items AS oi ON o.id = oi.order_id\nJOIN products AS p ON oi.product_id = p.id\nWHERE o.customer_id = 12345 AND o.status = 'Shipped' AND\n      (oi.quantity < 10 OR oi.price > 50) AND EXISTS(SELECT 1 FROM promotions AS pr WHERE pr.code = 'SUMMER_SPECIAL' AND pr.start_date <= o.order_date AND pr.end_date >= o.order_date);\n```",
        "output": "To convert the given SQL query to an equivalent LINQ expression in C#, follow these steps:\n1. Define your data objects as classes with matching property names and types. For example:\n\n```csharp\npublic class Order\n{\n    public int Id { get; set; }\n    public string CustomerId { get; set; }\n    public DateTime? OrderDate { get; set; }\n    public string Status { get; set; }\n}\n\npublic class OrderItem\n{\n    public int OrderId { get; set; }\n    public int ProductId { get; set; }\n    public int Quantity { get; set; }\n    public decimal Price { get; set; }\n}\n\npublic class Product\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n\npublic class Promotion\n{\n    public string Code { get; set; }\n    public DateTime StartDate { get; set; }\n    public DateTime EndDate { get; set; }\n}\n```\n2. Load your data into lists or queryable collections:\n\n```csharp\nList<Order> orders = ... // Load from database or other source\nList<OrderItem> orderItems = ...\nList<Product> products = ...\nList<Promotion> promotions = ...\n```\n3. Create the LINQ query using extension methods, method syntax, and query syntax:\n\n```csharp\nvar result = from o in orders\n             join oi in orderItems on o.Id equals oi.OrderId\n             join p in products on oi.ProductId equals p.Id\n             where o.CustomerId == 12345 && o.Status == \"Shipped\" &&\n                   (oi.Quantity < 10 || oi.Price > 50) &&\n                   promotions.Any(pr => pr.Code == \"SUMMER_SPECIAL\" && pr.StartDate <= o.OrderDate && pr.EndDate >= o.OrderDate)\n             select new { Name = p.Name, OrderDate = o.OrderDate, ItemDescription = oi.ItemDescription };\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Find a solution in C# to perform a JOIN operation on two tables (tableA and tableB) based on a common column 'id' in both tables. Assume that the SELECT statement is: SELECT tableA.column1, tableB.column3 FROM tableA INNER JOIN tableB ON tableA.id = tableB.id WHERE tableA.column2 = 'value';",
        "input": "",
        "output": "using (var connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (var command = new SqlCommand(\"SELECT tableA.column1, tableB.column3 FROM tableA INNER JOIN tableB ON tableA.id = tableB.id WHERE tableA.column2 = @column2\", connection))\n    {\n        command.Parameters.AddWithValue(\"@column2\", \"value\");\n        using (var reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                Console.WriteLine($\"{reader[\"tableA.column1\"]}, {reader[\"tableB.column3\"]}\");\n            }\n        }\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Implement a C# method for updating multiple rows in a table based on the following Actian 4GL UPDATE statement: UPDATE myTable SET column1 = 'newValue' WHERE column2 = 'oldValue';",
        "input": "",
        "output": "using (var connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (var command = new SqlCommand(\"UPDATE myTable SET column1 = @newValue WHERE column2 = @oldValue\", connection))\n    {\n        command.Parameters.AddWithValue(\"@newValue\", \"newValue\");\n        command.Parameters.AddWithValue(\"@oldValue\", \"oldValue\");\n        int rowsAffected = command.ExecuteNonQuery();\n        Console.WriteLine(rowsAffected);\n    }\n}",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Identify the differences between Actian 4GL's cursor and C#'s `SqlDataReader`.",
        "input": "Here are the examples of using cursors in both 4GL and C#:\n\n4GL:\n```\nDECLARE c_project CURSOR FOR SELECT project_id, project_name FROM projects;\nOPEN c_project;\nFETCH NEXT FROM c_project INTO :projectId, :projectName;\n```\nC#:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    using (SqlCommand command = new SqlCommand(\"SELECT project_id, project_name FROM projects\", connection))\n    {\n        connection.Open();\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int projectId = (int)reader[\"project_id\"];\n                string projectName = reader[\"project_name\"].ToString();\n                // Do something with project_id and project_name\n            }\n        }\n    }\n}\n```",
        "output": "The primary differences between Actian 4GL's cursor (DECLARE, OPEN, FETCH) and C#'s `SqlDataReader` are:\n1. Syntax: In 4GL, cursors involve declarations, opening, fetching records using a cursor variable. In C#, `SqlDataReader` is used as a read-only data stream with no need for explicit declarations or opening/closing steps.\n2. Record navigation: Navigation through the records in 4GL's cursor requires calling `FETCH NEXT`. With C#'s `SqlDataReader`, you can use the `Read()` method to check for the next row and navigate through it.\n3. Exceptions handling: In 4GL, you must handle errors explicitly using a `WHENEVER SQLERROR` or similar construct. In C#, you can utilize the built-in exception handling system (e.g., try-catch blocks).",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Create a C# function that returns the number of employees who have a salary above the median salary from the employees table.",
        "input": "Here's the structure of our database table:\n```\nCREATE TABLE employees (\n    employee_id INTEGER PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    position VARCHAR(50),\n    salary DECIMAL(12, 2),\n    age INT\n);\n```",
        "output": "First, you need to find the median salary in C#. Here's a helper function `GetMedianSalary()`. Then use it to filter employees with salaries above the median:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT COUNT(*), SUM(salary) as totalSalary FROM employees\", connection))\n    {\n        int count = Convert.ToInt32(command.ExecuteScalar());\n        double medianSalary = GetMedianSalary(count, Convert.ToDouble(command.ExecuteScalar()));\n        using (SqlCommand filterCommand = new SqlCommand(\"SELECT COUNT(*) as numEmployees FROM employees WHERE salary > @medianSalary\", connection))\n        {\n            filterCommand.Parameters.AddWithValue(\"@medianSalary\", medianSalary);\n            int numEmployees = Convert.ToInt32(filterCommand.ExecuteScalar());\n            Console.WriteLine($\"Number of employees with salary above the median: {numEmployees}\");\n        }\n    }\n}\n\ndouble GetMedianSalary(int count, double totalSalary)\n{\n    return (count % 2 == 0) ? (totalSalary / count * 2) : (totalSalary / count + totalSalary / (count - 1)) / 2;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How to convert a 4GL SQL JOIN statement that uses a nested subquery for filtering the records into C#? Provide a sample using the employees and departments tables.",
        "input": "Here's the 4GL SQL JOIN statement we are trying to convert:\n```\nSELECT e.*, d.* FROM employees e INNER JOIN (SELECT department_id, MAX(employee_id) as maxEmpId FROM employees WHERE age > 30 GROUP BY department_id) d ON e.department_id = d.department_id AND e.employee_id = d.maxEmpId;\n```\nThe structure of the employees and departments tables:\n```\nCREATE TABLE employees (\n    employee_id INTEGER PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    position VARCHAR(50),\n    salary DECIMAL(12, 2),\n    age INT,\n    department_id INTEGER\n);\n\nCREATE TABLE departments (\n    department_id INTEGER PRIMARY KEY,\n    department_name VARCHAR(100)\n);\n```",
        "output": "First, you can write a C# function to retrieve the maximum employee ID for each department based on age:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT department_id, MAX(employee_id) as maxEmpId FROM employees WHERE age > 30 GROUP BY department_id\", connection))\n    {\n        SqlDataReader reader = command.ExecuteReader();\n        var departmentsAndMaxEmps = new Dictionary<int, int>();\n        while (reader.Read())\n        {\n            int departmentId = (int)reader[\"department_id\"];\n            int maxEmpId = (int)reader[\"maxEmpId\"];\n            departmentsAndMaxEmps[departmentId] = maxEmpId;\n        }\n    }\n}\n```\nThen, you can use the dictionary to join the employees and departments tables:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT e.*, d.* FROM employees e INNER JOIN departments d ON e.department_id = @departmentId\", connection))\n    {\n        foreach (KeyValuePair<int, int> departmentAndMaxEmpId in departmentsAndMaxEmps)\n        {\n            command.Parameters.AddWithValue(\"@departmentId\", departmentAndMaxEmpId.Key);\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    // Do something with the joined records from employees and departments tables for a specific department\n                }\n            }\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to handle a NULL value in a 4GL SELECT statement when converting it to C#. Provide an example of dealing with null values while iterating through the data using a foreach loop.",
        "input": "SELECT customer_name, product_price FROM orders WHERE customer_id = 123;\nIn this dataset, sometimes there are no products for specific customers. So, it is possible that the product_price column will be NULL for some records in the resulting set.",
        "output": "When dealing with null values in the product_price column, you can use a conditional check within your foreach loop in C# to handle these cases properly. Here's an example:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\n        \"SELECT customer_name, product_price FROM orders WHERE customer_id = @customerId\",\n        connection))\n    {\n        command.Parameters.AddWithValue(\"@customerId\", 123);\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                string customerName = (string)reader[\"customer_name\"];\n                double? productPrice = reader.IsDBNull(1) ? null : (double?)reader[\"product_price\"];\n                if (productPrice != null)\n                {\n                    // Process valid data\n                    Console.WriteLine($\"Customer Name: {customerName}, Product Price: {productPrice}\");\n                }\n            }\n        }\n    }\n}\n```\nIn this code snippet, `reader.IsDBNull(1)` checks whether the value at index 1 (product_price column in our case) is null or not. If it's null, we assign `null` to the `productPrice` variable; otherwise, we set it to the actual product price.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given this 4GL SELECT statement: SELECT AVG(salary) as average_salary FROM employees WHERE department_id = 3; What would be an equivalent C# code for getting the average salary of employees in a specific department?",
        "input": "",
        "output": "To get the average salary of employees in a specific department using C#, you can use the `SqlCommand` and `SqlDataReader` classes to execute and read the result of the query. Here's an example:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\n        \"SELECT AVG(salary) as average_salary FROM employees WHERE department_id = @departmentId\",\n        connection))\n    {\n        command.Parameters.AddWithValue(\"@departmentId\", 3); // Department id of the specific department\n        object averageSalary = command.ExecuteScalar(); // Execute the query and get the result as a single value\n\n        if (averageSalary != null)\n            Console.WriteLine($\"Average Salary in the specified department: {averageSalary}\");\n        else\n            Console.WriteLine(\"No data found for the specified department.\");\n    }\n}\n```\nIn this code, `ExecuteScalar()` is used to execute a query that returns a single value (the average salary in our case). The result of the query will be stored in the `averageSalary` variable. If there are no results for the specified department, `ExecuteScalar()` will return null, and an appropriate message will be displayed.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Create a method called `GetProductById` which accepts an input parameter `productId`, calls the corresponding stored procedure to fetch the product details based on the id, and returns the fetched product as an object of type Product.",
        "input": "Suppose there is a stored procedure called `GetProductById` that takes in one parameter: `@productId`. The stored procedure retrieves all details related to the product with the specified id. Here's an example of what the 4GL code for this stored procedure looks like:\n```4gl\nPROCEDURE GetProductById(productId INTEGER)\n    SELECT * FROM products WHERE product_id = @productId;\nEND-PROCEDURE.\n```",
        "output": "Here's an example C# method called `GetProductById` that accepts a parameter `productId`, calls the stored procedure, retrieves the data, maps it to a Product object, and returns it:\n\n```csharp\npublic Product GetProductById(int productId)\n{\n    Product product = null;\n\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        try\n        {\n            connection.Open();\n\n            using (SqlCommand command = new SqlCommand(\"GetProductById\", connection))\n            {\n                command.CommandType = CommandType.StoredProcedure;\n                command.Parameters.AddWithValue(\"@productId\", productId);\n\n                using (SqlDataReader reader = command.ExecuteReader())\n                {\n                    if (reader.Read())\n                    {\n                        int id = (int)reader[\"product_id\"];\n                        string name = reader[\"product_name\"].ToString();\n                        decimal price = (decimal)reader[\"price\"];\n                        // Map remaining columns as needed...\n                        product = new Product\n                        {\n                            Id = id,\n                            Name = name,\n                            Price = price\n                        };\n                    }\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n        }\n    }\n\n    return product;\n}\n```\nThis C# method utilizes the `GetProductById` stored procedure to retrieve a specific product based on its id, maps the returned data to a Product object, and returns the populated Product instance.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you refactor the previous code examples to use prepared statements for parameterizing SQL queries?",
        "input": "",
        "output": "Using prepared statements instead of parameterized queries will not significantly alter the existing C# code. However, the preparation process must be performed before executing the query multiple times with different values. Here's a refactored version of the `GetProductById` method that uses prepared statements:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string sqlQuery = \"SELECT * FROM products WHERE product_id = @productId\";\n    using (SqlCommand command = new SqlCommand(sqlQuery, connection))\n    {\n        command.Prepare(); // Preparing the command\n\n        command.Parameters.AddWithValue(\"@productId\", productId);\n\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            if (reader.Read())\n            {\n                int id = (int)reader[\"product_id\"];\n                string name = reader[\"product_name\"].ToString();\n                decimal price = (decimal)reader[\"price\"];\n                // Map remaining columns as needed...\n                product = new Product\n                {\n                    Id = id,\n                    Name = name,\n                    Price = price\n                };\n            }\n        }\n    }\n}\n```\nThis refactored version of the method prepares the query only once before executing it multiple times with different values for the `@productId` parameter. Preparing statements can reduce the overhead when reusing the same query multiple times, improving overall performance.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Suppose we have a list of tasks with their respective statuses. How would you convert a function that updates the status of a specific task in 4GL to an equivalent C# method? For example, in 4GL, the function `UPDATE TASK SET status = 'Completed' WHERE task_id = '123';`",
        "input": "```vbnet\n// List of tasks with their respective statuses.\nList<Task> tasks = new List<Task>\n{\n    new Task { Id = 1, Status = \"In Progress\" },\n    new Task { Id = 2, Status = \"Completed\" },\n    new Task { Id = 3, Status = \"Not Started\" }\n};\n// Update a specific task with ID '456' and set its status to 'Completed'.\n```",
        "output": "You can create an extension method in C# for updating the `Status` of a specific `Task` object:\n\n```csharp\npublic static class TaskExtensions\n{\n    public static void UpdateStatus(this Task task, string newStatus) =>\n        // Replace \"your_database_connection_string\" with your database connection string.\n        using (SqlConnection connection = new SqlConnection(\"your_database_connection_string\"))\n        {\n            connection.Open();\n            string commandText = $\"UPDATE tasks SET status = '{newStatus}' WHERE id = {task.Id}\";\n            using (SqlCommand command = new SqlCommand(commandText, connection))\n                command.ExecuteNonQuery();\n        }\n}\n```\nNow you can update the `Status` of a specific task in your list:\n\n```csharp\n// Update the status of Task with ID '456' to 'Completed'.\ntasks[1].UpdateStatus(\"Completed\");\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "In 4GL, when performing a join between two tables, you use the `JOIN` statement. How would you create an equivalent C# LINQ query that performs the same function for joining 'orders' and 'customers' tables based on their common field 'customer_id', where 'customer_id' is an integer type?",
        "input": "(optional)\n<noinput>",
        "output": "In C#, you can create a LINQ query to join the 'Orders' and 'Customers' tables using the `Join()` method. Assuming that both tables have fields like `Id`, `CustomerId`, and `OrderDate`, here is an example of how you would perform such a join:\n\n```csharp\nvar ordersWithCustomerInfo =\n    from order in dbContext.Orders\n    join customer in dbContext.Customers on order.CustomerId equals customer.Id\n    select new { Order = order, Customer = customer };\n```\nThis LINQ query returns a sequence of anonymous types that contain properties `Order` and `Customer`, each with the data from both tables where they match based on their common field `customer_id`.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# method to convert this 4GL SELECT statement that retrieves employee names and their department IDs: `SELECT name, department_id FROM employees`.",
        "input": "(optional)\n<noinput>",
        "output": "Here's a simple C# method that retrieves employee names and their department IDs using ADO.NET:\n\n```csharp\nusing System;\nusing System.Data.SqlClient;\nusing System.Collections.Generic;\n\npublic class Employee\n{\n    public string Name { get; set; }\n    public int DepartmentId { get; set; }\n}\n\npublic List<Employee> GetEmployees(string connectionString)\n{\n    List<Employee> employees = new List<Employee>();\n\n    using (SqlConnection connection = new SqlConnection(connectionString))\n    {\n        string query = \"SELECT name, department_id FROM employees\";\n        using (SqlCommand command = new SqlCommand(query, connection))\n        {\n            connection.Open();\n            using (SqlDataReader reader = command.ExecuteReader())\n            {\n                while (reader.Read())\n                {\n                    Employee employee = new Employee()\n                    {\n                        Name = reader[\"name\"].ToString(),\n                        DepartmentId = Convert.ToInt32(reader[\"department_id\"])\n                    };\n                    employees.Add(employee);\n                }\n            }\n        }\n    }\n    return employees;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given a list of C# methods that perform different actions on the `items` table in Actian, implement a method to update the stock for each item according to their IDs. Assume that you have an object `itemUpdateData` with properties like `ItemId`, `NewStockQuantity`, and other necessary objects.",
        "input": "(optional)\n```csharp\npublic void AddItem(int itemId, int quantity)\n{\n    // ...\n}\n\npublic bool CheckStock(int itemId, int requiredQuantity)\n{\n    // ...\n}\n\n// ... other methods\n```",
        "output": "Here's a simple implementation of the `UpdateItemStock()` method that updates the stock for each item according to their IDs using an example data object:\n\n```csharp\npublic void UpdateItemStock(int[] itemIds, int newStockQuantity)\n{\n    // Loop through all given item ids and update their stock\n    foreach (int id in itemIds)\n    {\n        ItemUpdateData itemData = new ItemUpdateData()\n        {\n            ItemId = id,\n            NewStockQuantity = newStockQuantity\n        };\n\n        // Check if there's enough stock to update\n        if (CheckStock(id, newStockQuantity))\n        {\n            AddItem(id, newStockQuantity);\n        }\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# function to convert a given Actian 4GL SELECT statement into a corresponding SQL SELECT statement for OpenROAD. Assume the 4GL SELECT statement sorts by columns 'name' and 'age'.",
        "input": "string fourglSelect = \"SELECT * FROM users ORDER BY name, age\";",
        "output": "```csharp\npublic string ConvertFourGlToSql(string fourglSelect)\n{\n    // Replace the asterisk (*) with the column names.\n    // Assuming you know all the column names in the \"users\" table\n    string[] columnNames = { \"id\", \"name\", \"age\", \"email\", \"phone\" };\n    string sqlSelect = $\"SELECT {string.Join(\", \", columnNames)} FROM users ORDER BY name, age\";\n    return sqlSelect;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Rewrite the given 4GL code snippet as a C# method that takes in an integer array of `order_ids` and outputs the order details for each order ID. The output format should be as follows: Order Id: [order id], Status: [status]. Assume there is an existing `GetOrderDetails()` method that returns a dictionary with the keys as order IDs and values as dictionaries containing the order details (e.g., status, total).",
        "input": "Assume the integer array of order IDs is named `orderIds`.",
        "output": "In C#, you can write the following code to get the order details for multiple orders:\n```\npublic void GetOrderDetailsForMultipleOrders(int[] orderIds)\n{\n    foreach (var id in orderIds)\n    {\n        var orderDetails = GetOrderDetails()[id];\n        Console.WriteLine($\"Order Id: {id}, Status: {orderDetails[\"status\"]}\");\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert the following 4GL code snippet that updates a specific order's status to a new status (e.g., \"shipped\") based on an order ID:\n\n```sql UPDATE orders SET status = 'Shipped' WHERE id = 123; ```",
        "input": "Assuming the variable `orderId` contains the ID of the specific order to be updated and we want to set its status to \"processing\".",
        "output": "To update an order with the provided ID and set its status to \"processing\" in C#, use the following code:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string commandText = \"UPDATE orders SET status = @newStatus WHERE id = @orderId\";\n    using (SqlCommand command = new SqlCommand(commandText, connection))\n    {\n        command.Parameters.AddWithValue(\"@newStatus\", \"processing\");\n        command.Parameters.AddWithValue(\"@orderId\", orderId);\n        connection.Open();\n        int affectedRows = command.ExecuteNonQuery(); // Handle any exceptions that may occur\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Explain how to retrieve the total number of products in a specific category using Actian 4GL and provide an equivalent C# code snippet for OpenROAD. Assume we have a table named \"products\" with columns: id, name, category_id, and stock. We also have a variable `categoryId` that contains the ID of the specific category to filter results by.",
        "input": "(optional)\n<noinput>",
        "output": "In Actian 4GL:\n```sql\nDECLARE TOTAL INTEGER;\nLET FETCH NEXT products WHERE category_id = :categoryId AND ROWCOUNT FROM products INTO :TOTAL;\nCOPY :TOTAL TO OUTPUT;\n```\nIn C# for OpenROAD:\n```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string commandText = \"SELECT COUNT(*) AS Total FROM products WHERE category_id = @categoryId\";\n    using (SqlCommand command = new SqlCommand(commandText, connection))\n    {\n        command.Parameters.AddWithValue(\"@categoryId\", categoryId);\n        connection.Open();\n        int totalProducts = (int)command.ExecuteScalar(); // Handle any exceptions that may occur\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Write a C# method that takes a date as input (in YYYYMMDD format), converts it into the timestamp format (yyyy-MM-ddTHH:mm:ss), and returns it.",
        "input": "Consider the variable `inputDate` contains \"20231225\".",
        "output": "```\nusing System;\npublic string ConvertInputDateToTimestamp(string inputDate)\n{\n    int year = int.Parse(inputDate.Substring(0, 4));\n    int month = int.Parse(inputDate.Substring(4, 2));\n    int day = int.Parse(inputDate.Substring(6, 2));\n    string result = $\"{year}-{month:D2}-{day:D2}T00:00:00\"; // For now, we are setting the time to midnight (00:00:00)\n    return result;\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given a customer's ID and their recent transactions, write a C# method that calculates the total amount spent by the customer. The transaction list consists of objects containing properties `id`, `date`, and `amount`.",
        "input": "Assume the variable `customerId` contains the customer's ID, the variable `transactionsList` is an array of `Transaction` objects (where each object has id, date, and amount), and we want to calculate the total amount spent by that specific customer.",
        "output": "```\nusing System;\nusing System.Linq;\npublic decimal CalculateTotalAmountSpentByCustomer(int customerId, Transaction[] transactionsList)\n{\n    return transactionsList.Where(t => t.id == customerId).Sum(t => t.amount); // Use Linq's Where and Sum to filter the transactions for the specified customer and calculate the total amount spent\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you convert a 4GL UPDATE statement that updates multiple columns based on conditions to C#? Provide sample code with relevant changes in syntax and logic for updating rows in a database table.",
        "input": "Here is an example of an Actian 4GL UPDATE statement that modifies the quantity column when the product_name matches \"Laptop\" and updates the price if both conditions are met:\n```\nUPDATE lineitems SET\n    quantity = 20,\n    price = 1500.99\nWHERE product_name = \"Laptop\" AND stock > 15;\n```",
        "output": "In C#, you can use ADO.NET to execute SQL update statements with conditions. Here's the equivalent code in C#:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string sqlQuery = @\"UPDATE lineitems SET quantity = 20, price = 1500.99 WHERE product_name = 'Laptop' AND stock > 15\";\n    using (SqlCommand command = new SqlCommand(sqlQuery, connection))\n    {\n        connection.Open();\n        int rowsAffected = command.ExecuteNonQuery();\n        Console.WriteLine($\"{rowsAffected} row(s) updated.\");\n    }\n}\n```\nIn this example, we write the SQL query in C# and execute it using an SqlCommand object. The ExecuteNonQuery() method is used to update data in the database. Note that ADO.NET will return the number of rows affected by the update statement, which is printed on the console for verification purposes.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert a simple 4GL SELECT statement that retrieves all columns from a table into C#. Provide sample code with relevant changes in syntax and logic to retrieve records using ADO.NET.",
        "input": "Here's an example of an Actian 4GL query selecting all columns from the orders table:\n```\nSELECT * FROM orders;\n```",
        "output": "To retrieve records from a table in C#, you can use ADO.NET. Here is an example using an SqlConnection object and executing a SELECT statement:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string sqlQuery = \"SELECT * FROM orders\";\n    using (SqlCommand command = new SqlCommand(sqlQuery, connection))\n    {\n        connection.Open();\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int order_id = reader[\"order_id\"].GetInt32(0);\n                string customer_name = reader[\"customer_name\"];\n                // ... Other columns and their data types as needed\n            }\n        }\n    }\n}\n```\nIn this example, we write the SQL query in C# and execute it using an SqlCommand object. The SqlDataReader object is used to iterate through each record and retrieve its columns. Note that you may need to modify the code depending on the table structure and column data types.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Suppose you have an array of integers, each representing a different salary in dollars for employees. Sort the array in ascending order (lowest to highest).",
        "input": "Consider the following array: {5000, 8000, 3000, 9000, 4000}.",
        "output": "Here is the sorted version of the array: {3000, 4000, 5000, 8000, 9000}. This can be done using Array.Sort() method in C#.\n```csharp\nint[] salaries = new int[] {5000, 8000, 3000, 9000, 4000};\nArray.Sort(salaries);\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Given a string representing a date in \"yyyy-MM-ddTHH:mm:ss\" format, extract the year and month from the given string.",
        "input": "Consider the variable `inputDate` contains \"2023-12-25T10:00:00\".",
        "output": "In this C# method, you can extract the year and month from a date string in \"yyyy-MM-ddTHH:mm:ss\" format.\n```csharp\nusing System;\n\npublic (int year, int month) ExtractYearAndMonthFromDateTimeString(string inputDate)\n{\n    DateTime datetime = Convert.ToDateTime(inputDate); // Make sure to convert the string to a DateTime object first!\n    int year = datetime.Year;\n    int month = datetime.Month;\n    return (year, month);\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "What are the differences in how you would handle NULL values when converting 4GL SELECT statements for OpenROAD to C#? Explain using a specific example and demonstrate with code.",
        "input": "SELECT name, email FROM customers WHERE status IS NOT NULL;",
        "output": "In this 4GL example, only rows containing non-null values for the `status` column are returned. When converting this query to C#, you should check for nullable values explicitly as SQL Null is not directly supported in C#. You can use conditional statements and the `HasValues` property of DataReader to handle NULL values:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string sqlQuery = @\"SELECT name, email FROM customers WHERE status IS NOT NULL\"; // Complete the query with appropriate filters and conditions\n    using (SqlCommand command = new SqlCommand(sqlQuery, connection))\n    {\n        connection.Open();\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read() && !reader.IsDBNull(0) && !reader.IsDBNull(1)) // Check for null values for name and email columns\n            {\n                string name = reader[\"name\"].ToString();\n                string email = reader[\"email\"].ToString();\n                // Process data\n            }\n        }\n    }\n}\n```\nIn this example, the `Read()` method checks if a row exists before processing its values. The `IsDBNull()` method is used to check whether the current column value is null or not. If either of the columns (name and email) are found as null during the loop iteration, the code exits immediately by skipping that row.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How do you handle joins when converting 4GL SELECT statements for OpenROAD to C#? Explain with an example and demonstrate using code.",
        "input": "SELECT o.order_id, c.customer_name FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE ...;",
        "output": "This 4GL SELECT statement performs a join between the `orders` (o) and `customers` (c) tables using the `customer_id` field as a common key. To achieve similar results in C#, use the `JOIN` method when querying data from a DataReader:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string sqlQuery = @\"SELECT o.order_id, c.customer_name FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE ... \"; // Complete the query with appropriate filters and conditions\n    using (SqlCommand command = new SqlCommand(sqlQuery, connection))\n    {\n        connection.Open();\n        using (SqlDataReader reader = command.ExecuteReader())\n        {\n            while (reader.Read())\n            {\n                int orderId = reader.GetInt32(0); // Get the order_id column value from the current row\n                string customerName = reader.GetString(1); // Get the customer_name column value from the current row\n                // Process data\n            }\n        }\n    }\n}\n```\nIn this example, you can query multiple tables using the `JOIN` method with the appropriate columns as a key to combine rows from both tables. The resulting joined rows are processed using a while loop, and you can access column values from the DataReader using its index (starting at 0).",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "In C#, how do you convert a string to uppercase without using the .ToUpper() method? Provide a simple function definition for this purpose.",
        "input": "string myString = \"Hello World\";",
        "output": "```csharp\nstring ToUpperCase(string input)\n{\n    char[] array = input.ToCharArray();\n    Array.ForEach(array, x => x = Char.ToUpper(x));\n    return new string(array);\n}\n// Usage:\nstring myString = \"Hello World\";\nstring upperCaseString = ToUpperCase(myString); // now 'upperCaseString' is \"HELLO WORLD\" in uppercase.\n```\nIn this example, we define a simple function called `ToUpperCase()`. The function takes a string as input, converts the characters to an array of chars, loops through the array and capitalizes each character using the `Char.ToUpper()` method, and finally returns a new string with the updated case.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How can you implement a recursive function that generates all possible combinations of a given length k from an array of unique integers? Provide a function definition with comments to explain your code.",
        "input": "int[] numbers = new int[] { 1, 2, 3 };\nint k = 2;",
        "output": "```csharp\n// Helper method for generating all combinations using recursion.\nvoid GenerateCombinations(int[] arr, int length, List<List<int>> result, List<int> currentCombination, int index)\n{\n    // Base case: if the current combination reaches the desired length k, add it to the results list.\n    if (currentCombination.Count == length)\n    {\n        result.Add(new List<int>(currentCombination));\n        return;\n    }\n\n    // Recursive case: consider all elements from the index onwards in the array for the next combination.\n    for (int i = index; i < arr.Length; i++)\n    {\n        // Add the current element to the current combination and recursively call the function for the remaining elements.\n        currentCombination.Add(arr[i]);\n        GenerateCombinations(arr, length, result, currentCombination, i + 1);\n        // Remove the added element from the current combination for the next iteration.\n        currentCombination.RemoveAt(currentCombination.Count - 1);\n    }\n}\n\n// Main method to generate all combinations of a given length k from an array of unique integers.\nList<List<int>> GenerateCombinations(int[] arr, int k)\n{\n    // Initialize the result list and the current combination.\n    List<List<int>> result = new List<List<int>>();\n    List<int> currentCombination = new List<int>();\n\n    // Call the helper method to generate all combinations.\n    GenerateCombinations(arr, k, result, currentCombination, 0);\n    return result;\n}\n// Usage:\nint[] numbers = new int[] { 1, 2, 3 };\nint k = 2;\nList<List<int>> combinations = GenerateCombinations(numbers, k); // generates the following combinations: [(1, 2), (1, 3), (2, 3)]\n```\nIn this example, we define a recursive function called `GenerateCombinations()`. The function takes an array of unique integers and the desired combination length as input. It uses a helper method called `GenerateCombinations()` to do the heavy lifting using recursion. The helper method generates all combinations of a given length by looping through the array starting from the specified index for each recursive call, considering only remaining elements after adding an element to the current combination. The main method initializes the result and current combination lists and calls the helper method with appropriate arguments.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Can you explain how cursors work in a 4GL SELECT statement for Actian? Use an example to illustrate its functionality.",
        "input": "DECLARE cur_orders CURSOR FOR SELECT order_id, customer_id, order_date FROM orders;\nOPEN cur_orders;\nFETCH NEXT FROM cur_orders INTO :orderId, :customerId, :orderDate;\nCLOSE cur_orders;",
        "output": "In the provided 4GL code snippet, a cursor named `cur_orders` is declared to point to a result set of the SELECT statement. The cursor fetches one row at a time, iterating through the rows in the order they are returned by the database. The `FETCH NEXT` statement retrieves values for `order_id`, `customer_id`, and `order_date` from the current row pointed to by the cursor and assigns these values to variables `:orderId`, `:customerId`, and `:orderDate`, respectively.\n\nThe `OPEN` command initializes the cursor and the `FETCH NEXT` command retrieves the first record. Finally, the `CLOSE` command terminates the cursor, which is not needed in C# as it automatically releases the resources when it goes out of scope. In C#, you can use a DataReader for similar functionality without declaring cursors.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Can you provide an example of how to sort a result set in a 4GL SELECT statement and explain the equivalent C# code?",
        "input": "SELECT order_id, customer_id, order_date FROM orders WHERE status = 'Pending' ORDER BY order_date DESC;",
        "output": "In 4GL, the `ORDER BY` clause is used to sort the result set based on the specified columns and direction (ascending or descending). In this example, the records are sorted by `order_date` in descending order.\n\nWhen converting this query to C#, you should use LINQ's `OrderByDescending()` method to sort the result set:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string sqlQuery = @\"SELECT order_id, customer_id, order_date FROM orders WHERE status = 'Pending'\"; // Complete the query with appropriate filters and conditions\n    using (SqlCommand command = new SqlCommand(sqlQuery, connection))\n    {\n        connection.Open();\n        var data = command.ExecuteReader()\n            .Cast<SqlDataRecord>()\n            .Select(record => new { orderId = record.GetInt32(0), customerId = record.GetInt32(1), orderDate = record.GetDateTime(2) })\n            .OrderByDescending(o => o.orderDate)\n            .ToList(); // Process the sorted data here\n    }\n}\n```\nIn this example, the `SqlDataReader` is used to read the query results and convert them into a list of anonymous objects for convenience. Then, LINQ's `OrderByDescending()` method sorts the list by the `orderDate`. Finally, the sorted data can be processed further or stored in another container.",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Create a stored procedure in SQL Server named `get_student_by_id` that accepts an integer parameter `studentId`. The stored procedure should return the student's first and last names for the matching row based on the input.",
        "input": "```sql\nCREATE PROCEDURE get_student_by_id(@studentId INT)\nAS\nBEGIN\n    -- Write your SQL query here\nEND;\nGO\n```",
        "output": "```sql\nCREATE PROCEDURE get_student_by_id(@studentId INT)\nAS\nBEGIN\n    SELECT first_name, last_name FROM Students WHERE student_id = @studentId;\nEND;\nGO\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Suppose you have a stored procedure in Actian 4GL that accepts two parameters for filtering and returns the number of items in stock based on a category and supplier. Convert this Actian 4GL code to C#.",
        "input": "```\nDEFINE VARIABLE category AS CHARACTER NO-UNDO NO-CACHE;\nDEFINE VARIABLE supplier_id AS INTEGER NO-UNDO NO-CACHE;\nSELECT COUNT(*) FROM items WHERE category = :category AND supplier_id = :supplier_id;\n```",
        "output": "```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string commandText = \"SELECT COUNT(*) FROM items WHERE category = @category AND supplier_id = @supplierId\";\n    using (SqlCommand command = new SqlCommand(commandText, connection))\n    {\n        command.Parameters.AddWithValue(\"@category\", category);\n        command.Parameters.AddWithValue(\"@supplierId\", supplier_id);\n        int numberOfItemsInStock = (int)command.ExecuteScalar();\n        // Process the result\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "Convert this Actian 4GL code snippet that updates an existing item's stock quantity to a C# equivalent. Suppose we have a variable named `stockQuantity` holding the updated quantity value, and the original item has an ID of `itemId`.",
        "input": "```\nUPDATE items SET stock_quantity = :newStockQuantity WHERE id = :itemId;\n```",
        "output": "```\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    string commandText = \"UPDATE items SET stock_quantity = @newStockQuantity WHERE id = @itemId\";\n    using (SqlCommand command = new SqlCommand(commandText, connection))\n    {\n        command.Parameters.AddWithValue(\"@newStockQuantity\", stockQuantity); // Assuming the updated quantity is provided as a variable named stockQuantity\n        command.Parameters.AddWithValue(\"@itemId\", itemId);  // Assuming the item ID is provided as a variable named itemId\n        int affectedRows = command.ExecuteNonQuery(); // Handle any exceptions that may occur\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you convert a sorting function written in Actian 4GL that sorts a dataset by the 'Age' column in descending order into an equivalent C# method using LINQ?",
        "input": "In this example, let's assume we have the following sample dataset:\n\n```\nName| Age\n----| ---\nJohn|  20\nAlice|  35\nMike|  18\nSara|  40\nBob |  22\n```",
        "output": "To convert a sorting function in Actian 4GL to an equivalent C# method using LINQ, you can create a LINQ query that sorts the sample dataset by the 'Age' column in descending order. Here's the code:\n\n```csharp\nvar sortedDataset = new List<Person>\n{\n    new Person { Name = \"John\", Age = 20 },\n    new Person { Name = \"Alice\", Age = 35 },\n    new Person { Name = \"Mike\", Age = 18 },\n    new Person { Name = \"Sara\", Age = 40 },\n    new Person { Name = \"Bob\", Age = 22 }\n}.OrderByDescending(person => person.Age);\n```\n\nThe `Person` class can be defined as follows:\n\n```csharp\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    },
    {
        "instruction": "How would you implement a function to calculate the sum of all columns in a table using Actian 4GL? Then, provide its equivalent C# code for calculating the sum of specific columns using SQL command.",
        "input": "Assume we have a sample table called `Employees` with the following data:\n\n```\nId| Name  | Age   | Salary\n--|-------|------|-------\n1 | John  | 20    | 45000\n2 | Alice | 35    | 70000\n3 | Mike  | 18    | 25000\n4 | Sara  | 40    | 60000\n```",
        "output": "To calculate the sum of all columns in a table using Actian 4GL, you can use the following command:\n\n```\nSELECT SUM(*) FROM Employees;\n```\nNow, to get the sum of specific columns (e.g., `Age` and `Salary`) in C# using SQL command, you can use the following code:\n\n```csharp\nusing (SqlConnection connection = new SqlConnection(connectionString))\n{\n    connection.Open();\n    using (SqlCommand command = new SqlCommand(\"SELECT SUM(Age) + SUM(Salary) FROM Employees\", connection))\n    {\n        int sumOfAgesAndSalaries = (int)command.ExecuteScalar();\n        Console.WriteLine($\"Sum of Ages and Salaries: {sumOfAgesAndSalaries}\");\n    }\n}\n```",
        "taxonomy_path": "compositional_skills->programming_languages->convert4gl_csharp->general_conversion_u",
        "task_description": "Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.",
        "document": null
    }
]
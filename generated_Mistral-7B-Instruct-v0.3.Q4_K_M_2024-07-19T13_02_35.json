[
    {
        "instruction": "What happens if CurSession.ProcessWait=TRUE during a Call System Statement execution in OpenROAD (2.0) Actian 4GL?",
        "input": "",
        "output": "The application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute after the command has finished.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Explain the purpose of the systemcommand parameter in Actian 4GL OpenROAD Call System Statement.",
        "input": "",
        "output": "The `systemcommand` parameter in the call system statement specifies a string expression that must evaluate to a single operating system command, which is executed by the statement. If specified, it returns automatically to the application either immediately after starting (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE).",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is meant by the term \"systemcommand\" in the context of a Call System Statement in Actian 4GL OpenROAD?",
        "input": "",
        "output": "`systemcommand` is a parameter of the `Call System Statement`. It specifies a string expression that evaluates to a single operating system command. This command will be executed by the statement, and it can return automatically to the application after executing the command (if `CurSession.ProcessWait=FALSE`) or after the command has finished execution (if `CurSession.ProcessWait=TRUE`).",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Explain how you can indirectly communicate between two applications when a called application blocks the calling application using the Call System Statement in OpenROAD (2.0) Actian 4GL?",
        "input": "",
        "output": "Although there is no direct communication method between the OpenROAD application and the called application, you can write out files that can be read by the other application or put data in the database that can be read in by the other application for indirect communication.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What does the \"CurSession.ProcessWait\" attribute do when used with the Call System Statement?",
        "input": "",
        "output": "If CurSession.ProcessWait=TRUE, the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute and it will wait for the command to finish before returning control to the application. If CurSession.ProcessWait=FALSE, the control returns to the application immediately after starting the command or operating system prompt if no command is specified.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is the difference between Call System Statement and Call RunImage Statement?",
        "input": "",
        "output": "The primary difference between `Call System Statement` and `Call Runimage Statement` lies in their purpose. While the `Call System Statement` is used to call operating system commands from an application, `Call Runimage Statement` is used to start a new OpenROAD application more efficiently. This can be done by specifying the name or path of the image file that corresponds to the new application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Can we start a new OpenROAD application using Call System Statement?",
        "input": "",
        "output": "No, it's not recommended to start a new OpenROAD application by using the call system statement. Instead, you can use the call runimage statement for this purpose.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What happens when the called application blocks the calling application using Call System Statement in Actian 4GL OpenROAD? Is there any direct communication method between the applications? If not, how can indirect communication be achieved?",
        "input": "",
        "output": "When the called application blocks the calling application, there is no direct communication method between the two. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What does the statement do when the called application blocks the calling application, and there is no direct communication method between OpenROAD and the called application?",
        "input": "",
        "output": "When the called application blocks the calling application, there is no direct communication method between OpenROAD and the called application. To communicate indirectly, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Explain when you should use 'call system' instead of 'exit'.",
        "input": "",
        "output": "You should use the `call system` statement instead of `exit` if you want to call an operating system command from an application and then return back to the application. The `exit` command, on the other hand, simply ends the current session or application and returns the user to their shell or desktop environment.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is the use of 'Call System Status Attribute' in OpenROAD (2.0) Actian 4GL?",
        "input": "",
        "output": "The `Call System Status Attribute` is used to check the status of a command that was executed by the `call system` statement. When the `CurSession.ProcessWait=TRUE`, the application can inquire about the status of the executed command using this attribute, which is available as part of the SessionObject class.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "When using Call System Statement in OpenROAD (2.0) Actian 4GL, how can you check the status of an executed command?",
        "input": "",
        "output": "After the call system statement has finished executing a command (when CurSession.ProcessWait=TRUE), you can use the CurSession.CallSystemStatus attribute to inquire about the status of the executed command.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Describe how to call a specific operating system command using Actian 4GL OpenROAD's Call System Statement?",
        "input": "",
        "output": "To call a specific operating system command using the Call System Statement in OpenROAD (2.0) Actian 4GL, you specify a string expression that must evaluate to a single operating system command as the value of the 'systemcommand' parameter:\n\n```\ncall system systemcommand;\n```",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What happens when you do not specify a system command in Actian 4GL OpenROAD's Call System Statement?",
        "input": "",
        "output": "When you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the Call System Statement in Actian 4GL OpenROAD, and what is its syntax?",
        "input": "",
        "output": "The Call System Statement in Actian 4GL OpenROAD calls the operating system. Its syntax is as follows: `call system [systemcommand];`. When control returns to the application after calling an operating system command, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "When would you use the call runimage statement over the call system statement in OpenROAD?",
        "input": "",
        "output": "You can start a new OpenROAD application more efficiently by using the call runimage statement instead of the call system statement because the call runimage statement creates an instance of a specified image (application) and calls it, while the call system statement simply calls the operating system.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is the syntax of the call system statement in OpenROAD (2.0) Actian 4GL?",
        "input": "",
        "output": "The call system statement has the following syntax: `call system [systemcommand];`. The square brackets indicate that a parameter, systemcommand, is optional.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "In OpenROAD (2.0) Actian 4GL, what happens when you don't specify a system command in Call System Statement?",
        "input": "",
        "output": "If no system command is specified, the application puts the user at the operating system prompt, allowing them to execute any operating system commands before returning to the application by entering the exit command.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Can the call system statement communicate directly with the called application when it blocks? How can indirect communication be achieved between them?",
        "input": "",
        "output": "There is no direct communication method between the OpenROAD application and the called application if it blocks. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Explain what happens when you specify a value for the 'systemcommand' parameter in a call system statement in OpenROAD?",
        "input": "",
        "output": "When you specify a value for the 'systemcommand' parameter in a call system statement, it calls the operating system to execute the specified command. If CurSession.ProcessWait=FALSE, the control immediately returns to the application, and if CurSession.ProcessWait=TRUE, control resumes after the command has finished. The status of the executed command can be checked using the CurSession.CallSystemStatus attribute.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "In what scenarios is using the 'call system statement' more efficient than using the 'call runimage statement' in OpenROAD (2.0) Actian 4GL?",
        "input": "",
        "output": "The call system statement can be used to execute single operating system commands, whereas the call runimage statement is used to start a new OpenROAD application more efficiently. If you only need to execute an operating system command, it may be more efficient to use the 'call system statement'.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What happens when CurSession.ProcessWait=FALSE during the execution of Call System Statement in Actian 4GL?",
        "input": "",
        "output": "When CurSession.ProcessWait=FALSE, after executing a command (if specified), the call system statement returns immediately to the application without waiting for the command to finish.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is 'CurSession.ProcessWait' and 'CurSession.ProcessWindow' in OpenROAD and what role do they play when using the call system statement?",
        "input": "",
        "output": "In the context of the Call System Statement, `CurSession.ProcessWait` determines whether the calling application should wait for the command to finish before resuming execution. When `CurSession.ProcessWait` is set to TRUE, the application will wait for the called command to complete before returning control and continuing with the next statement. If it's set to FALSE, the application will resume immediately after starting the command. On the other hand, `CurSession.ProcessWindow` determines whether the user should be put at the operating system prompt when no specific command is specified in the call system statement. When `CurSession.ProcessWindow` is TRUE, the user can execute any operating system commands and return to the application by entering the exit command.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "How can you use the Call System Statement to start a second application and provide an example for this scenario?",
        "input": "",
        "output": "To start a second application using the Call System Statement, specify the operating system command that starts the desired application as the parameter of the statement. However, it is more efficient to use the call runimage statement if you are starting another OpenROAD application. Here's an example: `call system \"command-to-start-second-application\";`",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Explain what does 'CurSession.ProcessWait' attribute do in Call System Statement in OpenROAD (2.0) Actian 4GL?",
        "input": "",
        "output": "In the `Call System Statement`, the `CurSession.ProcessWait` attribute determines whether the application waits for the called operating system command to complete before control returns to the application. If `CurSession.ProcessWait=FALSE`, the application returns immediately after starting the command, otherwise it returns only when the command finishes execution and the status can be inquired using the `CurSession.CallSystemStatus` attribute.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is the role of 'exit' command when using the call system statement in OpenROAD (2.0) Actian 4GL?",
        "input": "",
        "output": "When using the `call system` statement in OpenROAD, if no specific command is given and `CurSession.ProcessWindow=TRUE`, then the user will be put at the operating system prompt after the call is made. At this point, the user can execute any operating system commands they want until they enter the 'exit' command. The 'exit' command signals the return to the application, which resumes with the statement immediately following the call system statement.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is the difference between 'Call System Statement' and 'call runimage statement' in Actian 4GL OpenROAD?",
        "input": "",
        "output": "You can start a new OpenROAD application more efficiently by using the call runimage statement. While the Call System Statement calls the operating system from an application, the Call RunImage Statement calls another OpenROAD application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What happens if you do not specify a value for 'systemcommand' in a call system statement?",
        "input": "",
        "output": "If no value is specified for 'systemcommand', the call system statement puts the user at the operating system prompt, where they can execute any operating system commands and return to the application by entering the exit command.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What happens when control returns to the application after using the 'Call System Statement' in OpenROAD (2.0) Actian 4GL?",
        "input": "",
        "output": "When control returns to the application, execution resumes with the statement immediately following the call system statement. If the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application, but indirect communication can be achieved by writing out files that can be read by the other application or putting data in the database that can be read in by the other application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What does the 'CurSession.CallSystemStatus attribute' provide after executing a command using the 'Call System Statement' in OpenROAD (2.0) Actian 4GL?",
        "input": "",
        "output": "The CurSession.CallSystemStatus attribute can be used to inquire the status of the executed command by an application after using the call system statement. This attribute is useful when the process wait parameter is set to True, which causes the application to wait for the execution of the command before returning control to the application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What happens when Control returns to the application after using Call System Statement?",
        "input": "",
        "output": "When control returns to the application after using the call system statement, execution resumes with the statement immediately following the call system statement.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Describe how Call System Statement communicates indirectly between applications.",
        "input": "",
        "output": "For indirect communication between two applications when the called application blocks the calling application, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What happens when no 'systemcommand' is specified in a Call System Statement?",
        "input": "",
        "output": "When no 'systemcommand' is specified in a Call System Statement, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is the purpose of using 'CurSession' when using Call System Statement?",
        "input": "",
        "output": "`CurSession` is a SessionObject class in OpenROAD (2.0) Actian 4GL which is used to hold information about an active session or process. When using the `Call System Statement`, you can use attributes of `CurSession` like `ProcessWait` and `ProcessWindow` to control whether the application should wait for the command to finish before returning control or put the user at the operating system prompt respectively, and also to check the status of the executed command with the attribute `CallSystemStatus`.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "How can you put data in the database that can be read by another application using Call System Statement?",
        "input": "",
        "output": "Although there is no direct communication method between the OpenROAD application and the called application when the called application blocks the calling application, you can write out files that can be read by the other application or put data in the database that can be read in by the other application for indirect communication.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is the purpose of 'call system' statement in OpenROAD (2.0) Actian 4GL? Provide an example usage of this command along with its syntax.",
        "input": "",
        "output": "The `call system` statement in OpenROAD (2.0) Actian 4GL is used to call the operating system from an application. Here's a simple example of how it can be used:\n```\ncall system cmdname;\n```\nIn this example, `cmdname` refers to the command that the operating system should execute. The called application will run and execution resumes with the statement immediately following the call system statement in the OpenROAD application. If you don't specify a specific command, the user is put at the operating system prompt where they can execute any other commands.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Explain the difference between 'call system' and 'call runimage' statements in OpenROAD (2.0) Actian 4GL? Provide examples of both commands and their use cases.",
        "input": "",
        "output": "The `call system` statement is used to call the operating system from an application, whereas `call runimage` is used to start a new OpenROAD application more efficiently. Here's an example usage for each:\n\n- For `call system` command:\n```\ncall system cmdname;\n```\nThis command calls the operating system to execute the specified command (e.g., `cmdname`) and returns control to the application, either immediately after starting the command or after it has finished, depending on whether `CurSession.ProcessWait=TRUE` or FALSE. If no specific command is given, the user will be put at the operating system prompt to execute other commands.\n- For `call runimage` command:\n```\ncall runimage imagepath;\n```\nThis command starts a new OpenROAD application with the specified image file (e.g., `imagepath`) and returns control back to the current application after starting the new one. This is more efficient than calling the operating system since it avoids any potential compatibility issues between different operating systems.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What happens if you do not specify a `systemcommand` in Actian 4GL OpenROAD Call System Statement?",
        "input": "",
        "output": "If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What does the `CurSession.CallSystemStatus` attribute do in Actian 4GL OpenROAD Call System Statement?",
        "input": "",
        "output": "The CurSession.CallSystemStatus attribute can be used by an application to inquire about the status of a command executed using call system statement. It provides information on the status of the called command execution.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is a possible use-case for using indirect communication after calling another application with Actian 4GL OpenROAD's Call System Statement?",
        "input": "",
        "output": "You can write out files that can be read by the other application or put data in the database that can be read in by the other application when the called application blocks the calling application. This allows for indirect communication between the OpenROAD application and the called application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What happens when the called application blocks the calling application using 'Call System Statement' in OpenROAD?",
        "input": "",
        "output": "When the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What are some common scenarios where 'Call System Statement' might be used in OpenROAD (2.0) Actian 4GL?",
        "input": "",
        "output": "The call system statement in Actian 4GL is used to execute operating system commands from within an application, such as executing a script file, starting another program, or performing system administration tasks. Some common scenarios where the call system statement might be used include:\n1. Automating batch processing of files. For example, calling a utility program to process multiple files in a directory.\n2. Starting up another application as part of an installation or configuration process.\n3. Running a command-line tool to perform specific operations, such as compiling code, running tests, or generating reports.\n4. Calling external programs to integrate them with OpenROAD applications for data exchange, processing, or other purposes.\n5. Performing system administration tasks, such as creating, moving, renaming, or deleting files or directories.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Explain how 'Call System Statement' can be used to communicate indirectly between two OpenROAD applications.",
        "input": "",
        "output": "When a called application blocks the calling application, there is no direct communication method between the two OpenROAD applications. However, for indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application using 'Call System Statement'. For example:\n1. Write out a file containing some data from the calling application and have the second application read it.\n2. Put some data into the database in the calling application and have the second application retrieve it when it starts up.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Can you give an example of how to use 'Call System Statement' with a specific operating system command in OpenROAD?",
        "input": "",
        "output": "To call the operating system to execute the command \"ls\" (Linux/Unix), you can write the following code:\n```\ncall system 'ls';\n```",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is the syntax for using the call system statement in Actian 4GL OpenROAD?",
        "input": "",
        "output": "The call system statement has the following syntax: `call system [systemcommand];` The call system statement calls the operating system from an application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "How can you check the status of the executed command in OpenROAD after using the Call System Statement?",
        "input": "",
        "output": "In OpenROAD, you can inquire the status of the executed command by using the `CurSession.CallSystemStatus` attribute.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Describe the syntax of the Call System Statement in OpenROAD (2.0) Actian 4GL?",
        "input": "",
        "output": "The call system statement has the following syntax: `call system [systemcommand];` where systemcommand specifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE).",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What happens when you do not specify a system command in Call System Statement in OpenROAD (2.0) Actian 4GL?",
        "input": "",
        "output": "If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What alternative to using 'Call System Statement' is more efficient for starting a new OpenROAD application?",
        "input": "",
        "output": "A more efficient method for starting a new OpenROAD application than using Call System Statement is the use of 'Call Runimage Statement'.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What are alternative ways to start a new OpenROAD application, as opposed to using the Call System Statement?",
        "input": "",
        "output": "The call runimage statement is an alternative way to start a new OpenROAD application. Using the call runimage statement is more efficient than using the call system statement for starting a new OpenROAD application.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Describe how to use the Call System Statement for indirect communication between two applications in Actian 4GL OpenROAD.",
        "input": "",
        "output": "In OpenROAD, when a called application blocks the calling application, there is no direct communication method available. To overcome this, you can write out files that can be read by the other application or put data in the database that can be read in by the other application. This way, indirect communication is established between the two applications.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Explain what CurSession.CallSystemStatus attribute does and how it helps after using Call System Statement in Actian 4GL OpenROAD.",
        "input": "",
        "output": "After using the call system statement, you can use the CurSession.CallSystemStatus attribute to check the status of the executed command. When the Call System Statement returns control to the application (either immediately or after the command has finished), this attribute provides information about the success or failure of the executed command and any other relevant status data.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the `CurSession` object in Actian 4GL OpenROAD Call System Statement?",
        "input": "",
        "output": "The `CurSession` object provides attributes and methods for managing sessions and system calls in Actian 4GL. Specifically, the `CallSystemStatus` attribute of the `CurSession` object is used to get status information returned by a call system statement.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Provide an example showing how to use Call System Statement with a command specified in the systemcommand field.",
        "input": "",
        "output": "```\ncall system 'ls -l';\n```\nThe above `Call System Statement` will call the operating system's ls command, which lists all files and directories in the current directory with their details (permissions, owner, size, etc.).",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What happens if you do not specify a systemcommand for the Call System Statement?",
        "input": "",
        "output": "If no command is specified in the `systemcommand` field of `Call System Statement`, it puts the user at the operating system prompt. This allows the user to execute any desired operating system commands and return back to the application by entering the 'exit' command.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Explain how to use the Call System Statement with a specific system command and return status information.",
        "input": "",
        "output": "To use the `Call System Statement` in Actian 4GL OpenROAD, specify a string expression that must evaluate to a single operating system command as the value of systemcommand parameter. For example, let's say you want to call the system command \"ls\" to list all files and directories in the current directory:\n```\ncall system 'ls';\n```\nTo return status information from the called system command, use `CurSession.CallSystemStatus` attribute as follows:\n```\nstatus = CurSession.CallSystemStatus;\nmessage_box(status);\n```\nThe above code will display the exit status of the \"ls\" command in a message box.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is the difference between call system statement and call runimage statement in OpenROAD (2.0) Actian 4GL?",
        "input": "",
        "output": "Although you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "Provide an example of using the 'Call System Statement' in OpenROAD (2.0) Actian 4GL that calls a specific command on the operating system.",
        "input": "",
        "output": "An example of using the Call System Statement to execute a specific command on the operating system is: `call system cmdname;`. In this example, 'cmdname' represents the command to be executed on the operating system.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "How can a user execute any operating system commands using the Call System Statement?",
        "input": "",
        "output": "To execute any operating system command using the Call System Statement, leave the systemcommand parameter blank and set CurSession.ProcessWindow=TRUE. The control will be transferred to the operating system prompt and the user can then execute any desired commands before returning to the application by entering the exit command.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the CurSession.CallSystemStatus attribute in the context of Call System Statement?",
        "input": "",
        "output": "The CurSession.CallSystemStatus attribute provides status information about the called operating system command when using the Call System Statement. This attribute is only available if CurSession.ProcessWait=TRUE, which means that the application waits for the command to finish before returning control to it.",
        "taxonomy_path": "knowledge->programming_languages->actian_4gl->call_system_statement",
        "task_description": "Explain the concept and usage of 'Call System Statement' in OpenROAD (2.0) Actian 4GL.",
        "document": [
            "## Call System Statement\n\nThis statement calls the operating system.\n\nThis statement has the following syntax:\n\n```\ncall system [systemcommand];\n```\nThe call system statement calls the operating system from an application. When control returns to the application, execution resumes with the statement immediately following the call system statement. The call system statement can return status information to the application (see the SessionObject class attribute CallSystemStatus Attribute).\n\nWhen the called application blocks the calling application, there is no direct communication method between the OpenROAD application and the called application. For indirect communication, you can write out files that can be read by the other application or put data in the database that can be read in by the other application.\n\nAlthough you can use the call system statement to start a second application, you can start a new OpenROAD application more efficiently by using the call runimage statement.\n\nSee the Call Statement for information about using the call runimage statement.\n\n### Parameters--Call System Statement\n\nThis statement has the following parameter:\n\n#### systemcommand\n\nSpecifies a string expression that must evaluate to a single operating system command. If you specify systemcommand, the statement executes the command and returns automatically to the application, either immediately after starting the command (if CurSession.ProcessWait=FALSE) or after the command has finished (if CurSession.ProcessWait=TRUE). In the latter case the application can inquire the status of the executed command by using the CurSession.CallSystemStatus attribute. If you do not specify a system command, the statement puts the user at the operating system prompt (if CurSession.ProcessWindow=TRUE). The user can then execute any operating system commands and return to the application by entering the exit command.\n\n### Example--Call System Statement\n\nCall the operating system to execute the command specified in the cmdname field on the current form:\n\n```\ncall system cmdname;\n\n```"
        ]
    }
]
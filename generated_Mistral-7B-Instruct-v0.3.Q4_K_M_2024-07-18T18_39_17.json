[
    {
        "instruction": "What is the effect of the search condition on the create integrity statement?",
        "input": "",
        "output": "The search condition defined in the `create integrity` statement is a predicate that determines the data integrity rules for the specified table. The DBMS Server checks if each row in the table conforms to this rule before allowing updates or insertions. If the search condition is violated, the update or insertion is not performed, and an error message is issued. For example, if you define a constraint using the following statement:\n```sql\ncreate integrity on employee is salary <= 75000;\n```\nThen all updates or inserts to the `employee` table must satisfy the condition that salaries are less than or equal to $75,000.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What happens if a search condition contains null values?",
        "input": "",
        "output": "If a search condition in a `create integrity` statement contains null values and the user does not specify an `is null` predicate, the statement fails. The `is null` predicate can be included in the search condition to allow for null values in the table columns. For example:\n```sql\ncreate integrity on employee is salary >= 6000 or salary is null;\n```\nIn this case, the constraint allows salaries that are less than or equal to $6,000 or null values to be included in the `employee` table.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What parameters does the create integrity statement have?",
        "input": "",
        "output": "The `create integrity` statement has three parameters: `table_name`,\n`corr_name`, and `search_condition`. The `table_name` parameter specifies\nthe table for which the constraint is defined. The `corr_name` parameter\n(optional) specifies a correlation name for the table for use in the search condition. The `search_condition` parameter defines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n```\ncreate integrity on employee is salary <= 75000;\n```\nThe `search_condition` must reference only the table on which the integrity constraint is defined and cannot contain a subselect or any aggregate functions.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What happens if the search condition defined in the create integrity statement is violated?",
        "input": "",
        "output": "If the search condition defined in the create integrity statement is violated, the updates and inserts that violate the specified integrity constraint are simply not performed. Integrity constraints that are violated are not explicitly reported, but a DBMS error may occur if the violation is persistent or severe. To avoid data inconsistencies, it's important to ensure that all search conditions are valid and can be consistently maintained in the database over time.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What is the use of the correlation name parameter in the create integrity statement?",
        "input": "",
        "output": "The `corr_name` parameter in the `create integrity` statement is optional, but it can be useful in situations where a base table has a complex search condition involving multiple tables. By defining a correlation name for the base table, the user can create an easier-to-read search condition by using aliases instead of the full table names throughout the search condition. This can make large or complex integrity constraints more manageable and easier to understand.\n\nFor example, consider the following situation: An e-commerce application has two tables, `orders` and `order_items`, that need an integrity constraint enforcing that the total amount of each order is equal to the sum of the amounts of its associated order items. Without a correlation name for the `orders` table, the search condition would be quite long:\n\n```sql\ncreate integrity on orders is (select sum(amount) from order_items where orders.order_id = order_items.order_id) = orders.total;\n```\nBy defining a correlation name for the `orders` table, the search condition can be simplified:\n\n```sql\ncreate integrity on o_table is (select sum(amount) from o_table.order_items) = o_table.total;\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What happens if you create an integrity constraint that references a column that doesn't exist in the specified table?",
        "input": "",
        "output": "Creating an integrity constraint that references a column that does not exist in the specified table is not valid. The DBMS Server issues an error and aborts the statement. To avoid this issue, always ensure that the search condition uses only columns that are present in the specified base table before issuing the `create integrity` statement.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Explain the syntax of the search condition parameter in a create integrity statement.",
        "input": "",
        "output": "The search condition parameter defines the actual constraint for the integrity check. Its syntax is as follows:\n\n```\nsearch_condition\n```\n\nThis condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions. The following example demonstrates the search condition syntax for creating an integrity constraint that ensures all employee salaries are below $75,000:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Describe the process of enforcing an integrity constraint after it has been defined.",
        "input": "",
        "output": "After the create integrity statement defines a new constraint, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not explicitly reported: updates and inserts that violate any integrity constraints are simply not performed. For example, if a user tries to insert a row with a salary of $80,000 into an employee table with an integrity constraint defined for salaries no greater than $75,000, the DBMS Server will reject the request and not update the table.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Explain how to define a correlation name for a table when creating an integrity constraint in Actian 4gl SQL statements.",
        "input": "",
        "output": "In Actian 4GL SQL statements, if you need to define an integrity constraint that references the same table multiple times, you can use a correlation name for the table. This is achieved by specifying the `corr_name` parameter in the `create integrity` statement. Here's an example:\n```sql\ncreate integrity on employee e1 is salary <= (select avg(salary) from employee e2);\n```\nIn this example, `e2` is a correlation name for the `employee` table. The search condition references two tables: the original `employee` table (referenced as `e1`) and the correlated `employee` table (referenced as `e2`). This enables you to create a constraint that involves data from multiple rows of the same table.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What are the prerequisites for defining an integrity constraint in Actian 4GL SQL statements?",
        "input": "",
        "output": "Before creating an integrity constraint with the `create integrity` statement, you must meet a few requirements:\n1. You must own the table on which you want to create the integrity constraint.\n2. The search condition that defines the constraint must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n3. The DBMS Server must be able to execute the search condition for every row in the table at the time the `create integrity` statement is executed. If the search condition is defined on a column that contains nulls, the statement will fail unless the `is null` predicate is specified in the statement.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Explain how to create an integrity constraint for a table so that no employee can have a salary greater than $75,000.",
        "input": "",
        "output": "To create an integrity constraint on the `employee` table so that no employee can have a salary greater than $75,000, you should issue the following statement:\n```sql\ncreate integrity on employee is salary <= 75000;\n```\nWith this constraint, any insert or update operations that would violate it (i.e., setting an employee's salary to a value greater than $75,000) will be prevented from being performed.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the `corr_name` parameter in the create integrity statement?",
        "input": "",
        "output": "The `corr_name` (correlation name) parameter in the create integrity statement provides an optional alias for the specified table in the search condition. By assigning a correlation name to a table, you can use that name instead of the full table name in complex search conditions. For example:\n```sql\ncreate integrity on employee as e is e.salary <= (select max(d.salary) from department d where e.dept_id = d.dept_id);\n```\nIn this case, `e` is the correlation name for the `employee` table, and it's used to simplify the complex search condition that refers to both the employee and department tables. The use of a correlation name allows you to write more readable and maintainable integrity constraint definitions.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What happens if the specified search condition fails for some rows when creating a new integrity constraint?",
        "input": "",
        "output": "If the search condition fails for some rows during the creation of an integrity constraint, the DBMS Server issues an error and aborts the statement. The constraint is not created. To create an integrity constraint that allows for null values, you can use the `is null` predicate in the search condition. For example:\n\n```sql\ncreate integrity on employee (is salary <= 75000 or salary is null);\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "How do you define an integrity using a variable in OpenROAD application?",
        "input": "",
        "output": "To define an integrity constraint using a variable in an OpenROAD application, issue the following statement:\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```\nReplace `:sal_limit` with the variable containing the limit for salary.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Can you give an example of a search condition for an integrity constraint that ensures no duplicate values in a column?",
        "input": "",
        "output": "To ensure no duplicate values in the 'employee_id' column for the employee table:\n```sql\ncreate integrity on employee is employee_id not equal to any employee_id in employee;\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the `corr_name` parameter? Why might you use it?",
        "input": "",
        "output": "The `corr_name` parameter specifies a correlation name for the table for use in the search condition. This can be useful when using subqueries or multiple joins within the search condition, as it allows for easier reference of the table and reduces ambiguity. For example:\n```sql\ncreate integrity on (e1: employee) as e2\n    is e1.salary < e2.salary;\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What is meant by \"the search condition must reference only the table on which the integrity constraint is defined\"?",
        "input": "",
        "output": "The search condition in the create integrity statement can only refer to the table for which the constraint is being defined. This means that it cannot reference any other tables, nor can it include subselects or aggregate functions. The reason for this is to ensure that the constraint is enforced specifically on the intended table and that the DBMS Server has a clear understanding of what rows are affected by the constraint. For example:\n```sql\ncreate integrity on employee is salary <= 75000; // Correct\ncreate integrity on employee is (select max(salary) from other_table) >= salary; // Incorrect\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What are the implications of defining an integrity constraint with a search condition that contains nulls?",
        "input": "",
        "output": "If the search condition defined for an integrity constraint contains nulls, the statement will fail unless the `is null` predicate is specified in the statement. This is because the DBMS Server must ensure that each row in the table conforms to the new constraint, and it cannot do so if there are null values. For example:\n```sql\ncreate integrity on employee is salary >= 6000; // Fails if employee's salary contains nulls\ncreate integrity on employee is salary >= 6000 or salary is null; // Works with nulls in the salary column\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What is the purpose of using a correlation name in a create integrity statement?",
        "input": "",
        "output": "In a `create integrity` statement, using a correlation name allows you to refer to the table for which the constraint is defined using an alternate name in the search condition. This can be helpful if your search condition refers to multiple tables and needs to specify the same base table multiple times. For example, suppose that you have two tables called `employee` and `department`, and you want to define a constraint on both of them so that no employee's department id matches any inactive department id. You can use the following statement with correlation names:\n```sql\ncreate integrity on employee as e, department as d is e.dept_id != d.inactive_id;\n```\nIn this example, `e` is a correlation name for the `employee` table, and `d` is a correlation name for the `department` table. The search condition `e.dept_id != d.inactive_id` checks whether the department id of each employee does not match any inactive department id in the `department` table.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What are some common use cases for creating integrity constraints using search conditions?",
        "input": "",
        "output": "Integrity constraints can be used to enforce various data consistency rules and prevent invalid or erroneous data from entering the database. Some common examples of using integrity constraints with search conditions include:\n\n1. Ensuring that a foreign key column contains valid values by referencing a primary key column in another table. For example, if you have a `customer` table and an `order` table, you can create an integrity constraint that ensures that the foreign key column in the `order` table references valid customer ids from the `customer` table.\n2. Enforcing domain rules such as maximum or minimum values for a specific column. For example, you might want to ensure that ages in a `person` table are greater than 0, or that salaries in an `employee` table are less than $10 million.\n3. Ensuring that relationships between tables follow certain logical rules. For example, if you have an `order_item` table and an `order` table, you might want to create an integrity constraint that ensures that each order item belongs to exactly one order and that orders can't be deleted if they still have associated order items.\n4. Ensuring data consistency across multiple tables. For example, you might want to ensure that the sum of the quantities in the `order_item` table always equals the total quantity ordered in the `order` table for a given order id.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Describe what a correlation name is and its role in the create integrity statement in Actian 4GL SQL.",
        "input": "",
        "output": "In the `create integrity` statement, a correlation name is an optional parameter that allows you to assign a user-defined name to a base table for use within the search condition of the integrity constraint. The role of a correlation name is to make it easier to reference the specified table within the search condition of the integrity constraint by providing a shorter and more memorable name, as opposed to using the long table name directly in the search condition.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What is the effect of the create integrity statement on updates to the table?",
        "input": "",
        "output": "The `create integrity` statement in Actian 4GL SQL creates an integrity constraint for the specified base table. After the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed. This ensures data consistency within the database.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Given the following table: employee, define an integrity constraint so that no employee can have a salary higher than $80,000.",
        "input": "",
        "output": "To create an integrity constraint on the employee table so that no employee can have a salary higher than $80,000, execute the following SQL statement:\n```sql\ncreate integrity on employee is salary <= 80000;\n```\nThis integrity constraint ensures that any update or insert operation that violates this condition will not be executed, preventing data inconsistencies in the database.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Explain how to use the `create integrity` statement with aggregate functions.",
        "input": "",
        "output": "The create integrity statement does not allow aggregate (set) functions directly in the search condition, as it may lead to errors or ambiguities in the constraint definition. However, you can work around this limitation by using subqueries that avoid using aggregate functions. For example:\n```sql\ncreate integrity on employee is (select max(salary) from employee) >= salary;\n```\nThis creates an integrity constraint that ensures no employee has a lower salary than the maximum salary in the employee table at the time of creating the constraint. When you update or insert data, the database will check the updated salary values against this calculated maximum value to ensure the integrity constraint is not violated.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What is the syntax for creating an integrity constraint using a correlation name in SQL 4GL?",
        "input": "",
        "output": "The syntax to create an integrity constraint with a specified correlation name in SQL 4GL is:\n\n```sql\ncreate integrity on table_name [corr_name]\n          is search_condition;\n```\nHere, `table_name` specifies the table for which the constraint is defined, `corr_name` is a unique correlation name for the table in the search condition, and `search_condition` defines the actual integrity constraint.\n\nFor example:\n```sql\ncreate integrity on employee AS emp_sal (is salary <= 75000);\n```\nThis creates an integrity constraint called `emp_sal` for the `employee` table, with a search condition that ensures no employee has a salary greater than $75,000.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What are some common use cases for creating integrity constraints in SQL 4GL?",
        "input": "",
        "output": "Some common use cases for creating integrity constraints in SQL 4GL include:\n1. Ensuring that the data in a table conforms to certain business rules, such as ensuring that a salary cannot be negative, or that a date field has a valid format.\n2. Preventing duplicate values in columns, such as primary key fields or unique constraints.\n3. Enforcing referential integrity by creating foreign key constraints between tables, ensuring that relationships are maintained and data consistency is preserved.\n4. Implementing check constraints to validate the data entered into a table, preventing invalid or inconsistent data from being inserted.\n5. Defining domain-specific constraints based on business requirements, such as enforcing a minimum age for customers in a database application.\n6. Implementing triggers that react to changes to tables and enforce integrity constraints at runtime, ensuring the system state remains consistent.\n7. Using stored procedures and functions to encapsulate complex data validation logic and enforce integrity rules throughout an application.\n8. Creating indexes on columns with constraints for efficient lookup of rows that satisfy these constraints during queries or updates.\n9. Improving performance by reducing the need for manual data cleaning or fixing inconsistent data.\n10. Protecting data from accidental deletions or updates, ensuring the system maintains data integrity and consistency over time.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the create integrity statement in SQL 4GL?",
        "input": "",
        "output": "The `create integrity` statement in SQL 4GL creates an integrity constraint for a specified base table. The constraint ensures that certain conditions or rules are met for the data stored in the table, such as ensuring that a salary column only contains values within a specific range, or preventing duplicate entries based on certain criteria. By defining these constraints, database developers and administrators can ensure the data in their tables remains consistent and accurate.\n\nThe syntax of the `create integrity` statement is:\n```sql\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\nHere, `table_name` specifies the table for which the constraint is defined, `corr_name` (optional) specifies a correlation name for use in the search condition, and `search_condition` defines the actual integrity constraint. The search condition must reference only the table on which the integrity constraint is defined and cannot contain any subselects or aggregate functions.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What happens if the search condition specified in the create integrity statement is not true for every row in a table at the time of execution?",
        "input": "",
        "output": "If the search condition specified in the `create integrity` statement is not true for every row in the table at the time of execution, then the DBMS server issues an error and aborts the statement. The integrity constraint cannot be defined if the search condition fails to hold for even a single row in the table.\n\nFor example, let's say you want to create an integrity constraint on the `employee` table so that no employee has a salary greater than $75,000. If there is one row in the table with a higher salary, then the DBMS server will not allow the constraint to be created, and it will issue an error message.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What are some best practices when defining integrity constraints?",
        "input": "",
        "output": "Defining integrity constraints is crucial to ensuring data consistency and enforcing business rules within a database. Here are some best practices to consider:\n1. Keep it simple: Limit the number of conditions in an integrity constraint to minimize complexity and avoid potential conflicts or errors.\n2. Define relationships between tables: Define integrity constraints that reflect the relationships between tables, such as foreign key constraints.\n3. Use meaningful names: Choose clear and descriptive names for your constraints that accurately represent their purpose and make them easy to identify and understand.\n4. Test before deploying: Carefully test your integrity constraints in development environments before deploying them to production to minimize the risk of errors or unintended consequences.\n5. Document your work: Properly document your constraints and include detailed comments explaining their purpose and business rules. This will help others understand and maintain your database structure.\n6. Avoid circular references: Avoid creating circular references by ensuring that the integrity constraint does not depend on another constraint that it itself is violating.\n7. Handle nulls carefully: Consider how null values will be handled within your integrity constraints, especially if the column being constrained allows them. You may need to include specific conditions or exceptions to handle null values appropriately.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Provide an example of an integrity constraint that ensures no two employees have the same first and last name.",
        "input": "",
        "output": "To create an integrity constraint that prevents two employees from having the same first and last names, we can use a unique combination of both columns:\n```sql\ncreate integrity on employee\nis not exists (select 1 from employee where employee.first_name = new.first_name and employee.last_name = new.last_name and employee.id != new.id);\n```\nThis ensures that for each new row being inserted, there are no existing rows with the same first and last names in the `employee` table.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the exclusive lock taken on a table when defining an integrity constraint?",
        "input": "",
        "output": "The purpose of taking an exclusive lock on a table when defining an integrity constraint is to prevent other transactions from modifying the table while the constraint is being created. This ensures that all rows in the table conform to the specified search condition before any further changes can be made. By ensuring consistency and accuracy during the creation process, the integrity constraint can effectively enforce business rules and maintain data quality within the database.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Can you provide an example of how to create a constraint using the create integrity statement?",
        "input": "",
        "output": "Sure! Here's an example that ensures no employee has a salary greater than $75,000:\n```sql\ncreate integrity on employee is salary <= 75000;\n```\nYou can replace the `employee` table name with any other base table you want to define an integrity constraint for. The search condition in this example uses a simple comparison (`<=`) to define the constraint, but more complex conditions are also possible.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What is the impact of the create integrity statement on performance?",
        "input": "",
        "output": "The time required to execute the `create integrity` statement varies with the size of the table being affected because the DBMS Server must check each row in the table initially to ensure that it conforms to the new integrity constraint. This initial checking can have a performance impact, especially on large tables or complex integrity constraints. However, once the integrity constraint has been defined and validated, subsequent updates to the table should not have a significant performance impact as long as they satisfy the established integrity constraint.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What is the syntax for creating an integrity constraint in Actian 4GL SQL statements?",
        "input": "",
        "output": "The syntax for creating an integrity constraint in Actian 4GL SQL statements is:\n```sql\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Explain what happens when you create an integrity constraint on a column that contains nulls?",
        "input": "",
        "output": "If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "What are some examples of search conditions that can be used with the create integrity statement?",
        "input": "",
        "output": "Examples of search conditions for `create integrity` statement in 4gl sql include:\n- Salaries of employees should not exceed $100,000:\n```sql\ncreate integrity on employee is salary <= 100000;\n```\n- Employee numbers should be unique:\n```sql\ncreate integrity on employee is employee_num unique;\n```\n- Only male employees can have a job title of 'manager':\n```sql\ncreate integrity on employee is sex = 'm' and job_title = 'manager';\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Provide an example of a scenario where creating an integrity constraint can prevent data inconsistencies in SQL 4GL.",
        "input": "",
        "output": "Suppose a company has an `employee` table with columns for `id`, `name`, `salary`, and `department`. An integrity constraint could be created to ensure that no employee can have a salary greater than the maximum salary allowed in their department. To create this constraint, you would issue the following statement:\n```sql\ncreate integrity on employee is (department = 'Sales' and salary <= 70000)\nor (department = 'Engineering' and salary <= 80000);\n```\nThis ensures that no employee in the Sales department can have a salary greater than $70,000, and no employee in the Engineering department can have a salary greater than $80,000. By enforcing this constraint, data inconsistencies are prevented and the overall integrity of the `employee` table is maintained.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Explain what happens if an attempt is made to update or insert data that violates an existing integrity constraint in SQL 4GL.",
        "input": "",
        "output": "If an attempt is made to update or insert data that violates an existing integrity constraint, the operation is not performed by the DBMS Server. Instead, the change is rejected, and no error message is issued. The reason for this behavior is that integrity constraints in SQL 4GL are designed to ensure data consistency, and any data changes that could compromise that consistency are not allowed. It's important to ensure that all data updates and inserts comply with the defined integrity constraints to maintain the accuracy of the database.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Give an example of creating an integrity constraint on a table to ensure that no employee can have a salary less than $40,000.",
        "input": "",
        "output": "To create an integrity constraint on the employee table such that no employee has a salary less than $40,000, issue this statement:\n```sql\ncreate integrity on employee is salary >= 40000;\n```",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    },
    {
        "instruction": "Explain how the `create integrity` statement checks data in a table before creating an integrity constraint.",
        "input": "",
        "output": "Before defining an integrity constraint, the DBMS Server checks the specified base table to ensure that the search condition is initially true for every row. This means if the search condition is defined on a column with nulls, the statement fails unless the `is null` predicate is included in the statement.",
        "taxonomy_path": "knowledge->programming_languages->sql_actian_4gl->create_integrity",
        "task_description": "Explain the syntax and usage of the create integrity statement in 4gl sql statements.",
        "document": [
            "# Create Integrity Statement\n\nThe `create integrity` statement creates an integrity constraint for the specified base table.\n\n## Syntax\n\n```\ncreate integrity on table_name [corr_name]\n              is search_condition;\n```\n\n## Parameters\n\n### table_name\nSpecifies the table for which the constraint is defined.\n\n### corr_name\nSpecifies a correlation name for the table for use in the search condition.\n\n### search_condition\nDefines the actual constraint. For example, if you want to create a constraint on the employee table so that no employee can have a salary of greater than $75,000, issue the following statement:\n\n```sql\ncreate integrity on employee is salary <= 75000;\n```\n\nThe search condition must reference only the table on which the integrity constraint is defined, and cannot contain a subselect or any aggregate (set) functions.\n\nAt the time the `create integrity` statement is executed, the search condition must be true for every row in the table, or the DBMS Server issues an error and aborts the statement. If the search condition is defined on a column that contains nulls, the statement fails unless the `is null` predicate is specified in the statement.\n\nAfter the constraint is defined, all updates to the table must satisfy the specified search condition. Integrity constraints that are violated are not specifically reported: updates and inserts that violate any integrity constraints are simply not performed.\n\n## Create Integrity Locking\n\nThe `create integrity` statement takes an exclusive lock on the specified table.\n\n## Create Integrity Performance\n\nThe time required to execute the `create integrity` statement varies with the size of the table, because the DBMS Server must check the specified base table to ensure that each row initially conforms to the new integrity constraint.\n\n## Permissions\n\nYou must own the table.\n\n## Create Integrity Related Statements\n\n- Drop Integrity Statement\n\n## Examples\n\n### Example 1\nMake sure that the salaries of all employees are no less than 6000.\n\n```sql\ncreate integrity on employee is salary >= 6000;\n```\n\n### Example 2\nIn an OpenROAD application, define an integrity using a variable.\n\n```sql\ncreate integrity on employee\n    is sal < :sal_limit;\n```"
        ]
    }
]
[
    {
        "instruction": "How can you execute a ProcHandle object in Actian 4GL SQL?",
        "input": "",
        "output": "To execute a procedure specified by the ProcHandle object, invoke the `Call` method defined for the `ProcHandle` class. The syntax is:\n```4gl\n[retval =] prochandle.Call(parameters);\n```\nThe `parameters` are specified just as in a `callproc` statement. For an explanation about using the `callproc` statement, see How You Can Pass Parameters to 4GL Procedures.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Explain when you cannot use the Call method on a ProcHandle object.",
        "input": "",
        "output": "The `Call` method can be invoked only in the following places:\n- In a statement by itself\n- As the right side of an assignment\n\nThe `Call` method can never be invoked inside an expression. If a procedure handle represents a local procedure defined in a frame or global procedure component, there are two additional restrictions on when the `Call` method can be invoked on the procedure handle:\n- The `Call` method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the `GetProcHandle` was issued) has terminated.\n- The `Call` method cannot be invoked from a \"thread\" other than the one in which the `GetProcHandle` was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread). These restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Explain how to execute a ProcHandle object using an example.",
        "input": "",
        "output": "To execute a procedure specified by a ProcHandle object, invoke the Call method defined for the ProcHandle class. Here is an example:\n\n```\nprochandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\nprochandle.Call(parameters);\n```\nIn this example, `appname` must reference a directly included application where the procedure with the name `procname` is defined. The Call method uses the scope specified by the ProcHandle object to execute it.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "What are some restrictions when using the Call method in OpenROAD?",
        "input": "",
        "output": "The Call method can be invoked only in a statement by itself or as the right side of an assignment and cannot be invoked inside an expression. If a procedure handle represents a local procedure defined in a frame or global procedure component, it cannot be invoked after the termination of that frame/procedure and not from a thread other than the one on which the GetProcHandle was issued. These restrictions do not apply to a procedure handle representing a global procedure or local procedures defined in user class scripts.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "What is the purpose of using ProcHandle objects in Actian 4GL SQL?",
        "input": "",
        "output": "ProcHandle objects are used to pass procedures to contexts in which they are not otherwise visible, similarly to function pointers in the C language. They let called frames call procedures declared locally in their calling frame and let field scripts declare local procedures that can be called from anywhere in a frame.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Describe the syntax of creating a ProcHandle object.",
        "input": "",
        "output": "To obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object:\n```4gl\nprochandle = scope.GetProcHandle(name = string);\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Give an example of how you can use a ProcHandle object for calling cleanup procedures at the frame level.",
        "input": "",
        "output": "You can write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure:\n```4gl\ndim my_cleanup_procs[] as ProcHandle;\n\non init do\n  // create local cleanup procedures\n  my_cleanup_procs[0] = ... ; // insert handle of first cleanup procedure\n  my_cleanup_procs[1] = ... ; // insert handle of second cleanup procedure\nend on;\n\n// at cleanup time, call each cleanup procedure using its ProcHandle object\nforeach i in 0 to ubound(my_cleanup_procs) do\n    my_cleanup_procs[i].Call();\nend foreach;\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Describe a situation when you would use a global scope while creating a ProcHandle object.",
        "input": "",
        "output": "You can create a ProcHandle object for a global procedure named identically to a local procedure if you want it to be executed from anywhere in your application and not only in the specific frame or procedure where it was defined. To represent the current application as the scope, use `CurSession.Scope`.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "What are some common uses of ProcHandle objects?",
        "input": "",
        "output": "Procedure handles (ProcHandle objects) are useful to pass procedures to contexts in which the procedure is not otherwise visible, similar to function pointers in the C language. Some examples include letting called frames call procedures declared locally in their calling frame and letting field scripts declare local procedures that can be called from anywhere in the frame.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Explain how you create a ProcHandle object with an example code snippet for Actian 4GL SQL.",
        "input": "",
        "output": "To obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n```\nprochandle = scope.GetProcHandle(name = string);\n```\nYou can specify the literal string or variable that specifies the name of a procedure as well as the Scope object representing where the procedure is visible and will be executed. For example:\n```4gl\nprochandle = CurFrame.Scope.GetProcHandle(Name = 'my_proc'); // assuming my_proc is a procedure declared within the current frame\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Explain how using `GetProcHandle` method can help you in passing procedures between frames or applications in Actian 4GL SQL.",
        "input": "",
        "output": "The `GetProcHandle` method allows you to obtain a ProcHandle object which represents a global or local procedure and the scope in which to execute it. By creating a ProcHandle object for a procedure defined in one frame and passing it to another frame, you can allow called frames to call procedures declared locally within their calling frame or even procedures from other frames or applications. This is particularly useful when you want to share reusable code across multiple frames or applications without having to define the procedure in every single frame where it is needed.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "What are the restrictions for using the `Call` method with a ProcHandle object in Actian 4GL SQL?",
        "input": "",
        "output": "The Call method can be invoked only in the following places:\n- In a statement by itself\n- As the right side of an assignment.\n\nIt can never be invoked inside an expression and it cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated, or from a \"thread\" other than the one in which the GetProcHandle was issued. These restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Explain how to create a ProcHandle object in Actian 4GL SQL?",
        "input": "",
        "output": "To obtain a ProcHandle object, invoke the `GetProcHandle` method on a Scope object. The syntax is:\n```\nprochandle = scope.GetProcHandle(name = string);\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Explain how you can create a ProcHandle object in Actian 4GL SQL with an example.",
        "input": "",
        "output": "To obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n```\nprochandle = scope.GetProcHandle(name = string);\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Explain the execution of a ProcHandle object in Actian 4GL SQL with an example.",
        "input": "",
        "output": "To execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n```\n[retval =] prochandle.Call(parameters);\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "What are the restrictions to using the Call method in Actian 4GL SQL?",
        "input": "",
        "output": "There are some restrictions to using the Call method. This method can be invoked only:\n- In a statement by itself, or\n- As the right side of an assignment.\nThe Call method can never be invoked inside an expression.\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are additional restrictions on when the Call method can be invoked:\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Write a field script for Actian 4GL SQL that defines a local cleanup procedure and uses `GetProcHandle` to insert its handle into an array of cleanup procedure handles defined at the frame level.",
        "input": "",
        "output": "Here's a sample field script that defines a local cleanup procedure and inserts its handle into an array of cleanup procedure handles defined at the frame level:\n\n```\ndefine script cleanup_script\n\n    local procedure my_cleanup;\n    export my_cleanup_handle as type(procHandle);\n\n    initialize block\n        // Define the local cleanup procedure \"my_cleanup\"\n        procedure my_cleanup as void\n            begin\n                // Cleanup code for your script goes here.\n            end;\n\n        // Get the handle of the \"my_cleanup\" procedure and store it in a variable \"my_cleanup_handle\".\n        my_cleanup_handle = CurFrame.Scope.GetProcHandle(name='my_cleanup');\n\n        // Insert the cleanup handle into an array defined at the frame level.\n        frame_cleanup_handles[array_index++] = my_cleanup_handle;\n    end initialize block;\n\nend define script;\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "When executing a ProcHandle object in Actian 4GL SQL, what does the Call method do and how are parameters passed to it?",
        "input": "",
        "output": "The `Call` method defined for the ProcHandle class is used to execute the procedure specified by the ProcHandle object. The syntax for calling a Procedure Handle using the Call method is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. These parameters represent arguments passed to the procedure when it is called and are separated by commas. For example:\n\n```\nprochandle.Call('parameter1', 'parameter2');\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "What are the restrictions on using the Call method for a ProcHandle object in Actian 4GL SQL?",
        "input": "",
        "output": "The Call method can be invoked only in the following places:\n- In a statement by itself\n- As the right side of an assignment.\nIt can never be invoked inside an expression. If a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued. These restrictions do not apply to a ProcHandle that represents a global procedure or a local procedure defined in a user class script.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Explain how to pass parameters to procedures when using procedure handles in Actian 4GL SQL?",
        "input": "",
        "output": "To execute the procedure specified by the ProcHandle object, invoke the `Call` method defined for the ProcHandle class:\n```\n[retval =] prochandle.Call(parameters);\n```\nThe parameters are specified just as in a callproc statement. For more information about using the callproc statement and passing parameters to 4GL procedures, see [How You Can Pass Parameters to 4GL Procedures](https://www.actian.com/content/docs/sql-anywhere170-user-guide/procedure_handles_passing_parameters.htm#PROCEDURE%20HANDLES%20PASSING%20PARAMETERS).",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "What are some requirements for using ProcHandle objects in Actian 4GL SQL?",
        "input": "",
        "output": "To use ProcHandle objects effectively in Actian 4GL SQL, there are several requirements to consider:\n- The scope of the procedure should be specified correctly when obtaining a ProcHandle object using the `GetProcHandle` method. This includes specifying whether the procedure is visible and executed within the context of the currently executing field script (CurScriptScope), the current frame (CurFrame.Scope), or an included application (CurSession.Scope).\n- Procedure handles can only be used in specific places such as in a statement by itself or as the right side of an assignment. They cannot be invoked inside an expression.\n- The Call method, which is used to execute the procedure represented by the ProcHandle object, has some additional restrictions when dealing with local procedures defined within frames or global procedure components: it cannot be invoked after the frame or global procedure in which it was defined has terminated or from a thread other than the one in which the GetProcHandle was issued.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Explain how to create an array of ProcHandle objects and use it to manage cleanup procedures in Actian 4GL SQL.",
        "input": "",
        "output": "To create an array of ProcHandle objects, you can define a variable as an array with the `dim` statement and then use the `GetProcHandle` method to populate it with handles for local cleanup procedures. Here is an example:\n```\ndim cleanup_procs[10];\ncleanup_procs[1] = CurScriptScope.GetProcHandle('cleanup_proc1');\ncleanup_procs[2] = CurFrame.Scope.GetProcHandle('cleanup_proc2');\n...\n```\nOnce you have created the array, you can use it to manage cleanup procedures by looping through the array and calling each procedure using the `Call` method defined for the ProcHandle class at cleanup time:\n```\nforeach proc in cleanup_procs do\n    proc.Call();\nend;\n```\nThis way, all local cleanup procedures are called automatically at the appropriate time.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Explain what are the restrictions on using the Call method in Actian 4GL SQL with ProcHandle objects.",
        "input": "",
        "output": "The Call method can be invoked only in the following places:\n- In a statement by itself\n- As the right side of an assignment.\n\nIt can never be invoked inside an expression, and it cannot be invoked from any thread other than the one where the GetProcHandle was issued (if the ProcHandle represents a local procedure defined within a frame or global procedure component). Additionally, the Call method cannot be invoked after the termination of the frame or global procedure containing the scope on which the GetProcHandle was issued.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "Provide a brief explanation of how you can create a ProcHandle object in Actian 4GL SQL.",
        "input": "",
        "output": "To obtain a ProcHandle object, invoke the `GetProcHandle` method on a Scope object. The syntax is:\n```\nprochandle = scope.GetProcHandle(name = string);\n```",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    },
    {
        "instruction": "What are some use cases for ProcHandle objects in Actian 4GL SQL?",
        "input": "",
        "output": "ProcHandle objects can be used to let called frames call procedures declared locally in their calling frame, or let field scripts declare local procedures that can be called from anywhere in the frame. They are also useful for passing procedures to contexts where the procedure is not otherwise visible, similar to function pointers in the C language. For example, a field script might create a ProcHandle object for its own cleanup procedures and insert them into an array of cleanup procedure handles defined at the frame level.",
        "taxonomy_path": "knowledge->programming_languages->procedures->how_procedure_handles_work->how_procedure_handles_work",
        "task_description": "Explain the concept and usage of procedure handles (ProcHandle objects) in Actian 4GL SQL.",
        "document": [
            "# How Procedure Handles Work (ProcHandle Objects)\n\nA *procedure handle* (ProcHandle object) represents a global or local procedure and the scope in which to execute it. ProcHandle objects have several uses, for example:\n\n- They let called frames call procedures declared locally in their calling frame.\n- They let field scripts declare local procedures that can be called from anywhere in the frame.\n\nProcHandle objects are useful to pass procedures to contexts in which the procedure is not otherwise visible. They are used similarly to function pointers in the C language.\n\nFor example, you could write a field script that defines its own local cleanup procedures. In its initialize block it could insert its handles into an array of cleanup procedure handles defined at the frame level. You can create local cleanup procedures for other field scripts as well. Later, at cleanup time, the frame can loop through the cleanup array and use the handle to call each procedure.\n\n## How You Can Create a ProcHandle Object\n\nTo obtain a ProcHandle object, invoke the GetProcHandle method on a Scope object. The syntax is:\n\n```\nprochandle = scope.GetProcHandle(name = string);\n```\n\n**string**\nSpecifies a literal string or a string variable that specifies the name of a procedure.\n\n**scope**\nSpecifies where the procedure:\n- Is visible\n- Is to be executed\n\nGenerally, the scope of a ProcHandle object is CurScriptScope (the context of the currently executing field script) or CurFrame.Scope. To create a ProcHandle object for a global procedure named identically to a local procedure, use a global scope to represent the current application (CurSession.Scope).\n\nIf the currently executing frame or procedure is part of an included application, CurSession.Scope represents the global scope for that included application and the global scopes for all applications directly included by that application.\n\nThe names of included applications can be specified explicitly. For example, the following code fragment gets the procedure handle for a procedure named procname defined for an application named appname. The procedure handle is put into a variable named handle:\n\n```\nhandle = CurSession.Scope.GetProcHandle(Name = 'appname!procname');\n```\n\n**Note:** appname must reference an application directly included by the currently active application.\n\n## How You Can Execute a ProcHandle Object\n\nTo execute the procedure specified by the ProcHandle object, invoke the Call method defined for the ProcHandle class. The syntax is:\n\n```\n[retval =] prochandle.Call(parameters);\n```\n\nThe *parameters* are specified just as in a callproc statement. For an explanation about using the callproc statement, see How You Can Pass Parameters to 4GL Procedures.\n\nThe Call method uses the scope specified by the ProcHandle object to execute it.\n\n## Restrictions to Using the Call Method\n\nThere are some restrictions to using the Call method. This method can be invoked only in the following places:\n\n- In a statement by itself\n- As the right side of an assignment\n\nThe Call method can never be invoked inside an expression.\n\nIf a procedure handle represents a local procedure that was defined in a frame or global procedure component, there are two additional restrictions on when the Call method can be invoked on the procedure handle:\n\n- The Call method cannot be invoked after the frame or global procedure in which it was defined (and which contains the scope on which the GetProcHandle was issued) has terminated.\n- The Call method cannot be invoked from a \"thread\" other than the one in which the GetProcHandle was issued.\n\nFor example, a frame can create a procedure handle on one of its local procedures and pass it as a callback routine to a called frame, but not to an opened frame (because the openframe statement creates a new thread).\n\nThese restrictions do not apply to a procedure handle that represents a global procedure or a local procedure defined in a user class script."
        ]
    }
]
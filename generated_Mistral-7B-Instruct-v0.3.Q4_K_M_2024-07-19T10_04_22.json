[
    {
        "instruction": "What happens when an event block is triggered in a frame script?",
        "input": "",
        "output": "When the event occurs, OpenROAD executes the statements specified by the statementlist. For example, if it's a click event on a button, it could change the value of a variable, or open another window, etc.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How do frame scripts work within OpenROAD?",
        "input": "",
        "output": "Frame scripts in OpenROAD are used to initialize local variables for the frame, perform any start-up operations for the frame, include event blocks for events that apply to the frame as a whole or for specific fields or menu items. When an event occurs, OpenROAD executes the statements specified by the statementlist in the corresponding event block of the frame script.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Explain the use of event blocks in a frame script and provide an example of a typical event block.",
        "input": "",
        "output": "A frame script can include one or more event blocks. These blocks contain the code for the events for the frame, form fields, and menu items. An event block is a sequence of statements associated with one or more specific events. Here's an example of a typical event block:\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What are the rules for coding event blocks?",
        "input": "",
        "output": "1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n2. If the event is a frame event, do not include a variable name.\n3. You can include more than one event type in an event block.\n4. Declare local variables in the declare section of an event block.\n5. Separate the statements in the statementlist with semicolons.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What are some typical frame events?",
        "input": "",
        "output": "- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Provide an example of how to handle changes in data in a frame script.",
        "input": "",
        "output": "To handle changes in data in a frame script, you can use the 'on childsetvalue' event block. Here's an example:\n```\non childsetvalue =\nbegin\n    // Your code here to handle changes in data\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the 'data_is_changed' variable in a frame script? Provide an example of its usage.",
        "input": "",
        "output": "The 'data_is_changed' variable in a frame script is used to indicate whether any changes have been made to the data in the form fields. It's often used to enable or disable submit buttons or other actions based on whether there are changes or not. Here's an example:\n```\ndeclare local string data_is_changed = FALSE;\n\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n\n// Submit button code here. Only enabled if 'data_is_changed' is true.\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Explain how to use the 'initialize' statement in a frame script. Provide an example of its usage.",
        "input": "",
        "output": "The initialize statement is used in a frame script for initializing local variables and performing start-up operations for the frame. Here's an example:\n```\ninitialize =\nbegin\n    declare local string my_variable = 'Hello, World!';\n\n    // Your code here to perform start-up operations\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What are event blocks in Actian 4GL SQL frame scripts and how are they used?",
        "input": "",
        "output": "Event blocks in Actian 4GL SQL frame scripts are a sequence of statements associated with specific events, such as changes in data or interactions with the user interface. They allow you to define the actions that should be taken when an event occurs. Here's an example:\n```\non click button1 =\nbegin\n    // Your code here to execute when 'button1' is clicked\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Given the example in the document, explain what happens when a child value changes.",
        "input": "",
        "output": "When a child value changes in Actian 4GL SQL frame scripts, the 'on childsetvalue' event block is triggered. In this example, it sets the value of a local variable named 'data_is_changed' to TRUE. This can be used to determine whether data has been modified since it was last saved.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Provide an example of how to use multiple event blocks in a frame script.",
        "input": "",
        "output": "Multiple event blocks can be used in a frame script by defining them for different events, such as changes in data or interactions with the user interface. Here's an example:\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n\non button1 click =\nbegin\n    // Your code here to execute when 'button1' is clicked\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the role of a frame script in OpenROAD?",
        "input": "",
        "output": "A frame script in OpenROAD (Actian DataConnect) is a collection of statements that define what occurs during various events in a form. Frame scripts provide a way to control and manipulate data on a form, perform calculations, validate user input, and handle other operations related to the form. They are essential for creating dynamic forms and applications in OpenROAD.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How does Actian 4GL SQL handle conditional logic in frame scripts? Provide an example of a simple if-else statement in a frame script.",
        "input": "",
        "output": "Actian 4GL SQL uses the 'if' and 'else' keywords to perform conditional logic in frame scripts, just like many other programming languages. Here's an example of a simple if-else statement:\n```\ndeclare local integer user_age;\nuser_age = get_user_input();\n\nif (user_age < 18) then\n    display \"You are underage\";\nelse\n    display \"Welcome!\";\nend if;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the difference between a local and a global variable in a frame script? Provide an example of each.",
        "input": "",
        "output": "In Actian 4GL SQL, a local variable is visible only within the block or procedure where it's declared, while a global variable can be accessed from anywhere in the application. Here are examples of both:\n```\n// Local variable example\ndeclare local string my_local_variable;\nmy_local_variable = \"Local Variable\";\n// The 'my_local_variable' is only visible within this block.\n\n// Global variable example\ndeclare global string my_global_variable;\nmy_global_variable = \"Global Variable\";\n// The 'my_global_variable' can be accessed from any block in the application.\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the function of 'on childsetvalue' in a frame script?",
        "input": "",
        "output": "'on childsetvalue' is an event that is triggered when the value of a child field (or group of fields) changes in a form within Actian 4GL SQL. This event allows developers to execute code in response to changes made by users or other programs. For example, you can use it to check for data validity or trigger other actions based on the changes in the child fields. Here's an example:\n```\non childsetvalue =\nbegin\n    // Your validation or other logic here\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Can you explain how frame scripts are used in OpenROAD?",
        "input": "",
        "output": "In OpenROAD, frame scripts play a crucial role as they allow developers to create dynamic user interfaces and business logic for their applications. Frame scripts can be attached to individual fields or groups of fields on a form (known as frames) and are triggered by events such as 'on childsetvalue' or 'on submit'. Developers use frame scripts to implement validation, calculations, and other complex business rules within the application.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the data_is_changed variable in a frame script?",
        "input": "",
        "output": "In a frame script, the data_is_changed variable is set to TRUE whenever a change occurs on a child control (e.g., a textbox) within the parent frame. This variable can then be used elsewhere in the script to check if any changes have been made since the last save or submission.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Can you give an example of how to use the on childsetvalue event block in a frame script?",
        "input": "",
        "output": "The on childsetvalue event block can be used in a frame script to determine whether the value of a child control has been modified. Here's an example:\n\n```\non childsetvalue =\nbegin\n    if (old_value <> new_value) then\n        data_is_changed = TRUE;\n    end if;\nend;\n```\nIn this example, the old_value variable stores the previous value of the child control and new_value stores the current value. If there's a difference between the two values, it means that the control has been modified and data_is_changed is set to TRUE.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What are the main differences between using a frame script and a procedure in Actian 4GL SQL? Provide examples of when it would be appropriate to use each.",
        "input": "",
        "output": "Frame scripts (also known as form scripts) are typically used for handling events such as data input and validation, user interactions with the interface, or conditional logic specific to a single screen. On the other hand, procedures can handle complex computations and manipulations of data that may be used across multiple forms or screens.\n\nFor example, when you want to create a form that validates user input before saving data, you would use a frame script like this:\n```\non childsetvalue =\nbegin\n    // Your validation code here\nend;\non save =\nbegin\n    if (validation_passes()) then\n        // Save your data here\n    else\n        // Display an error message and do not save the data\n    end if;\nend;\n```\nIf you need to perform calculations on data from multiple forms or screens, you would use a procedure like this:\n```\ndeclare local decimal total_sales;\n\nprocedure sum_sales();\nbegin\n    // Loop through each form and add up the sales figures\n    for each screen_number in 1 to get_num_screens() do\n        // Get the sales figure from the current screen\n        screen_sales = get_sales(screen_number);\n\n        // Add the sales figure to our total\n        total_sales += screen_sales;\n    end for;\n\n    // Display or save the total sales\n    display \"Total Sales: \" + total_sales;\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the 'begin' and 'end' keywords in Actian 4GL SQL frame scripts? Provide an example of their usage.",
        "input": "",
        "output": "The 'begin' and 'end' keywords are used to delimit a block of code within a frame script. This block of code will only be executed if the condition or event that triggers it is met. Here's an example:\n```\non button1 click =\nbegin\n    // Your code here to execute when 'button1' is clicked\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the data_is_changed variable in frame scripts?",
        "input": "",
        "output": "The data_is_changed variable in frame scripts is often used to determine whether the data on a form has been modified since it was last saved or retrieved. When this variable is set to TRUE, it indicates that there are changes that need to be saved or submitted. In some cases, setting data_is_changed can trigger certain actions, such as saving the data to a database or validating the input.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Can you explain how the OpenROAD environment is used in developing Actian 4GL SQL applications?",
        "input": "",
        "output": "OpenROAD is an integrated development environment (IDE) for building Actian 4GL SQL applications. It provides a graphical interface for designing forms, reports, and other user interfaces, as well as a programming language to create business logic and data manipulation code. OpenROAD includes tools for testing, debugging, and deploying applications, as well as integrations with various databases such as Actian Zen, SQL Server, and Oracle.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How can you use comments in Actian 4GL SQL frame scripts to make your code more readable and maintainable? Provide an example of a commented frame script.",
        "input": "",
        "output": "In Actian 4GL SQL, you can use the double forward slash // to create single-line comments within the frame script. Multiline comments are created using the /* and */ symbols:\n```\ndeclare local integer user_age;\n/* This variable holds the age entered by the user */\nuser_age = get_user_input();\n\n/* Check if the user is under 18 years old */\nif (user_age < 18) then\n    display \"You are underage\";\nelse\n    display \"Welcome! You can enter data now.\";\nend if;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Explain the syntax of a frame script and provide an example with variables declaration and initialization.",
        "input": "",
        "output": "The general syntax of a frame script in OpenROAD is:\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\nHere's an example with variables declaration and initialization:\n```\ninitialize counter = 0, myArray = new array(5);\nbegin\n    counter = counter + 1;\n    myArray[counter] = \"Item\" + to_string(counter);\nend;\n```\nIn this example, we declare two local variables: `counter` and `myArray`. We also initialize both of them. The variable `counter` is initialized with the value of 0, while `myArray` is instantiated as a new array with a size of 5. Then we increment the `counter` by 1 and assign a string to the current element in the `myArray`.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Describe the difference between frame scripts and field or menu item scripts.",
        "input": "",
        "output": "Frame scripts and field or menu item scripts are used for different purposes in OpenROAD (Actian DataConnect). A frame script contains statements that define what occurs during various events related to a form as a whole, including form resizing or user events. Field or menu item scripts, on the other hand, contain statements that define what occurs when a specific field or menu item is interacted with, such as when its value changes or it's clicked.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How are local variables declared in an Actian 4GL SQL frame script?",
        "input": "",
        "output": "Local variables can be declared in the initialize statement or in the declare section of an event block. If a declare block is not followed by a begin block, enddeclare must be used at the end. You may also use local variable declarations within the curly braces ( { and } ) of a begin-end block if needed. The syntax for declaring variables is as follows:\n\nFor a single local variable declaration:\n```\nlocal_variable_name = datatype;\n```\nFor multiple local variable declarations:\n```\nlocal_variable1 = datatype1;\nlocal_variable2 = datatype2;\n...\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the role of event blocks in a frame script and what kind of events can they handle?",
        "input": "",
        "output": "Event blocks in a frame script are used to specify the code for various events associated with the frame as a whole, individual fields or menu items. The syntax for an event block is:\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\nThe events that can be handled include terminate, child entry, child exit, child set value, frame resized, user event and many more. For more information about these events, you can refer to the Actian 4GL SQL documentation.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How is the \"on childsetvalue\" frame script used in OpenROAD?",
        "input": "",
        "output": "The \"on childsetvalue\" frame script is used to handle changes in any field, subform, or composite field on a form. In Actian 4GL SQL, the script sets the variable `data_is_changed` to TRUE when any data in a child item of the frame changes, indicating that an update has occurred.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the role of the \"on childsetvalue\" frame script in updating records?",
        "input": "",
        "output": "The \"on childsetvalue\" frame script plays a crucial role in updating records by setting the `data_is_changed` variable to TRUE when any data change occurs. This value can then be used in other scripts or procedures to determine whether to save changes to the database, perform validations, or trigger specific actions, such as notifying the user of updates.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Explain the use of the on childsetvalue event in a frame script and provide an example where this event would be useful.",
        "input": "",
        "output": "The `on childsetvalue` event is triggered when the value of a child control within a frame is changed. This event can be used to perform actions based on changes made to the child control's value, such as setting a variable or updating another control. For example, consider a form with two textboxes: one for the user's name and one for their age. When the user enters their name, the following script can update the caption of another label control:\n```\non childsetvalue =\nbegin\n    if (child_name() = 'txtName') then\n        lblWelcome.caption = 'Hello,' + txtName.value;\n    end if;\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the difference between a global and local variable in Actian 4GL SQL frame scripts? Provide an example of when you would use each type of variable.",
        "input": "",
        "output": "In Actian 4GL SQL, a global variable has its value available to all frames within the application, while a local variable is only accessible within the current frame. Global variables are useful for storing information that needs to be shared across multiple frames or screens, such as user preferences or session state data. Local variables should be used when you want to limit the scope of your code to a single frame, for example, to store temporary values during user input validation.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Can you explain how the 'on childsetvalue' event block works in a frame script?",
        "input": "",
        "output": "The 'on childsetvalue' event block is triggered when a change occurs in a set of related values, or a 'childset' in OpenROAD. The code inside this event block is executed whenever such a change is detected. In the example provided, it sets the variable 'data_is_changed' to TRUE, which could be used to indicate that there are unsaved changes in the form.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the 'begin' and 'end' keywords in the provided frame script?",
        "input": "",
        "output": "In this specific frame script example, 'begin' and 'end' are used to define a block of statements that will be executed together. Everything between these two keywords forms a block which is considered as a unit. The code inside the block is only executed when the event block (in this case 'on childsetvalue') is triggered.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Can you provide an example of a frame script that performs data validation?",
        "input": "",
        "output": "Sure! Here's an example using Actian 4GL SQL where data is validated based on specific conditions:\n```\non field1 change =\nbegin\n    if length(field1) < 5 then\n        message_box(\"Error: Field1 must be at least 5 characters.\");\n        set focus to field1;\n        return false;\n    end if;\n\n    // Other validation checks or actions can be added here.\n\n    return true;\nend;\n```\nThis script performs data validation on a field named \"field1\" when its value changes. If the length of \"field1\" is less than 5 characters, it displays an error message and refocuses the input field. The entire validation process returns false if any errors are found to prevent further processing or save operations.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How can we create a frame script to handle user interactions with a specific button?",
        "input": "",
        "output": "To handle user interactions with a specific button in Actian 4GL SQL, you can create an `on click` event script. Here's an example:\n```\non button1 click =\nbegin\n    // Your code to execute when 'button1' is clicked goes here.\nend;\n```\nYou can place this code within a form definition and modify the `button1` reference to match your actual button name or identifier. The script will execute when the button is clicked, allowing you to implement various actions such as updating records, performing calculations, displaying messages, or initiating other processes based on your requirements.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Give an example of how a frame script is used in OpenROAD for validating data input.",
        "input": "",
        "output": "In OpenROAD, you can use frame scripts to perform validation checks on the data entered by users. Here's an example: Suppose you have a form with an age field that should only accept values between 18 and 65. You could use the following script for validating the input:\n```\non child set value =\nbegin\n    if (age < 18 or age > 65) then\n        messagebox \"Invalid Age\", \"Error\", MB_OK\n        age := 0;\n    end if;\nend;\n```\nIn this example, the on child set value event is used to trigger the validation check whenever the user enters a new value in the age field. If the entered age value is outside the acceptable range (18 to 65), an error message box is displayed and the age value is reset to 0. This ensures that only valid data is saved or submitted.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How can frame scripts be used for generating dynamic HTML in OpenROAD?",
        "input": "",
        "output": "In OpenROAD, you can use frame scripts to generate dynamic HTML by creating a form dynamically using the following steps:\n1. Define the structure of the form in the script, including the fields, their types and properties.\n2. Use the INSERT INTO statement to insert rows into the HTML table. Each row corresponds to a field on the form.\n3. Use the SET statement to set the values of each field based on data from a database or other sources.\n4. Render the generated HTML using the HTML_OUT function in the script.\n\nHere's an example: Suppose you have a table with employee information and you want to display it in a dynamic HTML table. You could use the following script:\n```\ndeclare\n    ln_counter : integer;\nend declares;\n\nset ln_counter = 0;\ninsert into HTML_OUT\nselect * from Employees order by lastname, firstname;\n\nfor each row in cursors.employees\nbegin\n    set cell(\"ln\" || ln_counter, 0, cursors.employees[\"lastname\"]);\n    set cell(\"ln\" || ln_counter, 1, cursors.employees[\"firstname\"]);\n    // Add more cells with other employee details as needed\n    increment ln_counter;\nend;\n```\nIn this example, the INSERT INTO statement is used to insert each row from the Employees table into the HTML_OUT function. The FOR EACH loop is then used to iterate through the rows and set the values of each cell in the HTML table based on the data from the database. This generates a dynamic HTML table that displays employee information, which can be refreshed whenever new data is added to the database.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Explain how to use parameter lists in frame scripts.",
        "input": "",
        "output": "Parameter lists in frame scripts allow you to declare parameters of a frame that can be specified as arguments for various statements such as callframe, openframe, and gotoframe. The syntax for specifying a parameter list is `{variable = datatype {, variable = datatype}}`. An example of using a parameter list might look like this:\n\n```\n[initialize (param1 = string, param2 = integer) ]\n```\n\nIn the given example, 'param1' is a string and 'param2' is an integer that can be passed to functions or methods in the frame script.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the role of local variable declarations in a frame script?",
        "input": "",
        "output": "Local variables are used within a frame script for storing and manipulating data during the execution of the script. They can be declared in the 'declare' section of the initialize statement or inside an event block. Local variables that are not parameters should be declared before any statements in the 'begin-end' block, following the 'declare' keyword. For example:\n\n```\n[initialize]\n    declare local_var1 as integer;\n    local_var1 = 5;\n```\n\nIn this example, 'local_var1' is an integer variable that is declared and set to 5 in the initialize statement. It can be used anywhere within the frame script. Local variables are useful for storing intermediate values, temporary data, and other such information during the execution of the frame script.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Provide an example of a common use case for frame scripts with OpenROAD and Actian 4GL SQL.",
        "input": "",
        "output": "A common use case for frame scripts in OpenROAD with Actian 4GL SQL is data validation. For instance, when a user enters data into a form, the frame script can check if the entered data meets certain criteria. If the data doesn't meet the criteria, an error message can be displayed to the user, and the submit button may be disabled until the issue is resolved. Here's a simple example:\n```\ndeclare local string error_message;\n\non childsetvalue =\nbegin\n    if age < 18 then\n        error_message = \"Age must be at least 18.\";\n        message box(error_message);\n        data_is_changed = FALSE;\n        exit;\n    end if;\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Describe the role of variable declarations in frame scripts.",
        "input": "",
        "output": "In frame scripts, variable declarations define storage areas for values that can be used and manipulated within the script. They are typically declared at the beginning of a script using the 'declare' keyword followed by the data type and name of the variable. These variables can then be assigned values or used in expressions throughout the script to perform specific tasks such as validation, calculations, or conditional logic.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    }
]
[
    {
        "instruction": "Create a global procedure in Actian 4GL OpenROAD Global Procedures that accepts two integer parameters and returns their sum.",
        "input": "Define the procedure named \"add_integers\". Assume the input parameters are \"a\" and \"b\".",
        "output": "```\nprocedure add_integers = integer;\ndeclare\n    sum = 0;\nbegin\n    select :sum = a + b from dual;\n    return sum;\nend\n-- Usage\ntotal = add_integers(5, 7);\nmessage 'Total: ' || char(total);\n```\nThis procedure named \"add_integers\" calculates the sum of its input parameters (a and b) and returns the result.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Provide an example of a global 4GL procedure that updates multiple tables in Actian 4GL OpenROAD Global Procedures using JOINs.",
        "input": "Suppose you have two tables 'employees' and 'departments'. The employee table has columns id, name, department_id. The departments table has columns id and name. You are tasked to update the 'salary' column of employees with a value based on the department's budget if the current salary is lower than 60% of the department's budget.",
        "output": "```\nprocedure update_employee_salary = boolean;\ndeclare\n    e_row employee%rowtype;\n    d_row department%rowtype;\nbegin\n    for each e_row in select employees order by name loop\n        select budget into :budget from departments where id = e_row.department_id;\n        if (e_row.salary < 0.6 * budget) then\n            update employees set salary = 0.6 * budget where id = e_row.id;\n        end if;\n    end for;\n    return true;\nend\n-- Usage\nexecute update_employee_salary();\n```\nThis procedure updates the 'salary' column of the 'employees' table based on the budget of their corresponding departments, if the current salary is lower than 60% of the department's budget.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write code for error handling in Actian 4GL OpenROAD Global Procedures using the OnError event.",
        "input": "Create an example global procedure with simple input validation and an OnError block to handle errors. The procedure should validate that an integer value passed as an argument is greater than 10. If the value is less than or equal to 10, it should throw an error with a specific error message \"The number must be greater than 10\".",
        "output": "```\nprocedure validate_num(number = integer) on-error(\"The number must be greater than 10\");\nbegin\n    if number <= 10 then\n        raise error message = \"The number must be greater than 10\";\n    else\n        -- Perform the main operation using 'number'...\n    end;\nend;\n```\nThis procedure validates input, and when the condition is not met, it raises an error with the specified error message.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write code to show how to use local variables in Actian 4GL OpenROAD Global Procedures.",
        "input": "",
        "output": "Here's an example of using local variables within a global procedure:\n```\nprocedure calculate_sum(number1 = integer, number2 = integer) as sum_result = integer;\nbegin\n    declare sum_result as 0; -- Define the local variable 'sum_result' with initial value zero.\n    sum_result = number1 + number2; -- Local variables can be assigned values during execution.\nend;\n```\nIn this example, the 'sum_result' variable is a local variable used within the procedure to calculate and store the sum of two inputs.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write an Actian 4GL OpenROAD Global Procedure that takes two string parameters, concatenates them, and returns the result as a single string.",
        "input": "Define the global procedure named \"concat_strings\". Assume the input parameters are \"str1\" and \"str2\".",
        "output": "```\nprocedure concat_strings = char;\ndeclare\n    concatenated_string = '';\nbegin\n    select :concatenated_string = str1 || ' ' || str2 from dual;\n    return concatenated_string;\nend\n-- Usage\nresult_str = concat_strings('Hello, ','World!');\nmessage result_str;\n```\nThis procedure named \"concat_strings\" combines the input parameters \"str1\" and \"str2\", separated by a space, into a single string.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write an Actian 4GL OpenROAD Global Procedure to find the highest value among multiple numbers in a table.",
        "input": "Assume there is a table named \"numbers\" with the columns \"id\", \"number\". The procedure should return the id and number of the highest value.",
        "output": "```\nprocedure find_max_value = struct;\ndeclare\n    max_val as numeric(10, 2);\n    max_id as integer;\nbegin\n    select max(number) into :max_val from numbers;\n    select id, number as highest_value\n        from numbers\n        where number = max_val;\nend\n-- Usage\nresult_struct = find_max_value();\nmessage 'Id: ' || result_struct.id || ', Highest Value: ' || char(result_struct.number);\n```\nThe procedure named \"find_max_value\" finds and returns the id and highest value (with decimal precision) of a number from table \"numbers\".",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write a code example that demonstrates passing and receiving multiple parameters in an Actian 4GL OpenROAD Global Procedure.",
        "input": "Create a procedure named \"processOrders\" which accepts three input parameters: order_id, quantity, and item. It should also output the order status and total price. The \"orders\" table should contain columns for id (order_id), quantity, item, price (cost), and status. Assume that the table is populated with sample data as follows:\n\n```\nid |    quantity   |  item       |  cost      | status\n----|--------------|------------|-----------|--------\n1  |             5 | apple       |    1      | pending\n2  |             3 | banana      |    0.5    | shipped\n```",
        "output": "Here's a code example demonstrating the use of multiple parameters in an Actian 4GL OpenROAD Global Procedure:\n\n```\nprocedure processOrders(order_id = integer, quantity = integer, item = text) returning text, float;\n    declare order_status = text;\n    declare total_price = float;\n\n    select status into :order_status from orders where id = :order_id;\n    select cost * :quantity into :total_price from orders where id = :order_id and item = :item;\n\n    -- update order status, if needed\n    if :order_status = 'pending' then\n        update orders set status = 'processed' where id = :order_id;\n    endif;\n\n    return :item || ', Order ID: ' || :order_id || ', Status: ' || :order_status || ', Total Price: $' || :total_price;\nend\n\n-- Usage\nresult = processOrders(1, 5, 'apple');\ndisplay result;\n```\nIn this example, the procedure accepts three parameters and outputs an order status string along with a total price. The sample data used for testing is a small table of orders.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "What are some common data manipulation functions available in Actian 4GL OpenROAD Global Procedures?",
        "input": "",
        "output": "Some commonly used data manipulation functions in Actian 4GL OpenROAD include:\n- `concat` : Concatenates strings\n- `substr` : Extracts a substring from a string\n- `trim` : Removes leading and trailing whitespace from a string\n- `length` : Returns the length of a string\n- `left` : Returns left part of a string with specified length\n- `right` : Returns right part of a string with specified length\n- `upper`: Converts all characters in a string to uppercase\n- `lower`: Converts all characters in a string to lowercase\n- `format` : Formats a date or number",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "How to declare and initialize a global variable in Actian 4GL OpenROAD Global Procedures?",
        "input": "Declare a global integer variable named 'count' and set its initial value to 0.",
        "output": "Here's how to declare and initialize a global variable:\n```\ndeclare global count = 0;\n-- Usage\ncount = count + 1;\n```\nThis declares a global integer variable called 'count' with an initial value of 0, and increases the value by 1 in the example usage.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Create an Actian 4GL OpenROAD Global Procedure to read CSV data into a table and return the count of rows.",
        "input": "Assume a CSV file named \"data.csv\" exists in the server's default directory with columns \"Name\", \"Age\". The procedure should store the data into a new table named \"people\" and then return the number of rows inserted.",
        "output": "```\nprocedure read_csv = integer;\nbegin\n    -- create temporary file stream to handle CSV input\n    declare file_stream as file_stream(input_file = 'data.csv');\n\n    -- define delimiter and other options\n    declare delim as character(1) = ',';\n    declare ignore_lines as boolean = true;\n    declare skip_header as integer = 0;\n\n    -- open CSV file for reading\n    open :file_stream with input_mode = input,\n         delimiter = :delim,\n         ignore_blank_lines = :ignore_lines,\n         blank_as_null = false,\n         first_row_is_header = :skip_header;\n\n    -- create empty people table to store CSV data\n    create temp table people(Name as varchar(100), Age as integer);\n\n    -- loop through lines of the CSV file and insert data into the people table\n    while (not eof(:file_stream)) do\n        read line from :file_stream into :line;\n        insert into people(Name, Age) values(:trim(:line), cast(substring(:line from index_of(delim in :line + 1) to length(:line)) as integer));\n    end while;\n\n    -- close the CSV file and delete the temporary table after use\n    close :file_stream;\n    drop table people;\n\n    -- return the count of rows inserted into the people table\n    select count(*) as total from people;\nend\n-- Usage\ntotal_rows = read_csv();\nmessage 'Total Rows Inserted: ' || total_rows;\n```\nThe Actian 4GL OpenROAD Global Procedure reads CSV data from file \"data.csv\", creates a temporary table named \"people\", and stores the data from the CSV into the \"people\" table. Finally, it returns the number of rows inserted into the table.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write code to pass parameters by reference in Actian 4GL OpenROAD Global Procedures.",
        "input": "Declare an array 'myArray' with elements [1, 2, 3] and another variable 'sum' as 0. Now write a procedure 'compute_sum_by_reference' to sum the values in 'myArray', modifying it directly instead of copying into a new array or variable.",
        "output": "To pass parameters by reference, create an inout parameter:\n```\nprocedure compute_sum_by_reference(inout array myArray, sum = integer) = void;\nbegin\n    declare i = 1, total = 0;\n\n    loop until (i > size(myArray));\n        total = total + myArray[i];\n        i = i + 1;\n    end loop;\n\n    sum = total;\nend;\n\n-- Usage\nmyArray = [1, 2, 3];\nsum = 0;\ncompute_sum_by_reference(inout myArray, sum);\nmessage 'Sum: ' || char(sum); -- Outputs \"Sum: 6\"\n```\nThe `compute_sum_by_reference` procedure modifies the original array 'myArray' instead of creating a new one.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "How to create a recursive function in Actian 4GL OpenROAD Global Procedures?",
        "input": "",
        "output": "To create a recursive function, you can use the following template:\n```\nprocedure factorial(n = integer) returning integer;\nbegin\n    if (n <= 1) then return 1;\n    else return n * factorial(n - 1);\n    end if;\nend;\n\n-- Usage\nmessage 'Factorial of 5: ' || char(factorial(5)); -- Outputs \"Factorial of 5: 120\"\n```\nThe function calls itself until it reaches the base case. This example calculates the factorial using a recursive function.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Create a function in Actian 4GL OpenROAD Global Procedures that calculates the total amount spent on each department and returns it as a record containing the department ID, name, and total spend.",
        "input": "Suppose we have a 'purchases' table with columns id, item_name, quantity, price, and department_id. The table has multiple rows indicating various purchases across different departments.",
        "output": "```\nprocedure total_spend_per_department(out total_spend department%rowtype) = boolean;\ndeclare\n    spend decimal(18,2);\nbegin\n    for each row in select sum(quantity * price) as amount, department_id from purchases group by department_id loop\n        spend := amount;\n    end for;\n    total_spend.department_id := database.get_system_variable('dbms_application_id'); -- get current department ID\n    total_spend.name := select name from departments where id = total_spend.department_id limit 1;\n    total_spend.total_spend := spend;\n    return true;\nend;\n-- Usage\ndeclare dep_totals department%rowtype;\nexecute total_spend_per_department(dep_totals);\nmessage 'Total spend for the current department: ', dep_totals.total_spend;\n```\nThis procedure calculates the total amount spent on each department and returns it as a record containing the department ID, name, and total spend. The current department's information is used to determine which department's total spend is calculated.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Demonstrate a simple example of exception handling in Actian 4GL OpenROAD Global Procedures using the \"on error\" keyword.",
        "input": "Suppose you are writing a function that accepts two parameters, a and b. The function calculates their sum but throws an exception if the second parameter is zero.",
        "output": "```\nprocedure add_numbers(a = integer, b = integer; out result = decimal(18,2); on error) = boolean;\nbegin\n    if (b = 0) then throw new error('Cannot divide by zero'); end if;\n    result := a + b;\nend on error;\n-- Usage and exception handling example\ntry\n    message 'Result: ', add_numbers(5, 0);\ncatch any_error as e;\n    message 'Exception occurred: ', e.message;\nend try;\n```\nThis demonstrates exception handling in Actian 4GL using the \"on error\" keyword. If an exception is thrown (in this case when b is zero), the catch block handles it, and a user-friendly message is outputted.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write code to call a global procedure from another Actian 4GL OpenROAD Global Procedure or a local program.",
        "input": "",
        "output": "Here's an example of calling a global procedure:\n```\nprocedure main_program();\nbegin\n    call calculate_area(5);\nend;\n\nprocedure calculate_area(radius = float) = float;\ndeclare\n    pi = float;\nbegin\n    pi = 3.14159;\n    return pi * radius * radius;\nend\n```\nThis example shows calling the 'calculate_area' procedure from a main program.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Create a global procedure in Actian 4GL OpenROAD that accepts a list of customers and returns the total sales for each customer.",
        "input": "Here is an example list of customers with their respective sales:\n```\ncustomer_list = {\n    \"John Doe\" : 500,\n    \"Jane Smith\" : 750,\n    \"Alice Johnson\" : 300,\n    \"Charlie Brown\" : 600\n};\n```",
        "output": "Here's a global procedure that calculates total sales for each customer:\n```\nprocedure calculate_total_sales(customers = dictionary) = dictionary;\ndeclare\n    result : dictionary;\nbegin\n    loop index = key of customers;\n        if (index != null); then\n            result[index] = customers[index] + sum(values of customers where key = index);\n        end if;\n    end loop;\nend;\n```\nThe 'calculate_total_sales' procedure creates a new dictionary called 'result'. It iterates through the input 'customers' dictionary and adds the initial sale amount for each customer to the running total. The resulting 'result' dictionary contains keys that are the customers' names, and values that are their total sales amounts.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "How can one define a reusable loop structure to insert multiple rows into an Actian 4GL OpenROAD Global Procedure?",
        "input": "Assume there is a table named \"items\" with columns \"id\", \"item_name\", and \"unit_price\". A global procedure should be written that inserts multiple rows using the following data:\n\n```\ninsert_data = [<id1, 'Item 1', 25.90>, <id2, 'Item 2', 18.75>, <id3, 'Item 3', 6.99>]\n```",
        "output": "```\nprocedure insert_multiple_rows = struct;\ndeclare\n    cur as cursor for\n        select id, item_name, unit_price from items;\n    data as table of record struct (id as integer, name as char(50), price as numeric(10, 2));\nbegin\n    initialize data;\n    loop read cur into :data[count(data)+1]; exit when end-of-file(cur);\n        insert into items values (:data[count(data)].id, :data[count(data)].name, :data[count(data)].price);\n    endloop;\n    close cur;\nend\n-- Usage\ninsert_multiple_rows();\n```\nThe global procedure \"insert_multiple_rows\" takes advantage of a reusable loop structure to efficiently insert multiple rows from an external data source (in this example, the provided data) into table \"items\".",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write an example Actian 4GL OpenROAD Global Procedure that retrieves all the distinct departments with the count of their employees.",
        "input": "Assume a table named 'employees' has columns id, name and department_id.",
        "output": "```\nprocedure get_departments = boolean;\ndeclare\n    d_row department%rowtype;\nbegin\n    for each d_row in select distinct department_id as id, count(*) as employee_count from employees group by department_id loop\n        display id || ' - ' || employee_count;\n    end for;\nend\n-- Usage\nexecute get_departments();\n```\nThis procedure retrieves and displays all distinct departments with their respective counts of employees.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Suppose you have a table named 'sales' with columns order_id, product_id, quantity, price, and date. You are tasked to create an Actian 4GL OpenROAD Global Procedure that calculates the total revenue of sales made on a specific date using a stored procedure 'get_total_revenue'.",
        "input": "Assume the stored procedure takes an input parameter for date in format 'YYYY-MM-DD'.",
        "output": "```\nprocedure total_sales_revenue = boolean;\ndeclare\n    revenue number;\nbegin\n    execute get_total_revenue('2023-01-01') into :revenue; -- replace '2023-01-01' with the desired date\n    display \"Total Revenue on 2023-01-01 is: $\" || revenue;\nend\n-- Usage\nexecute total_sales_revenue();\n```\nThis procedure retrieves and displays the total revenue of sales made on a specific date using the 'get_total_revenue' stored procedure.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Create an Actian 4GL OpenROAD Global Procedure that calculates the sum of squares for an array of numbers provided as an input parameter and returns the result.",
        "input": "Define the global procedure named \"sum_of_squares\". Assume the input parameter is a table named \"numbers\" with one column \"number\".",
        "output": "```\nprocedure sum_of_squares = numeric;\ndeclare\n    sum_of_squares as numeric;\nbegin\n    initialize sum_of_squares;\n    loop read numbers into :number; exit when end-of-file(numbers);\n        select :sum_of_squares += number ** 2 from dual;\n    endloop;\n    return sum_of_squares;\nend\n-- Usage\nresult_sum = sum_of_squares([5, -3, 8.01, 4]);\nmessage result_sum;\n```\nThis procedure \"sum_of_squares\" calculates the sum of squares of a table containing an array of numbers and returns the result.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write an Actian 4GL OpenROAD Global Procedure to sort a specified column in a given table based on the values provided in another table, taking the two tables as input parameters.",
        "input": "Assume there are two tables named \"employees\" and \"sort_order\". The employees table has columns \"id\", \"name\", and \"salary\", while the sort_order table has column \"emp_ids\".",
        "output": "```\nprocedure sort_table_by_sort_order = struct;\ndeclare\n    temp_table as table;\nbegin\n    initialize temp_table;\n    select emp_ids, name, salary into :temp_table from employees order by (select index(emp_ids) from sort_order);\n    delete from employees;\n    insert into employees select * from temp_table;\nend\n-- Usage\nsort_table_by_sort_order('employees', 'sort_order');\n```\nThis procedure \"sort_table_by_sort_order\" sorts a given table (\"employees\") based on the values in another table (\"sort_order\"). It first creates an intermediate temporary table, then deletes all rows from the original table and finally inserts the sorted data into the original table.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write code to perform a data validation check for missing values in Actian 4GL OpenROAD Global Procedures.",
        "input": "Create a procedure named \"validate_order\" which checks that all required fields (id, quantity, item, status) in the orders table contain non-null values before inserting a new row. Assume that the input is coming from user inputs and you should prompt the user for re-entry if any field is missing.",
        "output": "Here's an example of how to perform a data validation check for missing values:\n```\nprocedure validate_order() returning boolean;\nbegin\n    local order_id = integer;\n    local quantity = integer;\n    local item = text;\n    local status = text;\n\n    prompt \"Enter the order ID: \"; get :order_id; if empty(trim(:order_id)) then return false; endif;\n    prompt \"Enter the item name: \"; get :item; if empty(trim(:item)) then return false; endif;\n    prompt \"Enter the quantity: \"; get :quantity; if empty(trim(:quantity)) or :quantity < 1 then return false; endif;\n    prompt \"Enter the order status: \"; get :status; if empty(trim(:status)) then return false; endif;\n\n    -- insert new row if validation passes\n    insert into orders values (:order_id, :quantity, :item, :status);\n    return true;\nend\n```\nThis example checks that all required fields (order\\_id, item, quantity, status) are non-empty before inserting a new row in the 'orders' table. The user is prompted to re-enter any missing field.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write code to handle error conditions in Actian 4GL OpenROAD Global Procedures.",
        "input": "Create a procedure named \"add_new_order\" which performs an insert operation on the 'orders' table and handles the SQL exception (e.g., duplicate key violation) if a new order with the same id already exists. Assume that the input is coming from user inputs as follows:\n\n```\nid |    quantity   |  item       |  cost      | status\n----|--------------|------------|-----------|--------\n1  |             5 | apple       |    1      | pending\n2  |             3 | banana      |    0.5    | shipped\n```",
        "output": "Here's an example of handling error conditions in Actian 4GL OpenROAD Global Procedures:\n```\nprocedure add_new_order(id = integer, quantity = integer, item = text, status = text) returning boolean;\nbegin\n    declare is_duplicate exception handle;\n    begin\n        insert into orders values (:id, :quantity, :item, :status);\n        commit work;\n        return true;\n    exception when is_duplicate then\n        display \"Duplicate entry for Order ID:\" || :id || \". Please provide a new unique order ID.\";\n        return false;\n    end;\nend;\n```\nThis example demonstrates handling an SQL exception (e.g., duplicate key violation) if a new order with the same id already exists in the 'orders' table. The procedure returns 'false' and displays an error message for duplicate entries.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write a global function that takes two parameters, multiplies them, and checks if the result is divisible by 5. If it is, return \"The product is divisible by 5.\" otherwise, return \"The product is not divisible by 5.\"",
        "input": "Here's an example of calling the function with inputs `3` and `4`:\n```\nresult = multiply_and_check_divisibility(3, 4);\nmessage result;\n```",
        "output": "To create a global function that checks if the product is divisible by 5, you can use this code:\n```\nfunction multiply_and_check_divisibility(x = integer, y = integer) returning text;\nbegin\n    declare product as integer;\n\n    product = x * y;\n\n    if modulo(product, 5) = 0 then\n        return \"The product is divisible by 5.\";\n    else\n        return \"The product is not divisible by 5.\";\n    end if;\nend;\n```\nThis function multiplies the two input values and checks if the result is divisible by 5. If it is, it returns the message \"The product is divisible by 5.\" otherwise, it returns \"The product is not divisible by 5.\"",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    },
    {
        "instruction": "Write a global function that takes a date as input, calculates the number of days until the end of this year (December 31st), and returns it.",
        "input": "Call the function with the date \"2023-11-01\":\n```\ndays_until_year_end = get_remaining_days_of_year(\"2023-11-01\");\nmessage days_until_year_end;\n```",
        "output": "To calculate the number of days until the end of this year (December 31st), you can use this global function:\n```\nfunction get_remaining_days_of_year(d = date) returning integer;\nbegin\n    declare remaining_days as integer;\n    declare today as date;\n\n    today = current date;\n\n    // Calculate the difference between the end of this year (December 31st, 2023) and the input date.\n    remaining_days = (to_date('31-12-2023') - d) / days_in_year(2023);\n\n    return remaining_days;\nend;\n```\nThis global function takes a date as input, calculates the number of days until the end of this year (December 31st), and returns it.",
        "taxonomy_path": "compositional_skills->programming_languages->actian_4gl->global_procedures",
        "task_description": "Write Actian 4GL OpenROAD Global Procedure",
        "document": null
    }
]
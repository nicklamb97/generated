[
    {
        "instruction": "What is an initialize statement in Actian 4GL SQL frame scripts?",
        "input": "",
        "output": "The initialize statement contains the local variable definitions and start-up operations for a frame. It can have a parameter list that declares the parameters of a frame. The syntax is:\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\nWhen the optional initialize statement is used, it must be the first statement in the frame script.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How do you write an event block for a frame event?",
        "input": "",
        "output": "An event block for a frame event can be written using the following syntax:\n```\non event [variablename] =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist. If the event is a frame event, do not include a variable name. For example:\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Provide an example of using event blocks in OpenROAD for the exit of a child form.",
        "input": "",
        "output": "Here's an example:\n```\non childexit =\nbegin\n    statementlist\nend;\n```\nWhen the child form exits, OpenROAD executes the statements specified in the `statementlist`.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Write an example event block that handles the 'Frame Resized' event in Actian 4GL SQL.",
        "input": "",
        "output": "Here is an example of an event block for handling the 'Frame Resized' event in Actian 4GL SQL:\n```\non windowresize =\nbegin\n    /* Write code to handle resizing */\nend;\n```\nThis example creates a new event block and associates it with the 'windowresize' event. When this event occurs, the code within the begin...end block will be executed.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the use of the `on childsetvalue` event in a frame script?",
        "input": "",
        "output": "The `on childsetvalue` event is used to trigger actions when a change occurs in the value of any field on the form. It allows you to update other fields, validate data, or perform calculations based on the new value. The event handler for this event should contain the code that is executed when the value of a field changes.\n```\non childsetvalue =\nbegin\n    // Your code here\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is OpenROAD and how does it use frame scripts?",
        "input": "",
        "output": "OpenROAD is a development environment for creating high-performance data-driven applications. It supports multiple programming languages, including Actian 4GL SQL. Frame scripts are used in OpenROAD to build the user interface and handle user interactions. They enable developers to create event-driven applications by defining event handlers for various events such as form events, menu events, and more.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Can you provide an example of a frame script event block in Actian 4GL SQL?",
        "input": "",
        "output": "Yes, here's an example of a frame script event block that sets the data_is_changed variable to TRUE when the value of a child set changes:\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```\nThis example demonstrates the use of the on event block to handle changes in a child set's value. The event block contains one statement that sets the data_is_changed variable to TRUE when the value of the child set is changed.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How does the \"on childsetvalue\" event function in an Actian 4GL SQL frame script?",
        "input": "",
        "output": "The \"on childsetvalue\" event functions as a trigger in an Actian 4GL SQL frame script. It is called whenever a value within the current row of a child set changes. The event block contains the statements to be executed when the \"on childsetvalue\" event occurs. In this example, the event sets the data_is_changed variable to TRUE:\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the difference between a field or menu item event and a frame event in Actian 4GL SQL?",
        "input": "",
        "output": "In Actian 4GL SQL, a field or menu item event is associated with a specific field or menu item defined for the frame. To specify a field or menu item event, you must also include the variable name associated with that field or menu item in the event block. For example:\n```\non click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n```\nOn the other hand, a frame event is not associated with any specific field or menu item and does not include a variable name. For example:\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```\nThis difference is important when writing event blocks in Actian 4GL SQL because field or menu item events require a variable name, while frame events do not.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Provide an explanation of the initialize statement in Actian 4GL SQL frame scripts.",
        "input": "",
        "output": "The initialize statement is used in Actian 4GL SQL frame scripts to perform initializations for a frame, such as defining local variables and performing any necessary start-up operations before the frame is displayed. The syntax of the initialize statement includes an optional parameter list that defines the parameters of the frame, followed by the declaration of local variables and forward references to local procedures, if needed.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How are parameter lists defined in Actian 4GL SQL frame scripts?",
        "input": "",
        "output": "In Actian 4GL SQL frame scripts, a parameter list is defined as a comma-separated list of variables and their associated data types enclosed within curly brackets ({}) after the keyword `parameterlist`. For example:\n```\nparameterlist {variable1 = integer, variable2 = character}\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Explain the purpose of the 'on childsetvalue' event block.",
        "input": "",
        "output": "The 'on childsetvalue' event block is used to trigger a set of statements when the value of a child form changes. Here's an example:\n```\non childsetvalue =\nbegin\n    // Statements that are executed when the value of the child form changes.\nend;\n```\nThis can be used for data validation, updating other variables, or triggering actions based on the new value in the child form.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How does OpenROAD handle multiple events within an event block?",
        "input": "",
        "output": "OpenROAD supports multiple events within a single event block by using the `on` keyword multiple times to specify each event. The following example shows an event block that handles both 'childenter' and 'childexit' events:\n```\non childenter, childexit =\nbegin\n    // Statements that are executed when either the child enters or exits.\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Explain the purpose of `data_is_changed = TRUE` in a frame script?",
        "input": "",
        "output": "The line `data_is_changed = TRUE` in a frame script sets a boolean variable named `data_is_changed` to `TRUE`. This is often used within event blocks to indicate that data on the form has been changed since it was last retrieved or saved. In the example provided, it is used to check if there have been any changes made to the data before saving it.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is OpenROAD and how is it related to Actian 4GL SQL?",
        "input": "",
        "output": "OpenROAD is a development environment provided by Actian for creating database-driven applications using Actian's 4GL (Fourth Generation Language) SQL. It provides a set of tools and utilities that simplify the process of creating, debugging, and maintaining these applications. Actian 4GL SQL is the programming language used within OpenROAD to write code for database interactions, user interface design, and application logic.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Explain the role of the childsetvalue event and its implementation in a frame script in Actian 4GL SQL.",
        "input": "",
        "output": "The childsetvalue event is fired when the value of a field's data is changed in a form or a report. In a frame script, it is used to execute logic in response to changes made to a specific child field's data within the form. The implementation involves defining a script using the on childsetvalue = keyword and placing the logic inside the begin...end block.\nHere's an example of its usage:\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```\nThe above example sets the value of the variable `data_is_changed` to `TRUE` every time a child field's value is changed within the form. This could be used in conjunction with conditional logic to perform various actions when data is updated.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Describe how OpenROAD integrates with frame scripts in Actian 4GL SQL for developing forms and reports.",
        "input": "",
        "output": "OpenROAD is a development environment used for creating forms, reports, and other interactive applications in Actian 4GL SQL. It provides an integrated development environment (IDE) that allows developers to visually design their forms using drag-and-drop components. When developing forms or reports, developers can use frame scripts written in Actian 4GL SQL to handle business logic and implement conditional actions. Frame scripts are embedded within the form or report definition and execute when specific events occur, such as data changes (childsetvalue event), user input, or navigation. Developers can leverage OpenROAD's visual design tools along with frame scripts to create powerful and dynamic forms and reports that meet their specific business requirements.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Provide an example of a simple frame script that initializes a local variable and performs some start-up operations.",
        "input": "",
        "output": "```\n[initialize] = begin\n    declare\n        myVar integer;\n    enddeclare\n    begin\n        set myVar to 123;\n        /* Perform other start-up operations */\n        open some_table;\n        select * from some_table into @myArray;\n    end;\nend;\n```\nIn this example, the frame script initializes a local variable \"myVar\" as an integer and assigns it a value of 123. It also performs other start-up operations like opening a table named \"some\\_table\" and selecting all its records into an array called \"@myArray\".",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the purpose of event blocks in Actian 4GL SQL frame scripts?",
        "input": "",
        "output": "Event blocks in Actian 4GL SQL frame scripts are used to define actions to be taken when specific events occur within a frame, a form field, or a menu item. The syntax for an event block includes defining the type of event and any associated variables, followed by a sequence of statements that will be executed when the specified event occurs.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Can you explain what a frame script is in Actian 4GL SQL?",
        "input": "",
        "output": "A frame script in Actian 4GL SQL, also known as OpenROAD, is a programming construct that allows developers to create forms and manipulate data within those forms. Frame scripts are used for event-driven programming, where the system responds to specific events such as user input or form changes. They consist of blocks of code enclosed by keywords such as `on`, `begin`, and `end`.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Given a scenario where you want to check if any changes have been made to the data in a field before saving, how would you use frame scripts in Actian 4GL SQL?",
        "input": "",
        "output": "To check if any changes have been made to the data in a field before saving, you can use the `on childsetvalue` event within a frame script:\n```\non childsetvalue =\nbegin\n    if new_field != old_field then\n        data_is_changed = TRUE;\n    end if;\nend;\n```\nIn this example, the code checks if the new value of the field (`new_field`) is different from its original value (`old_field`). If they are different, `data_is_changed` is set to `TRUE`.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Provide an example of a frame script that triggers an alert when a certain condition is met in Actian 4GL SQL.",
        "input": "",
        "output": "To create an alert, we can use the message box function in combination with conditional logic within a frame script. Here's an example:\n```\non childsetvalue =\nbegin\n    if condition_met then\n        message_box(\"Alert! The condition has been met.\");\n    end if;\nend;\n```\nIn the above example, the alert will be displayed in a message box whenever the defined condition (`condition_met`) is true. Developers can modify this script to fit their specific requirements based on the conditions they want to monitor.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Explain the concept of event-driven programming and its significance in Actian 4GL SQL.",
        "input": "",
        "output": "Event-driven programming is a programming paradigm where the flow of execution is determined by events, such as user interactions or changes in data. In this model, code is associated with specific events so that the appropriate action can be taken when an event occurs. Event-driven programming is significant in Actian 4GL SQL because it allows for dynamic and interactive applications that can react to user actions and data changes effectively. This makes it easier to build complex and responsive business applications using the Actian 4GL SQL language.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Given a scenario where you want to prevent users from making changes to specific fields, how can you utilize a frame script in Actian 4GL SQL?",
        "input": "",
        "output": "To prevent users from making changes to specific fields within a form, you can use the before\\_update event of the frame script. Here's an example that demonstrates this:\n```\non before_update =\nbegin\n    if child.field1 or child.field2 then\n        child.field1.allow_edit = FALSE;\n        child.field2.allow_edit = FALSE;\n        message 'Changes to these fields are not allowed.';\n    end if;\nend;\n```\nIn the provided script, when an attempt is made to update data in either field 1 or field 2, their allow\\_edit property will be set to `FALSE`, effectively disabling editing for those particular fields. Additionally, a message is displayed indicating that changes to these fields are not allowed.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Describe the difference between a frame and a report in Actian 4GL SQL.",
        "input": "",
        "output": "In Actian 4GL SQL, both frames and reports are used for presenting and manipulating data. However, they serve different purposes:\n- A frame is a dynamic container that can hold any combination of controls like fields, buttons, images, etc., and can be used within another form or report as a subroutine. It has the ability to contain complex logic using scripting. Frames are typically used for reusable user interface elements like navigation menus, search forms, or data input/display panels.\n- A report is a static container that presents the data in a specific format based on a query (SQL statement). It generates output either as a printed document (hardcopy), a file (PDF, HTML, etc.), or to a display window. Reports are used for generating data summaries, detailed reports, charts, and graphs.\nIn short, frames are used for building interactive user interfaces while reports are used for presenting and analyzing data in various formats.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Provide an example of a simple frame script that includes an event block for a specific event and some initializations.",
        "input": "",
        "output": "Here's an example of a simple frame script that includes an `on click` event block for the \"Quit\" button, as well as some initializations:\n```\ninitialize =\ndeclare\n    message string;\nenddeclare\nbegin\n    // Initialize variables\n    set message = \"Welcome to our application!\";\n    show_message(message);\nend;\non click quit_button =\nbegin\n    messagebox(\"Are you sure you want to quit?\", MB_YESNO, MB_ICONWARNING);\n    if mbresult = IDYES then\n        // Quit the application\n        parent_frame.SendUserEvent(eventname = 'APPLICATION_EXIT');\n    endif;\nend;\n```\nIn this script, the `initialize` statement declares a variable called \"message\" and sets its value to \"Welcome to our application!\". The `show_message()` function is then used to display the message to the user.\n\nThe `on click quit_button` event block defines the actions that should be taken when the user clicks on the \"Quit\" button. In this case, a message box is displayed with two options: \"Yes\" and \"No\". If the user chooses \"Yes\", the `SendUserEvent()` function is called to trigger the application exit event, which would then close the application.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Write a script that demonstrates the use of an 'on childsetvalue' event block to perform data validation.",
        "input": "",
        "output": "Here's a simple example where we check if the value entered in the child form is greater than zero:\n```\ndeclare\n    inputValue;\nenddeclare;\n\non childsetvalue =\nbegin\n    get control_name('child_form') . value into inputValue;\n    if(inputValue <= 0) then\n        display 'Input value must be greater than zero.' as warning;\n        set control_name('child_form'). value to previous value;\n    endif;\nend;\n```\nIn this example, we first declare a local variable `inputValue`. Then, in the `on childsetvalue` event block, we get the value of the child form and store it in `inputValue`. If the entered value is less than or equal to zero, a warning message is displayed and the input value is set back to its previous value.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How would you update multiple variables based on user input in a frame script?",
        "input": "",
        "output": "To update multiple variables based on user input in a frame script, you can use multiple 'set' statements within the event block or procedure. Here's an example:\n```\ndeclare\n    variable1;\n    variable2;\nenddeclare;\n\non some_event =\nbegin\n    get control_name('input1'). value into variable1;\n    get control_name('input2'). value into variable2;\n    set control_name('output1') . text to concat(variable1, ' - ', variable2);\nend;\n```\nIn this example, we first declare two variables `variable1` and `variable2`. Then, when a specific event occurs, we get the values from two user input fields (`input1` and `input2`) and update an output field (`output1`) with a concatenated string of both input values.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Explain how to initialize local variables in a frame script for Actian 4GL SQL.",
        "input": "",
        "output": "In Actian 4GL SQL, you can initialize local variables in a frame script using the `initialize` statement:\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\nThe `initialize` statement contains the local variable definitions and start-up operations for the frame. The `declare` section is used to define the local variables, while the `begin` and `end` delimit the initializing statements that will be executed when the frame is loaded. Variables declared here can be accessed anywhere in the frame script or any of the field/menu item scripts associated with the frame.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How to include event blocks for events on individual fields or menu items in Actian 4GL SQL frame scripts?",
        "input": "",
        "output": "To include event blocks for events on individual fields or menu items in Actian 4GL SQL frame scripts, you can use the `on` keyword followed by the specific event type and the variable name associated with that field or menu item:\n```\non click close_button =\nbegin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n```\nIn this example, the event block is associated with the `close_button` and its specific click event. When this event occurs, it triggers the code within the `begin` and `end` blocks.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What's the purpose of frame scripts in OpenROAD and how do they differ from triggers?",
        "input": "",
        "output": "Frame scripts in OpenROAD are a set of statements used to define behavior within an application, such as validating user input or controlling data flow. Unlike triggers that respond to changes at the database level, frame scripts are executed on the application side and run locally before the data is sent to the server for processing.\n\nFrame scripts can be written in Actian 4GL SQL language and provide a higher-level of control over business rules and user interaction. They offer more flexibility compared to triggers since they allow developers to define custom logic based on specific application requirements. Frame scripts can be associated with forms, reports, or other objects within the OpenROAD environment.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How can you create a frame script that validates user input for data integrity in Actian 4GL SQL?",
        "input": "",
        "output": "To validate user input and maintain data integrity, you can use the `on before_update` event in a frame script. Here's an example to demonstrate this:\n```\non before_update =\nbegin\n    if child.column1 not in ('value1', 'value2', 'value3') then\n        message 'Invalid value entered for column1.';\n        child.cancel();\n    end if;\nend;\n```\nIn this example, when an attempt is made to update data for `column1`, the script checks whether the new value is one of a predefined list ('value1', 'value2', 'value3'). If the entered value does not match any of these values, the script displays a message informing the user that the input is invalid and cancels the update operation.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Can you give an example of how to use a frame script in Actian 4GL SQL to validate user input?",
        "input": "",
        "output": "To validate user input using a frame script in Actian 4GL SQL, we can create an event block that checks for certain conditions when the field value is changed. For example, let's assume we have a form with an email field and we want to check if the entered email address is valid. Here's a simple example:\n```\non childsetvalue =\nbegin\n    if not val_email(email_field) then\n        error 'Invalid email address';\n    end;\nend;\n```\nIn this script, the `val_email()` function is a user-defined function that checks the format of an email address. If the entered email address does not match the expected format, an error message will be displayed to the user.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the use of the 'data\\_is\\_changed' variable in frame scripts?",
        "input": "",
        "output": "The `data_is_changed` variable in frame scripts is a Boolean variable that indicates whether the value of any field or control on the form has been modified since it was last retrieved from the database. This variable can be used to check if the user has made any changes before performing an update operation. For example, we can use this variable to confirm with the user before updating the data in the database:\n```\nif data_is_changed then\n    if confirm('Are you sure you want to save the changes?') then\n        update record;\n    end;\nend;\n```\nIn this script, we first check if `data_is_changed`, meaning that the user has made some changes in the form. We then prompt the user with a confirmation dialog. If the user clicks \"Yes\", we update the data in the database. Otherwise, no changes are made to the data.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is the purpose of the `on childsetvalue` event in Actian 4GL SQL frame scripts?",
        "input": "",
        "output": "The `on childsetvalue` event is triggered when the value of a field within a record set (or cursor) is changed. This event can be used to perform various tasks such as updating other fields, validating data, or triggering business logic based on changes in the values. Here's an example using the provided code snippet:\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```\nIn this case, whenever a value within a record set is updated, it will trigger the execution of the script, setting the `data_is_changed` variable to TRUE. This can be useful in managing updates across multiple records or in maintaining integrity checks for complex data sets.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "How do you use OpenROAD with Actian 4GL SQL frame scripts?",
        "input": "",
        "output": "OpenROAD is a graphical development environment (IDE) for Actian 4GL SQL. It simplifies the process of creating, testing, and deploying Actian 4GL applications. To use OpenROAD with your frame scripts, follow these general steps:\n1. Launch OpenROAD and create or open an existing project.\n2. Create a new frame within the project using either the Frames menu or the Project Explorer window.\n3. Add your script code to the initialize, validate, or other event blocks in the frame as needed.\n4. Test your application by running it in the OpenROAD Debugger, making adjustments as necessary to fine-tune your code or correct any errors that arise.\n5. Once you're satisfied with your application, you can deploy it using the appropriate tools within OpenROAD, depending on your specific development environment and target platform.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Explain the use of the 'initialize' statement in a frame script in OpenROAD.",
        "input": "",
        "output": "The initialize statement is used in a frame script to declare local variables and perform start-up operations for a frame in OpenROAD. It must be the first statement in the frame script if it is used. The variables declared here can be accessed anywhere in the frame script or in any of the field or menu item scripts associated with the frame.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What is an example of a typical frame event that can be handled using a frame script?",
        "input": "",
        "output": "A typical frame event that can be handled using a frame script is the Terminate event, which exits the frame. Here's an example:\n```\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "What are some typical frame events in Actian 4GL SQL?",
        "input": "",
        "output": "In Actian 4GL SQL, some common frame events include:\n\n1. Terminate: Exits the frame. This event can be used to perform any necessary cleanup before exiting the frame.\n2. ChildEntry: Enters a subform, composite field, or any field on the form.\n3. ChildExit: Exits a subform, composite field, or any field on the form.\n4. ChildSetValue: Changes a subform, composite field, or any field on the form.\n5. FrameResized: Changes the size of the window.\n6. UserEvent: Specifies a user event that can be triggered by a custom action.\n\nThese events allow developers to customize the behavior of frames in Actian 4GL SQL applications and respond to specific actions or changes within the application. For more information, consult the Language Reference Guide online help.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Provide an example of a frame event in Actian 4GL SQL and explain what this event does.",
        "input": "",
        "output": "An example of a frame event in Actian 4GL SQL is the 'windowclose' event, which is triggered when the window associated with the frame is about to close:\n```\non windowclose =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```\nThis event is often used to perform any necessary actions before the window is closed, such as saving user input or closing a database connection.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    },
    {
        "instruction": "Explain the purpose of the 'data_is_changed' variable in the following example:\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```",
        "input": "",
        "output": "In the provided example, the 'data_is_changed' variable is used to indicate whether or not any changes have been made to the data in the child set. When a user modifies the value of a field or menu item defined within the frame, the 'on childsetvalue' event is triggered and sets the value of the 'data_is_changed' variable to TRUE. This allows for the implementation of conditional logic in your application that checks whether data has been modified before performing certain actions such as saving or discarding changes.",
        "taxonomy_path": "knowledge->programming_languages->scripts->frame_scripts",
        "task_description": "Explain the frame scripts in Actian 4GL SQL and how they are used in OpenROAD.",
        "document": [
            "# Frame Scripts\n\nEach frame can have one frame script. In the frame script, you can do the following:\n\n- Initialize local variables for the frame\n- Perform any start-up operations for the frame\n- Include event blocks for events that apply to the frame as a whole\n- Include event blocks for events on individual fields or menu items\n\n## General Syntax\n\nThe general syntax of a frame script is:\n\n```\n[initialize [([parameterlist])] =\n[declare\n        [localvariablelist]\n        [localprocedureforwardreferences]\n[enddeclare]]\n[begin\n         statementlist\nend [;]]\n{eventblock [;]}\n{localprocedure [;]}\n{parameterlist [;]}\n{localvariablelist [;]}\n```\n\n### parameterlist\n\nSpecifies the following:\n`{variable = datatype {, variable = datatype}}`\n\n### localvariablelist\n\nSpecifies the following:\n`{variable = datatype;}`\n\nThe initialize statement contains the local variable definitions and start-up operations for the frame. The event blocks contain the code for the events for the frame, form fields, and menu items. You can include comments at any point in your script. For more information, see Comments.\n\nMost applications have a frame script for each frame. However, if the frame needs no initialize statement, you can create the field and menu scripts separately and omit the frame script.\n\n## Initialize Statement\n\nWhen the optional initialize statement is used, it must be the first statement in the frame script.\n\nThe initialize statement can have a parameter list that declares the parameters of a frame. Variables declared as frame parameters may be specified as parameters of the callframe, openframe, and gotoframe statements. For more information about these statements, see the Language Reference Guide online help.\n\nDeclare local variables that are not parameters and forward references to local procedures in the declare section of the initialize statement. If a declare block is not followed by a begin block of initialization statements, enddeclare is required at the end of the local variable declarations in the declare block.\n\nYou can use local variables declared in the initialize statement anywhere in the frame script or in any of the field or menu item scripts associated with the frame.\n\nA local variable can be a simple variable of any acceptable base data type or a reference or array variable of any named user or system class. For more information about declaring variables, see \"Language Elements\" in the Language Reference Guide.\n\nThe local variables you declare with the initialize statement are in addition to the automatically declared variables that are associated with named fields and menu items. (You do not need to explicitly declare the variables associated with named fields and menu items.)\n\nWhen you use the statement block, which is delimited by the keywords begin and end, OpenROAD executes the statements in this block when the frame is started, before displaying the frame on the window. You can use this statement block to perform any start-up operations, such as loading a table field or setting variables.\n\nYou may use the curly brackets { and } in place of the keywords begin and end.\n\n## Frame Script Event Blocks\n\nA frame script can include one or more event blocks. These blocks can contain frame events or events for any field or menu item defined for the frame.\n\nAn event block is a sequence of statements associated with one or more specific events. The syntax for an event block is:\n\n```\non event [variablename]\n    {, on event [variablename]} =\n[declare\n        localvariablelist\n[enddeclare]]\nbegin\n          statementlist\nend[;]\n```\n\nWhen the event occurs, OpenROAD executes the statements specified by the statementlist.\n\n### Rules for Coding Event Blocks\n\n1. If the event is a field or menu item event, you must also specify the variable name associated with that field or menu item.\n\n   Example:\n   ```\n   on click close_button =begin\n        parent_frame.SendUserEvent\n             (eventname = 'INDICATOR_OFF',\n              messageinteger = row_number);\n              return;\n   end;\n   ```\n\n2. If the event is a frame event, do not include a variable name.\n\n   Example:\n   ```\n   on childexit =\n   begin\n       statementlist\n   end;\n   ```\n\n3. You can include more than one event type in an event block.\n\n4. Declare local variables in the declare section of an event block.\n\n5. Separate the statements in the statementlist with semicolons.\n\n### Typical Frame Events\n\n- Terminate: Exits the frame\n- ChildEntry: Enters a subform, composite field, or any field on the form\n- ChildExit: Exits a subform, composite field, or any field on the form\n- ChildSetValue: Changes a subform, composite field, or any field on the form\n- FrameResized: Changes the size of the window\n- UserEvent: Specifies a user event\n\nFor more information about these events, see the Language Reference Guide online help.\n\n## Examples\u2014Frame Event Blocks\n\n### Standard Quit Sequence\n\n```\non click menu.file_menu.quit_menu,\non click quit_button =\nbegin\n    return;\nend;\n```\n\n### Standard Frame Termination Sequence\n\n```\non windowclose,\non terminate =\nbegin\n    if CurFrame.Topform.HasDataChanged = TRUE then\n        /* save data */\n    endif;\nend;\n```",
            "### Typical Field on a Form\n\n```\non childsetvalue =\nbegin\n    data_is_changed = TRUE;\nend;\n```"
        ]
    }
]